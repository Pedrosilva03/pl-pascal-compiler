
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGNMENT BEGIN BOOLEAN CHAR COLON COMMA COMMENT DIV DIVISION DO DOT DOWNTO ELSE END EQ FOR FUNCTION GT GTE IDENTIFIER IF INTEGER LBRACKET LPAREN LT LTE MINUS MOD NBOOLEAN NCHAR NEQ NINTEGER NOT NREAL NSTRING OF OR PLUS PROCEDURE PROGRAM RANGE RBRACKET READLN REAL REPEAT RPAREN SEMICOLON STRING THEN TIMES TO UNTIL VAR WHILE WRITELNprogram : header block DOTheader : PROGRAM IDENTIFIER SEMICOLONblock : variable_declaration body\n             | bodyvariable_declaration : VAR identifier_list COLON type SEMICOLON variable_declaration\n                            | VAR identifier_list COLON type SEMICOLONidentifier_list : IDENTIFIER COMMA identifier_list\n                       | IDENTIFIERtype : NINTEGER\n            | NREAL\n            | NSTRING\n            | NCHAR\n            | NBOOLEAN\n            | array_typearray_type : ARRAY LBRACKET INTEGER RANGE INTEGER RBRACKET OF typebody : BEGIN statements ENDstatements : statement SEMICOLON statements\n                  | statement SEMICOLONstatement : WRITELN LPAREN STRING RPAREN'
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end':([1,10,],[0,-1,]),'VAR':([2,17,34,],[7,-2,7,]),'BEGIN':([2,5,17,34,37,],[8,8,-2,-6,-5,]),'IDENTIFIER':([3,7,19,],[9,13,13,]),'DOT':([4,6,11,20,],[10,-4,-3,-16,]),'WRITELN':([8,21,],[16,16,]),'SEMICOLON':([9,15,23,24,25,26,27,28,29,36,43,],[17,21,34,-9,-10,-11,-12,-13,-14,-19,-15,]),'COLON':([12,13,31,],[18,-8,-7,]),'COMMA':([13,],[19,]),'END':([14,21,32,],[20,-18,-17,]),'LPAREN':([16,],[22,]),'NINTEGER':([18,42,],[24,24,]),'NREAL':([18,42,],[25,25,]),'NSTRING':([18,42,],[26,26,]),'NCHAR':([18,42,],[27,27,]),'NBOOLEAN':([18,42,],[28,28,]),'ARRAY':([18,42,],[30,30,]),'STRING':([22,],[33,]),'LBRACKET':([30,],[35,]),'RPAREN':([33,],[36,]),'INTEGER':([35,39,],[38,40,]),'RANGE':([38,],[39,]),'RBRACKET':([40,],[41,]),'OF':([41,],[42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'header':([0,],[2,]),'block':([2,],[4,]),'variable_declaration':([2,34,],[5,37,]),'body':([2,5,],[6,11,]),'identifier_list':([7,19,],[12,31,]),'statements':([8,21,],[14,32,]),'statement':([8,21,],[15,15,]),'type':([18,42,],[23,43,]),'array_type':([18,42,],[29,29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> header block DOT','program',3,'p_program','pascalYacc.py',9),
  ('header -> PROGRAM IDENTIFIER SEMICOLON','header',3,'p_header','pascalYacc.py',13),
  ('block -> variable_declaration body','block',2,'p_block','pascalYacc.py',17),
  ('block -> body','block',1,'p_block','pascalYacc.py',18),
  ('variable_declaration -> VAR identifier_list COLON type SEMICOLON variable_declaration','variable_declaration',6,'p_variable_declaration','pascalYacc.py',31),
  ('variable_declaration -> VAR identifier_list COLON type SEMICOLON','variable_declaration',5,'p_variable_declaration','pascalYacc.py',32),
  ('identifier_list -> IDENTIFIER COMMA identifier_list','identifier_list',3,'p_identifier_list','pascalYacc.py',45),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','pascalYacc.py',46),
  ('type -> NINTEGER','type',1,'p_type','pascalYacc.py',55),
  ('type -> NREAL','type',1,'p_type','pascalYacc.py',56),
  ('type -> NSTRING','type',1,'p_type','pascalYacc.py',57),
  ('type -> NCHAR','type',1,'p_type','pascalYacc.py',58),
  ('type -> NBOOLEAN','type',1,'p_type','pascalYacc.py',59),
  ('type -> array_type','type',1,'p_type','pascalYacc.py',60),
  ('array_type -> ARRAY LBRACKET INTEGER RANGE INTEGER RBRACKET OF type','array_type',8,'p_array_type','pascalYacc.py',64),
  ('body -> BEGIN statements END','body',3,'p_body','pascalYacc.py',74),
  ('statements -> statement SEMICOLON statements','statements',3,'p_statements','pascalYacc.py',82),
  ('statements -> statement SEMICOLON','statements',2,'p_statements','pascalYacc.py',83),
  ('statement -> WRITELN LPAREN STRING RPAREN','statement',4,'p_statement','pascalYacc.py',91),
]
