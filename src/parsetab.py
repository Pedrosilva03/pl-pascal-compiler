
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGNMENT BEGIN BOOLEAN CHAR COLON COMMA COMMENT DIV DIVISION DO DOT DOWNTO ELSE END EQ FOR FUNCTION GT GTE IDENTIFIER IF INTEGER LBRACKET LPAREN LT LTE MINUS MOD NBOOLEAN NCHAR NEQ NINTEGER NOT NREAL NSTRING OF OR PLUS PROCEDURE PROGRAM RANGE RBRACKET READLN REAL REPEAT RPAREN SEMICOLON STRING THEN TIMES TO UNTIL VAR WHILE WRITELNprogram : header block DOTheader : PROGRAM IDENTIFIER SEMICOLONblock : VAR variable_declaration body\n             | body\n             | function block\n             | procedure blockvariable_declaration : identifier_list COLON type_name SEMICOLON variable_declaration\n                            | identifier_list COLON type_name SEMICOLONidentifier_list : IDENTIFIER COMMA identifier_list\n                       | IDENTIFIERarray_type : ARRAY LBRACKET type RANGE type RBRACKET OF type_namebody : BEGIN statements ENDstatements : statement SEMICOLON statements\n                  | statement SEMICOLONstatement : writeln\n                 | assignment\n                 | procedure_callassignment : IDENTIFIER ASSIGNMENT type\n                  | IDENTIFIER ASSIGNMENT expressionexpression : type operation type\n                  | expression_paren\n                  | expression operation expression\n                  | func_callexpression_paren : LPAREN expression RPARENoperation : plus\n                 | minus\n                 | times\n                 | division\n                 | DIV\n                 | MOD\n                 | RANGEtype_name : NINTEGER\n            | NREAL\n            | NSTRING\n            | NCHAR\n            | NBOOLEAN\n            | array_typetype : integer\n            | real\n            | string\n            | char\n            | boolean\n            | identifier\n            | func_callinteger : INTEGERreal : REALstring : STRINGchar : CHARboolean : BOOLEANidentifier : IDENTIFIERplus : PLUSminus : MINUStimes : TIMESdivision : DIVISIONwriteln : WRITELN LPAREN writeln_args RPARENfunction : func_header SEMICOLON func_body SEMICOLONfunc_header : FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name\n                   | FUNCTION IDENTIFIER LPAREN RPAREN COLON type_namefunc_args : func_arg COMMA func_args\n                 | func_argfunc_arg : IDENTIFIER COLON type_namefunc_body : BEGIN statements ENDfunc_call : IDENTIFIER LPAREN arg_list RPARENarg_list : IDENTIFIER COMMA arg_list\n                | IDENTIFIER\n                | procedure : PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLONprocedure_body : BEGIN statements ENDprocedure_call : IDENTIFIERwriteln_args : type COMMA writeln_args \n                    | type'
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end':([1,14,],[0,-1,]),'VAR':([2,7,8,30,72,103,],[5,5,5,-2,-56,-67,]),'BEGIN':([2,7,8,15,27,30,40,72,80,103,109,],[9,9,9,9,39,-2,75,-56,-8,-67,-7,]),'PROCEDURE':([2,7,8,30,72,103,],[11,11,11,-2,-56,-67,]),'FUNCTION':([2,7,8,30,72,103,],[12,12,12,-2,-56,-67,]),'IDENTIFIER':([3,5,9,11,12,33,35,36,37,39,41,71,75,80,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,122,123,],[13,17,26,28,29,17,26,66,66,26,76,101,26,17,66,66,112,66,-25,-26,-27,-28,-29,-30,-31,-51,-52,-53,-54,101,76,66,112,]),'DOT':([4,6,18,19,31,34,],[14,-4,-5,-6,-3,-12,]),'WRITELN':([9,35,39,75,],[25,25,25,25,]),'SEMICOLON':([10,13,21,22,23,24,26,28,38,42,43,44,45,46,47,48,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,74,82,100,102,114,115,116,117,120,124,125,130,],[27,30,35,-15,-16,-17,-69,40,72,80,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-18,-19,-23,-21,103,-55,-23,-62,-20,-22,-24,-68,-58,-63,-57,-11,]),'COLON':([16,17,50,76,78,106,],[32,-10,-9,105,107,119,]),'COMMA':([17,43,44,45,46,47,48,53,54,55,56,57,58,59,60,61,62,63,64,65,66,79,112,118,124,130,],[33,-32,-33,-34,-35,-36,-37,83,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,108,123,-61,-63,-11,]),'END':([20,35,51,73,104,],[34,-14,-13,102,117,]),'LPAREN':([25,29,37,66,71,86,87,88,89,90,91,92,93,94,95,96,97,101,],[36,41,71,84,71,-25,-26,-27,-28,-29,-30,-31,-51,-52,-53,-54,71,84,]),'ASSIGNMENT':([26,],[37,]),'NINTEGER':([32,105,107,119,129,],[43,43,43,43,43,]),'NREAL':([32,105,107,119,129,],[44,44,44,44,44,]),'NSTRING':([32,105,107,119,129,],[45,45,45,45,45,]),'NCHAR':([32,105,107,119,129,],[46,46,46,46,46,]),'NBOOLEAN':([32,105,107,119,129,],[47,47,47,47,47,]),'ARRAY':([32,105,107,119,129,],[49,49,49,49,49,]),'INTEGER':([36,37,71,81,83,85,86,87,88,89,90,91,92,93,94,95,96,97,122,],[61,61,61,61,61,61,-25,-26,-27,-28,-29,-30,-31,-51,-52,-53,-54,61,61,]),'REAL':([36,37,71,81,83,85,86,87,88,89,90,91,92,93,94,95,96,97,122,],[62,62,62,62,62,62,-25,-26,-27,-28,-29,-30,-31,-51,-52,-53,-54,62,62,]),'STRING':([36,37,71,81,83,85,86,87,88,89,90,91,92,93,94,95,96,97,122,],[63,63,63,63,63,63,-25,-26,-27,-28,-29,-30,-31,-51,-52,-53,-54,63,63,]),'CHAR':([36,37,71,81,83,85,86,87,88,89,90,91,92,93,94,95,96,97,122,],[64,64,64,64,64,64,-25,-26,-27,-28,-29,-30,-31,-51,-52,-53,-54,64,64,]),'BOOLEAN':([36,37,71,81,83,85,86,87,88,89,90,91,92,93,94,95,96,97,122,],[65,65,65,65,65,65,-25,-26,-27,-28,-29,-30,-31,-51,-52,-53,-54,65,65,]),'RPAREN':([41,43,44,45,46,47,48,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,70,77,79,84,98,100,111,112,113,114,115,116,118,121,123,124,127,130,],[78,-32,-33,-34,-35,-36,-37,82,-71,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-21,106,-60,-66,116,-23,-70,-65,124,-20,-22,-24,-61,-59,-66,-63,-64,-11,]),'LBRACKET':([49,],[81,]),'DIV':([54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,98,99,100,101,114,115,116,124,],[-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,90,90,-23,-21,90,90,-23,-50,-20,90,-24,-63,]),'MOD':([54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,98,99,100,101,114,115,116,124,],[-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,91,91,-23,-21,91,91,-23,-50,-20,91,-24,-63,]),'RANGE':([54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,98,99,100,101,110,114,115,116,124,],[-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,92,92,-23,-21,92,92,-23,-50,122,-20,92,-24,-63,]),'PLUS':([54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,98,99,100,101,114,115,116,124,],[-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,93,93,-23,-21,93,93,-23,-50,-20,93,-24,-63,]),'MINUS':([54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,98,99,100,101,114,115,116,124,],[-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,94,94,-23,-21,94,94,-23,-50,-20,94,-24,-63,]),'TIMES':([54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,98,99,100,101,114,115,116,124,],[-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,95,95,-23,-21,95,95,-23,-50,-20,95,-24,-63,]),'DIVISION':([54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,98,99,100,101,114,115,116,124,],[-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,96,96,-23,-21,96,96,-23,-50,-20,96,-24,-63,]),'RBRACKET':([54,55,56,57,58,59,60,61,62,63,64,65,66,124,126,],[-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-63,128,]),'OF':([128,],[129,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'header':([0,],[2,]),'block':([2,7,8,],[4,18,19,]),'body':([2,7,8,15,],[6,6,6,31,]),'function':([2,7,8,],[7,7,7,]),'procedure':([2,7,8,],[8,8,8,]),'func_header':([2,7,8,],[10,10,10,]),'variable_declaration':([5,80,],[15,109,]),'identifier_list':([5,33,80,],[16,50,16,]),'statements':([9,35,39,75,],[20,51,73,104,]),'statement':([9,35,39,75,],[21,21,21,21,]),'writeln':([9,35,39,75,],[22,22,22,22,]),'assignment':([9,35,39,75,],[23,23,23,23,]),'procedure_call':([9,35,39,75,],[24,24,24,24,]),'func_body':([27,],[38,]),'type_name':([32,105,107,119,129,],[42,118,120,125,130,]),'array_type':([32,105,107,119,129,],[48,48,48,48,48,]),'writeln_args':([36,83,],[52,111,]),'type':([36,37,71,81,83,85,97,122,],[53,67,99,110,53,114,99,126,]),'integer':([36,37,71,81,83,85,97,122,],[54,54,54,54,54,54,54,54,]),'real':([36,37,71,81,83,85,97,122,],[55,55,55,55,55,55,55,55,]),'string':([36,37,71,81,83,85,97,122,],[56,56,56,56,56,56,56,56,]),'char':([36,37,71,81,83,85,97,122,],[57,57,57,57,57,57,57,57,]),'boolean':([36,37,71,81,83,85,97,122,],[58,58,58,58,58,58,58,58,]),'identifier':([36,37,71,81,83,85,97,122,],[59,59,59,59,59,59,59,59,]),'func_call':([36,37,71,81,83,85,97,122,],[60,69,100,60,60,60,100,60,]),'expression':([37,71,97,],[68,98,115,]),'expression_paren':([37,71,97,],[70,70,70,]),'procedure_body':([40,],[74,]),'func_args':([41,108,],[77,121,]),'func_arg':([41,108,],[79,79,]),'operation':([67,68,98,99,115,],[85,97,97,85,97,]),'plus':([67,68,98,99,115,],[86,86,86,86,86,]),'minus':([67,68,98,99,115,],[87,87,87,87,87,]),'times':([67,68,98,99,115,],[88,88,88,88,88,]),'division':([67,68,98,99,115,],[89,89,89,89,89,]),'arg_list':([84,123,],[113,127,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> header block DOT','program',3,'p_program','pascalYacc.py',13),
  ('header -> PROGRAM IDENTIFIER SEMICOLON','header',3,'p_header','pascalYacc.py',17),
  ('block -> VAR variable_declaration body','block',3,'p_block','pascalYacc.py',21),
  ('block -> body','block',1,'p_block','pascalYacc.py',22),
  ('block -> function block','block',2,'p_block','pascalYacc.py',23),
  ('block -> procedure block','block',2,'p_block','pascalYacc.py',24),
  ('variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration','variable_declaration',5,'p_variable_declaration','pascalYacc.py',37),
  ('variable_declaration -> identifier_list COLON type_name SEMICOLON','variable_declaration',4,'p_variable_declaration','pascalYacc.py',38),
  ('identifier_list -> IDENTIFIER COMMA identifier_list','identifier_list',3,'p_identifier_list','pascalYacc.py',51),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','pascalYacc.py',52),
  ('array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name','array_type',8,'p_array_type','pascalYacc.py',61),
  ('body -> BEGIN statements END','body',3,'p_body','pascalYacc.py',68),
  ('statements -> statement SEMICOLON statements','statements',3,'p_statements','pascalYacc.py',76),
  ('statements -> statement SEMICOLON','statements',2,'p_statements','pascalYacc.py',77),
  ('statement -> writeln','statement',1,'p_statement','pascalYacc.py',85),
  ('statement -> assignment','statement',1,'p_statement','pascalYacc.py',86),
  ('statement -> procedure_call','statement',1,'p_statement','pascalYacc.py',87),
  ('assignment -> IDENTIFIER ASSIGNMENT type','assignment',3,'p_assignment','pascalYacc.py',92),
  ('assignment -> IDENTIFIER ASSIGNMENT expression','assignment',3,'p_assignment','pascalYacc.py',93),
  ('expression -> type operation type','expression',3,'p_expression','pascalYacc.py',115),
  ('expression -> expression_paren','expression',1,'p_expression','pascalYacc.py',116),
  ('expression -> expression operation expression','expression',3,'p_expression','pascalYacc.py',117),
  ('expression -> func_call','expression',1,'p_expression','pascalYacc.py',118),
  ('expression_paren -> LPAREN expression RPAREN','expression_paren',3,'p_expression_paren','pascalYacc.py',153),
  ('operation -> plus','operation',1,'p_operation','pascalYacc.py',157),
  ('operation -> minus','operation',1,'p_operation','pascalYacc.py',158),
  ('operation -> times','operation',1,'p_operation','pascalYacc.py',159),
  ('operation -> division','operation',1,'p_operation','pascalYacc.py',160),
  ('operation -> DIV','operation',1,'p_operation','pascalYacc.py',161),
  ('operation -> MOD','operation',1,'p_operation','pascalYacc.py',162),
  ('operation -> RANGE','operation',1,'p_operation','pascalYacc.py',163),
  ('type_name -> NINTEGER','type_name',1,'p_type_name','pascalYacc.py',167),
  ('type_name -> NREAL','type_name',1,'p_type_name','pascalYacc.py',168),
  ('type_name -> NSTRING','type_name',1,'p_type_name','pascalYacc.py',169),
  ('type_name -> NCHAR','type_name',1,'p_type_name','pascalYacc.py',170),
  ('type_name -> NBOOLEAN','type_name',1,'p_type_name','pascalYacc.py',171),
  ('type_name -> array_type','type_name',1,'p_type_name','pascalYacc.py',172),
  ('type -> integer','type',1,'p_type','pascalYacc.py',176),
  ('type -> real','type',1,'p_type','pascalYacc.py',177),
  ('type -> string','type',1,'p_type','pascalYacc.py',178),
  ('type -> char','type',1,'p_type','pascalYacc.py',179),
  ('type -> boolean','type',1,'p_type','pascalYacc.py',180),
  ('type -> identifier','type',1,'p_type','pascalYacc.py',181),
  ('type -> func_call','type',1,'p_type','pascalYacc.py',182),
  ('integer -> INTEGER','integer',1,'p_integer','pascalYacc.py',188),
  ('real -> REAL','real',1,'p_real','pascalYacc.py',192),
  ('string -> STRING','string',1,'p_string','pascalYacc.py',196),
  ('char -> CHAR','char',1,'p_char','pascalYacc.py',200),
  ('boolean -> BOOLEAN','boolean',1,'p_boolean','pascalYacc.py',204),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','pascalYacc.py',208),
  ('plus -> PLUS','plus',1,'p_plus','pascalYacc.py',214),
  ('minus -> MINUS','minus',1,'p_minus','pascalYacc.py',218),
  ('times -> TIMES','times',1,'p_times','pascalYacc.py',222),
  ('division -> DIVISION','division',1,'p_division','pascalYacc.py',226),
  ('writeln -> WRITELN LPAREN writeln_args RPAREN','writeln',4,'p_writeln','pascalYacc.py',230),
  ('function -> func_header SEMICOLON func_body SEMICOLON','function',4,'p_function','pascalYacc.py',236),
  ('func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name','func_header',7,'p_function_header','pascalYacc.py',242),
  ('func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name','func_header',6,'p_function_header','pascalYacc.py',243),
  ('func_args -> func_arg COMMA func_args','func_args',3,'p_function_args','pascalYacc.py',250),
  ('func_args -> func_arg','func_args',1,'p_function_args','pascalYacc.py',251),
  ('func_arg -> IDENTIFIER COLON type_name','func_arg',3,'p_func_arg','pascalYacc.py',261),
  ('func_body -> BEGIN statements END','func_body',3,'p_func_body','pascalYacc.py',265),
  ('func_call -> IDENTIFIER LPAREN arg_list RPAREN','func_call',4,'p_func_call','pascalYacc.py',269),
  ('arg_list -> IDENTIFIER COMMA arg_list','arg_list',3,'p_arg_list','pascalYacc.py',273),
  ('arg_list -> IDENTIFIER','arg_list',1,'p_arg_list','pascalYacc.py',274),
  ('arg_list -> <empty>','arg_list',0,'p_arg_list','pascalYacc.py',275),
  ('procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON','procedure',5,'p_procedure','pascalYacc.py',289),
  ('procedure_body -> BEGIN statements END','procedure_body',3,'p_procedure_body','pascalYacc.py',294),
  ('procedure_call -> IDENTIFIER','procedure_call',1,'p_procedure_call','pascalYacc.py',298),
  ('writeln_args -> type COMMA writeln_args','writeln_args',3,'p_writeln_args','pascalYacc.py',324),
  ('writeln_args -> type','writeln_args',1,'p_writeln_args','pascalYacc.py',325),
]
