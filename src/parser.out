Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    REPEAT
    UNTIL

Grammar

Rule 0     S' -> program
Rule 1     program -> header block DOT
Rule 2     header -> PROGRAM IDENTIFIER SEMICOLON
Rule 3     block -> VAR variable_declaration body
Rule 4     block -> body
Rule 5     block -> function block
Rule 6     block -> procedure block
Rule 7     variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration
Rule 8     variable_declaration -> identifier_list COLON type_name SEMICOLON
Rule 9     identifier_list -> IDENTIFIER COMMA identifier_list
Rule 10    identifier_list -> IDENTIFIER
Rule 11    array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name
Rule 12    array_access -> IDENTIFIER LBRACKET type RBRACKET
Rule 13    body -> BEGIN statements END
Rule 14    statements -> statement SEMICOLON statements
Rule 15    statements -> statement SEMICOLON
Rule 16    statement -> writeln
Rule 17    statement -> assignment
Rule 18    statement -> procedure_call
Rule 19    statement -> cond_if
Rule 20    statement -> while_loop
Rule 21    statement -> for_loop
Rule 22    statement -> readln
Rule 23    assignment -> type ASSIGNMENT type
Rule 24    assignment -> type ASSIGNMENT expression
Rule 25    assignment -> type ASSIGNMENT length
Rule 26    expression -> type operation type
Rule 27    expression -> expression_paren
Rule 28    expression -> expression operation type
Rule 29    expression -> expression operation expression
Rule 30    expression -> func_call
Rule 31    expression -> condition
Rule 32    expression_paren -> LPAREN expression RPAREN
Rule 33    operation -> plus
Rule 34    operation -> minus
Rule 35    operation -> times
Rule 36    operation -> division
Rule 37    operation -> div
Rule 38    operation -> mod
Rule 39    operation -> RANGE
Rule 40    type_name -> NINTEGER
Rule 41    type_name -> NREAL
Rule 42    type_name -> NSTRING
Rule 43    type_name -> NCHAR
Rule 44    type_name -> NBOOLEAN
Rule 45    type_name -> array_type
Rule 46    type -> integer
Rule 47    type -> real
Rule 48    type -> string
Rule 49    type -> char
Rule 50    type -> boolean
Rule 51    type -> identifier
Rule 52    type -> func_call
Rule 53    type -> array_access
Rule 54    integer -> INTEGER
Rule 55    real -> REAL
Rule 56    string -> STRING
Rule 57    char -> CHAR
Rule 58    boolean -> BOOLEAN
Rule 59    identifier -> IDENTIFIER
Rule 60    plus -> PLUS
Rule 61    minus -> MINUS
Rule 62    times -> TIMES
Rule 63    division -> DIVISION
Rule 64    div -> DIV
Rule 65    mod -> MOD
Rule 66    comparator -> eq
Rule 67    comparator -> neq
Rule 68    comparator -> lt
Rule 69    comparator -> gt
Rule 70    comparator -> lte
Rule 71    comparator -> gte
Rule 72    comparator -> and
Rule 73    comparator -> or
Rule 74    comparator -> not
Rule 75    eq -> EQ
Rule 76    neq -> NEQ
Rule 77    lt -> LT
Rule 78    gt -> GT
Rule 79    lte -> LTE
Rule 80    gte -> GTE
Rule 81    and -> AND
Rule 82    or -> OR
Rule 83    not -> NOT
Rule 84    length -> LENGTH LPAREN type RPAREN
Rule 85    function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON
Rule 86    function -> func_header SEMICOLON func_body SEMICOLON
Rule 87    func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
Rule 88    func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name
Rule 89    func_args -> func_arglist SEMICOLON func_args
Rule 90    func_args -> func_arglist
Rule 91    func_arglist -> identifier_list COLON type_name
Rule 92    func_variable_declaration -> identifier_list COLON type_name SEMICOLON func_variable_declaration
Rule 93    func_variable_declaration -> identifier_list COLON type_name SEMICOLON
Rule 94    func_body -> BEGIN statements END
Rule 95    func_call -> prepare_func_call LPAREN arg_list RPAREN
Rule 96    prepare_func_call -> IDENTIFIER
Rule 97    arg_list -> IDENTIFIER COMMA arg_list
Rule 98    arg_list -> IDENTIFIER
Rule 99    arg_list -> <empty>
Rule 100   procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
Rule 101   procedure_body -> BEGIN statements END
Rule 102   procedure_call -> IDENTIFIER
Rule 103   cond_if -> IF condition THEN statement
Rule 104   cond_if -> IF condition THEN statement ELSE statement
Rule 105   cond_if -> IF condition THEN if_body
Rule 106   cond_if -> IF condition THEN if_body ELSE if_body
Rule 107   condition -> expression comparator expression
Rule 108   condition -> type comparator expression
Rule 109   condition -> type comparator type
Rule 110   condition -> expression comparator type
Rule 111   condition -> type
Rule 112   if_body -> BEGIN statements END
Rule 113   to -> TO
Rule 114   downto -> DOWNTO
Rule 115   for_loop -> FOR assignment to type DO statement
Rule 116   for_loop -> FOR assignment to type DO if_body
Rule 117   for_loop -> FOR assignment downto type DO statement
Rule 118   for_loop -> FOR assignment downto type DO if_body
Rule 119   while_loop -> WHILE condition DO statement
Rule 120   while_loop -> WHILE condition DO if_body
Rule 121   readln -> READLN LPAREN type RPAREN
Rule 122   writeln -> WRITELN LPAREN writeln_args RPAREN
Rule 123   writeln_args -> type COMMA writeln_args
Rule 124   writeln_args -> type

Terminals, with rules where they appear

AND                  : 81
ARRAY                : 11
ASSIGNMENT           : 23 24 25
BEGIN                : 13 94 101 112
BOOLEAN              : 58
CHAR                 : 57
COLON                : 7 8 87 88 91 92 93
COMMA                : 9 97 123
COMMENT              : 
DIV                  : 64
DIVISION             : 63
DO                   : 115 116 117 118 119 120
DOT                  : 1
DOWNTO               : 114
ELSE                 : 104 106
END                  : 13 94 101 112
EQ                   : 75
FOR                  : 115 116 117 118
FUNCTION             : 87 88
GT                   : 78
GTE                  : 80
IDENTIFIER           : 2 9 10 12 59 87 88 96 97 98 100 102
IF                   : 103 104 105 106
INTEGER              : 54
LBRACKET             : 11 12
LENGTH               : 84
LPAREN               : 32 84 87 88 95 121 122
LT                   : 77
LTE                  : 79
MINUS                : 61
MOD                  : 65
NBOOLEAN             : 44
NCHAR                : 43
NEQ                  : 76
NINTEGER             : 40
NOT                  : 83
NREAL                : 41
NSTRING              : 42
OF                   : 11
OR                   : 82
PLUS                 : 60
PROCEDURE            : 100
PROGRAM              : 2
RANGE                : 11 39
RBRACKET             : 11 12
READLN               : 121
REAL                 : 55
REPEAT               : 
RPAREN               : 32 84 87 88 95 121 122
SEMICOLON            : 2 7 8 14 15 85 85 86 86 89 92 93 100 100
STRING               : 56
THEN                 : 103 104 105 106
TIMES                : 62
TO                   : 113
UNTIL                : 
VAR                  : 3 85
WHILE                : 119 120
WRITELN              : 122
error                : 

Nonterminals, with rules where they appear

and                  : 72
arg_list             : 95 97
array_access         : 53
array_type           : 45
assignment           : 17 115 116 117 118
block                : 1 5 6
body                 : 3 4
boolean              : 50
char                 : 49
comparator           : 107 108 109 110
cond_if              : 19
condition            : 31 103 104 105 106 119 120
div                  : 37
division             : 36
downto               : 117 118
eq                   : 66
expression           : 24 28 29 29 32 107 107 108 110
expression_paren     : 27
for_loop             : 21
func_arglist         : 89 90
func_args            : 87 89
func_body            : 85 86
func_call            : 30 52
func_header          : 85 86
func_variable_declaration : 85 92
function             : 5
gt                   : 69
gte                  : 71
header               : 1
identifier           : 51
identifier_list      : 7 8 9 91 92 93
if_body              : 105 106 106 116 118 120
integer              : 46
length               : 25
lt                   : 68
lte                  : 70
minus                : 34
mod                  : 38
neq                  : 67
not                  : 74
operation            : 26 28 29
or                   : 73
plus                 : 33
prepare_func_call    : 95
procedure            : 6
procedure_body       : 100
procedure_call       : 18
program              : 0
readln               : 22
real                 : 47
statement            : 14 15 103 104 104 115 117 119
statements           : 13 14 94 101 112
string               : 48
times                : 35
to                   : 115 116
type                 : 11 11 12 23 23 24 25 26 26 28 84 108 109 109 110 111 115 116 117 118 121 123 124
type_name            : 7 8 11 87 88 91 92 93
variable_declaration : 3 7
while_loop           : 20
writeln              : 16
writeln_args         : 122 123

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . header block DOT
    (2) header -> . PROGRAM IDENTIFIER SEMICOLON

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    header                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> header . block DOT
    (3) block -> . VAR variable_declaration body
    (4) block -> . body
    (5) block -> . function block
    (6) block -> . procedure block
    (13) body -> . BEGIN statements END
    (85) function -> . func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON
    (86) function -> . func_header SEMICOLON func_body SEMICOLON
    (100) procedure -> . PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
    (87) func_header -> . FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (88) func_header -> . FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name

    VAR             shift and go to state 5
    BEGIN           shift and go to state 9
    PROCEDURE       shift and go to state 11
    FUNCTION        shift and go to state 12

    block                          shift and go to state 4
    body                           shift and go to state 6
    function                       shift and go to state 7
    procedure                      shift and go to state 8
    func_header                    shift and go to state 10

state 3

    (2) header -> PROGRAM . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 13


state 4

    (1) program -> header block . DOT

    DOT             shift and go to state 14


state 5

    (3) block -> VAR . variable_declaration body
    (7) variable_declaration -> . identifier_list COLON type_name SEMICOLON variable_declaration
    (8) variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    variable_declaration           shift and go to state 15
    identifier_list                shift and go to state 16

state 6

    (4) block -> body .

    DOT             reduce using rule 4 (block -> body .)


state 7

    (5) block -> function . block
    (3) block -> . VAR variable_declaration body
    (4) block -> . body
    (5) block -> . function block
    (6) block -> . procedure block
    (13) body -> . BEGIN statements END
    (85) function -> . func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON
    (86) function -> . func_header SEMICOLON func_body SEMICOLON
    (100) procedure -> . PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
    (87) func_header -> . FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (88) func_header -> . FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name

    VAR             shift and go to state 5
    BEGIN           shift and go to state 9
    PROCEDURE       shift and go to state 11
    FUNCTION        shift and go to state 12

    function                       shift and go to state 7
    block                          shift and go to state 18
    body                           shift and go to state 6
    procedure                      shift and go to state 8
    func_header                    shift and go to state 10

state 8

    (6) block -> procedure . block
    (3) block -> . VAR variable_declaration body
    (4) block -> . body
    (5) block -> . function block
    (6) block -> . procedure block
    (13) body -> . BEGIN statements END
    (85) function -> . func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON
    (86) function -> . func_header SEMICOLON func_body SEMICOLON
    (100) procedure -> . PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
    (87) func_header -> . FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (88) func_header -> . FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name

    VAR             shift and go to state 5
    BEGIN           shift and go to state 9
    PROCEDURE       shift and go to state 11
    FUNCTION        shift and go to state 12

    procedure                      shift and go to state 8
    block                          shift and go to state 19
    body                           shift and go to state 6
    function                       shift and go to state 7
    func_header                    shift and go to state 10

state 9

    (13) body -> BEGIN . statements END
    (14) statements -> . statement SEMICOLON statements
    (15) statements -> . statement SEMICOLON
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . readln
    (122) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (23) assignment -> . type ASSIGNMENT type
    (24) assignment -> . type ASSIGNMENT expression
    (25) assignment -> . type ASSIGNMENT length
    (102) procedure_call -> . IDENTIFIER
    (103) cond_if -> . IF condition THEN statement
    (104) cond_if -> . IF condition THEN statement ELSE statement
    (105) cond_if -> . IF condition THEN if_body
    (106) cond_if -> . IF condition THEN if_body ELSE if_body
    (119) while_loop -> . WHILE condition DO statement
    (120) while_loop -> . WHILE condition DO if_body
    (115) for_loop -> . FOR assignment to type DO statement
    (116) for_loop -> . FOR assignment to type DO if_body
    (117) for_loop -> . FOR assignment downto type DO statement
    (118) for_loop -> . FOR assignment downto type DO if_body
    (121) readln -> . READLN LPAREN type RPAREN
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 31
    IF              shift and go to state 32
    WHILE           shift and go to state 33
    FOR             shift and go to state 34
    READLN          shift and go to state 35
    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48

    statements                     shift and go to state 20
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28
    type                           shift and go to state 30
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 10

    (85) function -> func_header . SEMICOLON VAR func_variable_declaration func_body SEMICOLON
    (86) function -> func_header . SEMICOLON func_body SEMICOLON

    SEMICOLON       shift and go to state 50


state 11

    (100) procedure -> PROCEDURE . IDENTIFIER SEMICOLON procedure_body SEMICOLON

    IDENTIFIER      shift and go to state 51


state 12

    (87) func_header -> FUNCTION . IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (88) func_header -> FUNCTION . IDENTIFIER LPAREN RPAREN COLON type_name

    IDENTIFIER      shift and go to state 52


state 13

    (2) header -> PROGRAM IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 53


state 14

    (1) program -> header block DOT .

    $end            reduce using rule 1 (program -> header block DOT .)


state 15

    (3) block -> VAR variable_declaration . body
    (13) body -> . BEGIN statements END

    BEGIN           shift and go to state 9

    body                           shift and go to state 54

state 16

    (7) variable_declaration -> identifier_list . COLON type_name SEMICOLON variable_declaration
    (8) variable_declaration -> identifier_list . COLON type_name SEMICOLON

    COLON           shift and go to state 55


state 17

    (9) identifier_list -> IDENTIFIER . COMMA identifier_list
    (10) identifier_list -> IDENTIFIER .

    COMMA           shift and go to state 56
    COLON           reduce using rule 10 (identifier_list -> IDENTIFIER .)


state 18

    (5) block -> function block .

    DOT             reduce using rule 5 (block -> function block .)


state 19

    (6) block -> procedure block .

    DOT             reduce using rule 6 (block -> procedure block .)


state 20

    (13) body -> BEGIN statements . END

    END             shift and go to state 57


state 21

    (14) statements -> statement . SEMICOLON statements
    (15) statements -> statement . SEMICOLON

    SEMICOLON       shift and go to state 58


state 22

    (16) statement -> writeln .

    SEMICOLON       reduce using rule 16 (statement -> writeln .)
    ELSE            reduce using rule 16 (statement -> writeln .)


state 23

    (17) statement -> assignment .

    SEMICOLON       reduce using rule 17 (statement -> assignment .)
    ELSE            reduce using rule 17 (statement -> assignment .)


state 24

    (18) statement -> procedure_call .

    SEMICOLON       reduce using rule 18 (statement -> procedure_call .)
    ELSE            reduce using rule 18 (statement -> procedure_call .)


state 25

    (19) statement -> cond_if .

    SEMICOLON       reduce using rule 19 (statement -> cond_if .)
    ELSE            reduce using rule 19 (statement -> cond_if .)


state 26

    (20) statement -> while_loop .

    SEMICOLON       reduce using rule 20 (statement -> while_loop .)
    ELSE            reduce using rule 20 (statement -> while_loop .)


state 27

    (21) statement -> for_loop .

    SEMICOLON       reduce using rule 21 (statement -> for_loop .)
    ELSE            reduce using rule 21 (statement -> for_loop .)


state 28

    (22) statement -> readln .

    SEMICOLON       reduce using rule 22 (statement -> readln .)
    ELSE            reduce using rule 22 (statement -> readln .)


state 29

    (122) writeln -> WRITELN . LPAREN writeln_args RPAREN

    LPAREN          shift and go to state 59


state 30

    (23) assignment -> type . ASSIGNMENT type
    (24) assignment -> type . ASSIGNMENT expression
    (25) assignment -> type . ASSIGNMENT length

    ASSIGNMENT      shift and go to state 60


state 31

    (102) procedure_call -> IDENTIFIER .
    (59) identifier -> IDENTIFIER .
    (12) array_access -> IDENTIFIER . LBRACKET type RBRACKET
    (96) prepare_func_call -> IDENTIFIER .

    SEMICOLON       reduce using rule 102 (procedure_call -> IDENTIFIER .)
    ELSE            reduce using rule 102 (procedure_call -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 59 (identifier -> IDENTIFIER .)
    LBRACKET        shift and go to state 61
    LPAREN          reduce using rule 96 (prepare_func_call -> IDENTIFIER .)


state 32

    (103) cond_if -> IF . condition THEN statement
    (104) cond_if -> IF . condition THEN statement ELSE statement
    (105) cond_if -> IF . condition THEN if_body
    (106) cond_if -> IF . condition THEN if_body ELSE if_body
    (107) condition -> . expression comparator expression
    (108) condition -> . type comparator expression
    (109) condition -> . type comparator type
    (110) condition -> . expression comparator type
    (111) condition -> . type
    (26) expression -> . type operation type
    (27) expression -> . expression_paren
    (28) expression -> . expression operation type
    (29) expression -> . expression operation expression
    (30) expression -> . func_call
    (31) expression -> . condition
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (32) expression_paren -> . LPAREN expression RPAREN
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    LPAREN          shift and go to state 67
    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48
    IDENTIFIER      shift and go to state 68

    condition                      shift and go to state 62
    expression                     shift and go to state 63
    type                           shift and go to state 64
    expression_paren               shift and go to state 65
    func_call                      shift and go to state 66
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 33

    (119) while_loop -> WHILE . condition DO statement
    (120) while_loop -> WHILE . condition DO if_body
    (107) condition -> . expression comparator expression
    (108) condition -> . type comparator expression
    (109) condition -> . type comparator type
    (110) condition -> . expression comparator type
    (111) condition -> . type
    (26) expression -> . type operation type
    (27) expression -> . expression_paren
    (28) expression -> . expression operation type
    (29) expression -> . expression operation expression
    (30) expression -> . func_call
    (31) expression -> . condition
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (32) expression_paren -> . LPAREN expression RPAREN
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    LPAREN          shift and go to state 67
    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48
    IDENTIFIER      shift and go to state 68

    condition                      shift and go to state 69
    expression                     shift and go to state 63
    type                           shift and go to state 64
    expression_paren               shift and go to state 65
    func_call                      shift and go to state 66
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 34

    (115) for_loop -> FOR . assignment to type DO statement
    (116) for_loop -> FOR . assignment to type DO if_body
    (117) for_loop -> FOR . assignment downto type DO statement
    (118) for_loop -> FOR . assignment downto type DO if_body
    (23) assignment -> . type ASSIGNMENT type
    (24) assignment -> . type ASSIGNMENT expression
    (25) assignment -> . type ASSIGNMENT length
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48
    IDENTIFIER      shift and go to state 68

    assignment                     shift and go to state 70
    type                           shift and go to state 30
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 35

    (121) readln -> READLN . LPAREN type RPAREN

    LPAREN          shift and go to state 71


state 36

    (46) type -> integer .

    ASSIGNMENT      reduce using rule 46 (type -> integer .)
    RANGE           reduce using rule 46 (type -> integer .)
    EQ              reduce using rule 46 (type -> integer .)
    NEQ             reduce using rule 46 (type -> integer .)
    LT              reduce using rule 46 (type -> integer .)
    GT              reduce using rule 46 (type -> integer .)
    LTE             reduce using rule 46 (type -> integer .)
    GTE             reduce using rule 46 (type -> integer .)
    AND             reduce using rule 46 (type -> integer .)
    OR              reduce using rule 46 (type -> integer .)
    NOT             reduce using rule 46 (type -> integer .)
    PLUS            reduce using rule 46 (type -> integer .)
    MINUS           reduce using rule 46 (type -> integer .)
    TIMES           reduce using rule 46 (type -> integer .)
    DIVISION        reduce using rule 46 (type -> integer .)
    DIV             reduce using rule 46 (type -> integer .)
    MOD             reduce using rule 46 (type -> integer .)
    THEN            reduce using rule 46 (type -> integer .)
    DO              reduce using rule 46 (type -> integer .)
    COMMA           reduce using rule 46 (type -> integer .)
    RPAREN          reduce using rule 46 (type -> integer .)
    SEMICOLON       reduce using rule 46 (type -> integer .)
    TO              reduce using rule 46 (type -> integer .)
    DOWNTO          reduce using rule 46 (type -> integer .)
    ELSE            reduce using rule 46 (type -> integer .)
    RBRACKET        reduce using rule 46 (type -> integer .)


state 37

    (47) type -> real .

    ASSIGNMENT      reduce using rule 47 (type -> real .)
    RANGE           reduce using rule 47 (type -> real .)
    EQ              reduce using rule 47 (type -> real .)
    NEQ             reduce using rule 47 (type -> real .)
    LT              reduce using rule 47 (type -> real .)
    GT              reduce using rule 47 (type -> real .)
    LTE             reduce using rule 47 (type -> real .)
    GTE             reduce using rule 47 (type -> real .)
    AND             reduce using rule 47 (type -> real .)
    OR              reduce using rule 47 (type -> real .)
    NOT             reduce using rule 47 (type -> real .)
    PLUS            reduce using rule 47 (type -> real .)
    MINUS           reduce using rule 47 (type -> real .)
    TIMES           reduce using rule 47 (type -> real .)
    DIVISION        reduce using rule 47 (type -> real .)
    DIV             reduce using rule 47 (type -> real .)
    MOD             reduce using rule 47 (type -> real .)
    THEN            reduce using rule 47 (type -> real .)
    DO              reduce using rule 47 (type -> real .)
    COMMA           reduce using rule 47 (type -> real .)
    RPAREN          reduce using rule 47 (type -> real .)
    SEMICOLON       reduce using rule 47 (type -> real .)
    TO              reduce using rule 47 (type -> real .)
    DOWNTO          reduce using rule 47 (type -> real .)
    ELSE            reduce using rule 47 (type -> real .)
    RBRACKET        reduce using rule 47 (type -> real .)


state 38

    (48) type -> string .

    ASSIGNMENT      reduce using rule 48 (type -> string .)
    RANGE           reduce using rule 48 (type -> string .)
    EQ              reduce using rule 48 (type -> string .)
    NEQ             reduce using rule 48 (type -> string .)
    LT              reduce using rule 48 (type -> string .)
    GT              reduce using rule 48 (type -> string .)
    LTE             reduce using rule 48 (type -> string .)
    GTE             reduce using rule 48 (type -> string .)
    AND             reduce using rule 48 (type -> string .)
    OR              reduce using rule 48 (type -> string .)
    NOT             reduce using rule 48 (type -> string .)
    PLUS            reduce using rule 48 (type -> string .)
    MINUS           reduce using rule 48 (type -> string .)
    TIMES           reduce using rule 48 (type -> string .)
    DIVISION        reduce using rule 48 (type -> string .)
    DIV             reduce using rule 48 (type -> string .)
    MOD             reduce using rule 48 (type -> string .)
    THEN            reduce using rule 48 (type -> string .)
    DO              reduce using rule 48 (type -> string .)
    COMMA           reduce using rule 48 (type -> string .)
    RPAREN          reduce using rule 48 (type -> string .)
    SEMICOLON       reduce using rule 48 (type -> string .)
    TO              reduce using rule 48 (type -> string .)
    DOWNTO          reduce using rule 48 (type -> string .)
    ELSE            reduce using rule 48 (type -> string .)
    RBRACKET        reduce using rule 48 (type -> string .)


state 39

    (49) type -> char .

    ASSIGNMENT      reduce using rule 49 (type -> char .)
    RANGE           reduce using rule 49 (type -> char .)
    EQ              reduce using rule 49 (type -> char .)
    NEQ             reduce using rule 49 (type -> char .)
    LT              reduce using rule 49 (type -> char .)
    GT              reduce using rule 49 (type -> char .)
    LTE             reduce using rule 49 (type -> char .)
    GTE             reduce using rule 49 (type -> char .)
    AND             reduce using rule 49 (type -> char .)
    OR              reduce using rule 49 (type -> char .)
    NOT             reduce using rule 49 (type -> char .)
    PLUS            reduce using rule 49 (type -> char .)
    MINUS           reduce using rule 49 (type -> char .)
    TIMES           reduce using rule 49 (type -> char .)
    DIVISION        reduce using rule 49 (type -> char .)
    DIV             reduce using rule 49 (type -> char .)
    MOD             reduce using rule 49 (type -> char .)
    THEN            reduce using rule 49 (type -> char .)
    DO              reduce using rule 49 (type -> char .)
    COMMA           reduce using rule 49 (type -> char .)
    RPAREN          reduce using rule 49 (type -> char .)
    SEMICOLON       reduce using rule 49 (type -> char .)
    TO              reduce using rule 49 (type -> char .)
    DOWNTO          reduce using rule 49 (type -> char .)
    ELSE            reduce using rule 49 (type -> char .)
    RBRACKET        reduce using rule 49 (type -> char .)


state 40

    (50) type -> boolean .

    ASSIGNMENT      reduce using rule 50 (type -> boolean .)
    RANGE           reduce using rule 50 (type -> boolean .)
    EQ              reduce using rule 50 (type -> boolean .)
    NEQ             reduce using rule 50 (type -> boolean .)
    LT              reduce using rule 50 (type -> boolean .)
    GT              reduce using rule 50 (type -> boolean .)
    LTE             reduce using rule 50 (type -> boolean .)
    GTE             reduce using rule 50 (type -> boolean .)
    AND             reduce using rule 50 (type -> boolean .)
    OR              reduce using rule 50 (type -> boolean .)
    NOT             reduce using rule 50 (type -> boolean .)
    PLUS            reduce using rule 50 (type -> boolean .)
    MINUS           reduce using rule 50 (type -> boolean .)
    TIMES           reduce using rule 50 (type -> boolean .)
    DIVISION        reduce using rule 50 (type -> boolean .)
    DIV             reduce using rule 50 (type -> boolean .)
    MOD             reduce using rule 50 (type -> boolean .)
    THEN            reduce using rule 50 (type -> boolean .)
    DO              reduce using rule 50 (type -> boolean .)
    COMMA           reduce using rule 50 (type -> boolean .)
    RPAREN          reduce using rule 50 (type -> boolean .)
    SEMICOLON       reduce using rule 50 (type -> boolean .)
    TO              reduce using rule 50 (type -> boolean .)
    DOWNTO          reduce using rule 50 (type -> boolean .)
    ELSE            reduce using rule 50 (type -> boolean .)
    RBRACKET        reduce using rule 50 (type -> boolean .)


state 41

    (51) type -> identifier .

    ASSIGNMENT      reduce using rule 51 (type -> identifier .)
    RANGE           reduce using rule 51 (type -> identifier .)
    EQ              reduce using rule 51 (type -> identifier .)
    NEQ             reduce using rule 51 (type -> identifier .)
    LT              reduce using rule 51 (type -> identifier .)
    GT              reduce using rule 51 (type -> identifier .)
    LTE             reduce using rule 51 (type -> identifier .)
    GTE             reduce using rule 51 (type -> identifier .)
    AND             reduce using rule 51 (type -> identifier .)
    OR              reduce using rule 51 (type -> identifier .)
    NOT             reduce using rule 51 (type -> identifier .)
    PLUS            reduce using rule 51 (type -> identifier .)
    MINUS           reduce using rule 51 (type -> identifier .)
    TIMES           reduce using rule 51 (type -> identifier .)
    DIVISION        reduce using rule 51 (type -> identifier .)
    DIV             reduce using rule 51 (type -> identifier .)
    MOD             reduce using rule 51 (type -> identifier .)
    THEN            reduce using rule 51 (type -> identifier .)
    DO              reduce using rule 51 (type -> identifier .)
    COMMA           reduce using rule 51 (type -> identifier .)
    RPAREN          reduce using rule 51 (type -> identifier .)
    SEMICOLON       reduce using rule 51 (type -> identifier .)
    TO              reduce using rule 51 (type -> identifier .)
    DOWNTO          reduce using rule 51 (type -> identifier .)
    ELSE            reduce using rule 51 (type -> identifier .)
    RBRACKET        reduce using rule 51 (type -> identifier .)


state 42

    (52) type -> func_call .

    ASSIGNMENT      reduce using rule 52 (type -> func_call .)
    COMMA           reduce using rule 52 (type -> func_call .)
    RPAREN          reduce using rule 52 (type -> func_call .)
    RBRACKET        reduce using rule 52 (type -> func_call .)
    RANGE           reduce using rule 52 (type -> func_call .)
    EQ              reduce using rule 52 (type -> func_call .)
    NEQ             reduce using rule 52 (type -> func_call .)
    LT              reduce using rule 52 (type -> func_call .)
    GT              reduce using rule 52 (type -> func_call .)
    LTE             reduce using rule 52 (type -> func_call .)
    GTE             reduce using rule 52 (type -> func_call .)
    AND             reduce using rule 52 (type -> func_call .)
    OR              reduce using rule 52 (type -> func_call .)
    NOT             reduce using rule 52 (type -> func_call .)
    PLUS            reduce using rule 52 (type -> func_call .)
    MINUS           reduce using rule 52 (type -> func_call .)
    TIMES           reduce using rule 52 (type -> func_call .)
    DIVISION        reduce using rule 52 (type -> func_call .)
    DIV             reduce using rule 52 (type -> func_call .)
    MOD             reduce using rule 52 (type -> func_call .)
    SEMICOLON       reduce using rule 52 (type -> func_call .)
    TO              reduce using rule 52 (type -> func_call .)
    DOWNTO          reduce using rule 52 (type -> func_call .)
    ELSE            reduce using rule 52 (type -> func_call .)
    THEN            reduce using rule 52 (type -> func_call .)
    DO              reduce using rule 52 (type -> func_call .)


state 43

    (53) type -> array_access .

    ASSIGNMENT      reduce using rule 53 (type -> array_access .)
    RANGE           reduce using rule 53 (type -> array_access .)
    EQ              reduce using rule 53 (type -> array_access .)
    NEQ             reduce using rule 53 (type -> array_access .)
    LT              reduce using rule 53 (type -> array_access .)
    GT              reduce using rule 53 (type -> array_access .)
    LTE             reduce using rule 53 (type -> array_access .)
    GTE             reduce using rule 53 (type -> array_access .)
    AND             reduce using rule 53 (type -> array_access .)
    OR              reduce using rule 53 (type -> array_access .)
    NOT             reduce using rule 53 (type -> array_access .)
    PLUS            reduce using rule 53 (type -> array_access .)
    MINUS           reduce using rule 53 (type -> array_access .)
    TIMES           reduce using rule 53 (type -> array_access .)
    DIVISION        reduce using rule 53 (type -> array_access .)
    DIV             reduce using rule 53 (type -> array_access .)
    MOD             reduce using rule 53 (type -> array_access .)
    THEN            reduce using rule 53 (type -> array_access .)
    DO              reduce using rule 53 (type -> array_access .)
    COMMA           reduce using rule 53 (type -> array_access .)
    RPAREN          reduce using rule 53 (type -> array_access .)
    SEMICOLON       reduce using rule 53 (type -> array_access .)
    TO              reduce using rule 53 (type -> array_access .)
    DOWNTO          reduce using rule 53 (type -> array_access .)
    ELSE            reduce using rule 53 (type -> array_access .)
    RBRACKET        reduce using rule 53 (type -> array_access .)


state 44

    (54) integer -> INTEGER .

    ASSIGNMENT      reduce using rule 54 (integer -> INTEGER .)
    RANGE           reduce using rule 54 (integer -> INTEGER .)
    EQ              reduce using rule 54 (integer -> INTEGER .)
    NEQ             reduce using rule 54 (integer -> INTEGER .)
    LT              reduce using rule 54 (integer -> INTEGER .)
    GT              reduce using rule 54 (integer -> INTEGER .)
    LTE             reduce using rule 54 (integer -> INTEGER .)
    GTE             reduce using rule 54 (integer -> INTEGER .)
    AND             reduce using rule 54 (integer -> INTEGER .)
    OR              reduce using rule 54 (integer -> INTEGER .)
    NOT             reduce using rule 54 (integer -> INTEGER .)
    PLUS            reduce using rule 54 (integer -> INTEGER .)
    MINUS           reduce using rule 54 (integer -> INTEGER .)
    TIMES           reduce using rule 54 (integer -> INTEGER .)
    DIVISION        reduce using rule 54 (integer -> INTEGER .)
    DIV             reduce using rule 54 (integer -> INTEGER .)
    MOD             reduce using rule 54 (integer -> INTEGER .)
    THEN            reduce using rule 54 (integer -> INTEGER .)
    DO              reduce using rule 54 (integer -> INTEGER .)
    COMMA           reduce using rule 54 (integer -> INTEGER .)
    RPAREN          reduce using rule 54 (integer -> INTEGER .)
    SEMICOLON       reduce using rule 54 (integer -> INTEGER .)
    TO              reduce using rule 54 (integer -> INTEGER .)
    DOWNTO          reduce using rule 54 (integer -> INTEGER .)
    ELSE            reduce using rule 54 (integer -> INTEGER .)
    RBRACKET        reduce using rule 54 (integer -> INTEGER .)


state 45

    (55) real -> REAL .

    ASSIGNMENT      reduce using rule 55 (real -> REAL .)
    RANGE           reduce using rule 55 (real -> REAL .)
    EQ              reduce using rule 55 (real -> REAL .)
    NEQ             reduce using rule 55 (real -> REAL .)
    LT              reduce using rule 55 (real -> REAL .)
    GT              reduce using rule 55 (real -> REAL .)
    LTE             reduce using rule 55 (real -> REAL .)
    GTE             reduce using rule 55 (real -> REAL .)
    AND             reduce using rule 55 (real -> REAL .)
    OR              reduce using rule 55 (real -> REAL .)
    NOT             reduce using rule 55 (real -> REAL .)
    PLUS            reduce using rule 55 (real -> REAL .)
    MINUS           reduce using rule 55 (real -> REAL .)
    TIMES           reduce using rule 55 (real -> REAL .)
    DIVISION        reduce using rule 55 (real -> REAL .)
    DIV             reduce using rule 55 (real -> REAL .)
    MOD             reduce using rule 55 (real -> REAL .)
    THEN            reduce using rule 55 (real -> REAL .)
    DO              reduce using rule 55 (real -> REAL .)
    COMMA           reduce using rule 55 (real -> REAL .)
    RPAREN          reduce using rule 55 (real -> REAL .)
    SEMICOLON       reduce using rule 55 (real -> REAL .)
    TO              reduce using rule 55 (real -> REAL .)
    DOWNTO          reduce using rule 55 (real -> REAL .)
    ELSE            reduce using rule 55 (real -> REAL .)
    RBRACKET        reduce using rule 55 (real -> REAL .)


state 46

    (56) string -> STRING .

    ASSIGNMENT      reduce using rule 56 (string -> STRING .)
    RANGE           reduce using rule 56 (string -> STRING .)
    EQ              reduce using rule 56 (string -> STRING .)
    NEQ             reduce using rule 56 (string -> STRING .)
    LT              reduce using rule 56 (string -> STRING .)
    GT              reduce using rule 56 (string -> STRING .)
    LTE             reduce using rule 56 (string -> STRING .)
    GTE             reduce using rule 56 (string -> STRING .)
    AND             reduce using rule 56 (string -> STRING .)
    OR              reduce using rule 56 (string -> STRING .)
    NOT             reduce using rule 56 (string -> STRING .)
    PLUS            reduce using rule 56 (string -> STRING .)
    MINUS           reduce using rule 56 (string -> STRING .)
    TIMES           reduce using rule 56 (string -> STRING .)
    DIVISION        reduce using rule 56 (string -> STRING .)
    DIV             reduce using rule 56 (string -> STRING .)
    MOD             reduce using rule 56 (string -> STRING .)
    THEN            reduce using rule 56 (string -> STRING .)
    DO              reduce using rule 56 (string -> STRING .)
    COMMA           reduce using rule 56 (string -> STRING .)
    RPAREN          reduce using rule 56 (string -> STRING .)
    SEMICOLON       reduce using rule 56 (string -> STRING .)
    TO              reduce using rule 56 (string -> STRING .)
    DOWNTO          reduce using rule 56 (string -> STRING .)
    ELSE            reduce using rule 56 (string -> STRING .)
    RBRACKET        reduce using rule 56 (string -> STRING .)


state 47

    (57) char -> CHAR .

    ASSIGNMENT      reduce using rule 57 (char -> CHAR .)
    RANGE           reduce using rule 57 (char -> CHAR .)
    EQ              reduce using rule 57 (char -> CHAR .)
    NEQ             reduce using rule 57 (char -> CHAR .)
    LT              reduce using rule 57 (char -> CHAR .)
    GT              reduce using rule 57 (char -> CHAR .)
    LTE             reduce using rule 57 (char -> CHAR .)
    GTE             reduce using rule 57 (char -> CHAR .)
    AND             reduce using rule 57 (char -> CHAR .)
    OR              reduce using rule 57 (char -> CHAR .)
    NOT             reduce using rule 57 (char -> CHAR .)
    PLUS            reduce using rule 57 (char -> CHAR .)
    MINUS           reduce using rule 57 (char -> CHAR .)
    TIMES           reduce using rule 57 (char -> CHAR .)
    DIVISION        reduce using rule 57 (char -> CHAR .)
    DIV             reduce using rule 57 (char -> CHAR .)
    MOD             reduce using rule 57 (char -> CHAR .)
    THEN            reduce using rule 57 (char -> CHAR .)
    DO              reduce using rule 57 (char -> CHAR .)
    COMMA           reduce using rule 57 (char -> CHAR .)
    RPAREN          reduce using rule 57 (char -> CHAR .)
    SEMICOLON       reduce using rule 57 (char -> CHAR .)
    TO              reduce using rule 57 (char -> CHAR .)
    DOWNTO          reduce using rule 57 (char -> CHAR .)
    ELSE            reduce using rule 57 (char -> CHAR .)
    RBRACKET        reduce using rule 57 (char -> CHAR .)


state 48

    (58) boolean -> BOOLEAN .

    ASSIGNMENT      reduce using rule 58 (boolean -> BOOLEAN .)
    RANGE           reduce using rule 58 (boolean -> BOOLEAN .)
    EQ              reduce using rule 58 (boolean -> BOOLEAN .)
    NEQ             reduce using rule 58 (boolean -> BOOLEAN .)
    LT              reduce using rule 58 (boolean -> BOOLEAN .)
    GT              reduce using rule 58 (boolean -> BOOLEAN .)
    LTE             reduce using rule 58 (boolean -> BOOLEAN .)
    GTE             reduce using rule 58 (boolean -> BOOLEAN .)
    AND             reduce using rule 58 (boolean -> BOOLEAN .)
    OR              reduce using rule 58 (boolean -> BOOLEAN .)
    NOT             reduce using rule 58 (boolean -> BOOLEAN .)
    PLUS            reduce using rule 58 (boolean -> BOOLEAN .)
    MINUS           reduce using rule 58 (boolean -> BOOLEAN .)
    TIMES           reduce using rule 58 (boolean -> BOOLEAN .)
    DIVISION        reduce using rule 58 (boolean -> BOOLEAN .)
    DIV             reduce using rule 58 (boolean -> BOOLEAN .)
    MOD             reduce using rule 58 (boolean -> BOOLEAN .)
    THEN            reduce using rule 58 (boolean -> BOOLEAN .)
    DO              reduce using rule 58 (boolean -> BOOLEAN .)
    COMMA           reduce using rule 58 (boolean -> BOOLEAN .)
    RPAREN          reduce using rule 58 (boolean -> BOOLEAN .)
    SEMICOLON       reduce using rule 58 (boolean -> BOOLEAN .)
    TO              reduce using rule 58 (boolean -> BOOLEAN .)
    DOWNTO          reduce using rule 58 (boolean -> BOOLEAN .)
    ELSE            reduce using rule 58 (boolean -> BOOLEAN .)
    RBRACKET        reduce using rule 58 (boolean -> BOOLEAN .)


state 49

    (95) func_call -> prepare_func_call . LPAREN arg_list RPAREN

    LPAREN          shift and go to state 72


state 50

    (85) function -> func_header SEMICOLON . VAR func_variable_declaration func_body SEMICOLON
    (86) function -> func_header SEMICOLON . func_body SEMICOLON
    (94) func_body -> . BEGIN statements END

    VAR             shift and go to state 73
    BEGIN           shift and go to state 75

    func_body                      shift and go to state 74

state 51

    (100) procedure -> PROCEDURE IDENTIFIER . SEMICOLON procedure_body SEMICOLON

    SEMICOLON       shift and go to state 76


state 52

    (87) func_header -> FUNCTION IDENTIFIER . LPAREN func_args RPAREN COLON type_name
    (88) func_header -> FUNCTION IDENTIFIER . LPAREN RPAREN COLON type_name

    LPAREN          shift and go to state 77


state 53

    (2) header -> PROGRAM IDENTIFIER SEMICOLON .

    VAR             reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)
    BEGIN           reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)
    PROCEDURE       reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)


state 54

    (3) block -> VAR variable_declaration body .

    DOT             reduce using rule 3 (block -> VAR variable_declaration body .)


state 55

    (7) variable_declaration -> identifier_list COLON . type_name SEMICOLON variable_declaration
    (8) variable_declaration -> identifier_list COLON . type_name SEMICOLON
    (40) type_name -> . NINTEGER
    (41) type_name -> . NREAL
    (42) type_name -> . NSTRING
    (43) type_name -> . NCHAR
    (44) type_name -> . NBOOLEAN
    (45) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 79
    NREAL           shift and go to state 80
    NSTRING         shift and go to state 81
    NCHAR           shift and go to state 82
    NBOOLEAN        shift and go to state 83
    ARRAY           shift and go to state 85

    type_name                      shift and go to state 78
    array_type                     shift and go to state 84

state 56

    (9) identifier_list -> IDENTIFIER COMMA . identifier_list
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    identifier_list                shift and go to state 86

state 57

    (13) body -> BEGIN statements END .

    DOT             reduce using rule 13 (body -> BEGIN statements END .)


state 58

    (14) statements -> statement SEMICOLON . statements
    (15) statements -> statement SEMICOLON .
    (14) statements -> . statement SEMICOLON statements
    (15) statements -> . statement SEMICOLON
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . readln
    (122) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (23) assignment -> . type ASSIGNMENT type
    (24) assignment -> . type ASSIGNMENT expression
    (25) assignment -> . type ASSIGNMENT length
    (102) procedure_call -> . IDENTIFIER
    (103) cond_if -> . IF condition THEN statement
    (104) cond_if -> . IF condition THEN statement ELSE statement
    (105) cond_if -> . IF condition THEN if_body
    (106) cond_if -> . IF condition THEN if_body ELSE if_body
    (119) while_loop -> . WHILE condition DO statement
    (120) while_loop -> . WHILE condition DO if_body
    (115) for_loop -> . FOR assignment to type DO statement
    (116) for_loop -> . FOR assignment to type DO if_body
    (117) for_loop -> . FOR assignment downto type DO statement
    (118) for_loop -> . FOR assignment downto type DO if_body
    (121) readln -> . READLN LPAREN type RPAREN
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    END             reduce using rule 15 (statements -> statement SEMICOLON .)
    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 31
    IF              shift and go to state 32
    WHILE           shift and go to state 33
    FOR             shift and go to state 34
    READLN          shift and go to state 35
    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48

    statement                      shift and go to state 21
    statements                     shift and go to state 87
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28
    type                           shift and go to state 30
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 59

    (122) writeln -> WRITELN LPAREN . writeln_args RPAREN
    (123) writeln_args -> . type COMMA writeln_args
    (124) writeln_args -> . type
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48
    IDENTIFIER      shift and go to state 68

    writeln_args                   shift and go to state 88
    type                           shift and go to state 89
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 60

    (23) assignment -> type ASSIGNMENT . type
    (24) assignment -> type ASSIGNMENT . expression
    (25) assignment -> type ASSIGNMENT . length
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (26) expression -> . type operation type
    (27) expression -> . expression_paren
    (28) expression -> . expression operation type
    (29) expression -> . expression operation expression
    (30) expression -> . func_call
    (31) expression -> . condition
    (84) length -> . LENGTH LPAREN type RPAREN
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (32) expression_paren -> . LPAREN expression RPAREN
    (107) condition -> . expression comparator expression
    (108) condition -> . type comparator expression
    (109) condition -> . type comparator type
    (110) condition -> . expression comparator type
    (111) condition -> . type
    (96) prepare_func_call -> . IDENTIFIER

    LENGTH          shift and go to state 95
    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48
    IDENTIFIER      shift and go to state 68
    LPAREN          shift and go to state 67

    type                           shift and go to state 90
    expression                     shift and go to state 91
    length                         shift and go to state 92
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 93
    array_access                   shift and go to state 43
    expression_paren               shift and go to state 65
    condition                      shift and go to state 94
    prepare_func_call              shift and go to state 49

state 61

    (12) array_access -> IDENTIFIER LBRACKET . type RBRACKET
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48
    IDENTIFIER      shift and go to state 68

    type                           shift and go to state 96
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 62

    (103) cond_if -> IF condition . THEN statement
    (104) cond_if -> IF condition . THEN statement ELSE statement
    (105) cond_if -> IF condition . THEN if_body
    (106) cond_if -> IF condition . THEN if_body ELSE if_body
    (31) expression -> condition .

    THEN            shift and go to state 97
    RANGE           reduce using rule 31 (expression -> condition .)
    EQ              reduce using rule 31 (expression -> condition .)
    NEQ             reduce using rule 31 (expression -> condition .)
    LT              reduce using rule 31 (expression -> condition .)
    GT              reduce using rule 31 (expression -> condition .)
    LTE             reduce using rule 31 (expression -> condition .)
    GTE             reduce using rule 31 (expression -> condition .)
    AND             reduce using rule 31 (expression -> condition .)
    OR              reduce using rule 31 (expression -> condition .)
    NOT             reduce using rule 31 (expression -> condition .)
    PLUS            reduce using rule 31 (expression -> condition .)
    MINUS           reduce using rule 31 (expression -> condition .)
    TIMES           reduce using rule 31 (expression -> condition .)
    DIVISION        reduce using rule 31 (expression -> condition .)
    DIV             reduce using rule 31 (expression -> condition .)
    MOD             reduce using rule 31 (expression -> condition .)


state 63

    (107) condition -> expression . comparator expression
    (110) condition -> expression . comparator type
    (28) expression -> expression . operation type
    (29) expression -> expression . operation expression
    (66) comparator -> . eq
    (67) comparator -> . neq
    (68) comparator -> . lt
    (69) comparator -> . gt
    (70) comparator -> . lte
    (71) comparator -> . gte
    (72) comparator -> . and
    (73) comparator -> . or
    (74) comparator -> . not
    (33) operation -> . plus
    (34) operation -> . minus
    (35) operation -> . times
    (36) operation -> . division
    (37) operation -> . div
    (38) operation -> . mod
    (39) operation -> . RANGE
    (75) eq -> . EQ
    (76) neq -> . NEQ
    (77) lt -> . LT
    (78) gt -> . GT
    (79) lte -> . LTE
    (80) gte -> . GTE
    (81) and -> . AND
    (82) or -> . OR
    (83) not -> . NOT
    (60) plus -> . PLUS
    (61) minus -> . MINUS
    (62) times -> . TIMES
    (63) division -> . DIVISION
    (64) div -> . DIV
    (65) mod -> . MOD

    RANGE           shift and go to state 115
    EQ              shift and go to state 116
    NEQ             shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LTE             shift and go to state 120
    GTE             shift and go to state 121
    AND             shift and go to state 122
    OR              shift and go to state 123
    NOT             shift and go to state 124
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    TIMES           shift and go to state 127
    DIVISION        shift and go to state 128
    DIV             shift and go to state 129
    MOD             shift and go to state 130

    comparator                     shift and go to state 98
    operation                      shift and go to state 99
    eq                             shift and go to state 100
    neq                            shift and go to state 101
    lt                             shift and go to state 102
    gt                             shift and go to state 103
    lte                            shift and go to state 104
    gte                            shift and go to state 105
    and                            shift and go to state 106
    or                             shift and go to state 107
    not                            shift and go to state 108
    plus                           shift and go to state 109
    minus                          shift and go to state 110
    times                          shift and go to state 111
    division                       shift and go to state 112
    div                            shift and go to state 113
    mod                            shift and go to state 114

state 64

    (108) condition -> type . comparator expression
    (109) condition -> type . comparator type
    (111) condition -> type .
    (26) expression -> type . operation type
    (66) comparator -> . eq
    (67) comparator -> . neq
    (68) comparator -> . lt
    (69) comparator -> . gt
    (70) comparator -> . lte
    (71) comparator -> . gte
    (72) comparator -> . and
    (73) comparator -> . or
    (74) comparator -> . not
    (33) operation -> . plus
    (34) operation -> . minus
    (35) operation -> . times
    (36) operation -> . division
    (37) operation -> . div
    (38) operation -> . mod
    (39) operation -> . RANGE
    (75) eq -> . EQ
    (76) neq -> . NEQ
    (77) lt -> . LT
    (78) gt -> . GT
    (79) lte -> . LTE
    (80) gte -> . GTE
    (81) and -> . AND
    (82) or -> . OR
    (83) not -> . NOT
    (60) plus -> . PLUS
    (61) minus -> . MINUS
    (62) times -> . TIMES
    (63) division -> . DIVISION
    (64) div -> . DIV
    (65) mod -> . MOD

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    THEN            reduce using rule 111 (condition -> type .)
    DO              reduce using rule 111 (condition -> type .)
    RANGE           shift and go to state 115
    EQ              shift and go to state 116
    NEQ             shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LTE             shift and go to state 120
    GTE             shift and go to state 121
    AND             shift and go to state 122
    OR              shift and go to state 123
    NOT             shift and go to state 124
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    TIMES           shift and go to state 127
    DIVISION        shift and go to state 128
    DIV             shift and go to state 129
    MOD             shift and go to state 130

  ! RANGE           [ reduce using rule 111 (condition -> type .) ]
  ! EQ              [ reduce using rule 111 (condition -> type .) ]
  ! NEQ             [ reduce using rule 111 (condition -> type .) ]
  ! LT              [ reduce using rule 111 (condition -> type .) ]
  ! GT              [ reduce using rule 111 (condition -> type .) ]
  ! LTE             [ reduce using rule 111 (condition -> type .) ]
  ! GTE             [ reduce using rule 111 (condition -> type .) ]
  ! AND             [ reduce using rule 111 (condition -> type .) ]
  ! OR              [ reduce using rule 111 (condition -> type .) ]
  ! NOT             [ reduce using rule 111 (condition -> type .) ]
  ! PLUS            [ reduce using rule 111 (condition -> type .) ]
  ! MINUS           [ reduce using rule 111 (condition -> type .) ]
  ! TIMES           [ reduce using rule 111 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 111 (condition -> type .) ]
  ! DIV             [ reduce using rule 111 (condition -> type .) ]
  ! MOD             [ reduce using rule 111 (condition -> type .) ]

    comparator                     shift and go to state 131
    operation                      shift and go to state 132
    eq                             shift and go to state 100
    neq                            shift and go to state 101
    lt                             shift and go to state 102
    gt                             shift and go to state 103
    lte                            shift and go to state 104
    gte                            shift and go to state 105
    and                            shift and go to state 106
    or                             shift and go to state 107
    not                            shift and go to state 108
    plus                           shift and go to state 109
    minus                          shift and go to state 110
    times                          shift and go to state 111
    division                       shift and go to state 112
    div                            shift and go to state 113
    mod                            shift and go to state 114

state 65

    (27) expression -> expression_paren .

    RANGE           reduce using rule 27 (expression -> expression_paren .)
    EQ              reduce using rule 27 (expression -> expression_paren .)
    NEQ             reduce using rule 27 (expression -> expression_paren .)
    LT              reduce using rule 27 (expression -> expression_paren .)
    GT              reduce using rule 27 (expression -> expression_paren .)
    LTE             reduce using rule 27 (expression -> expression_paren .)
    GTE             reduce using rule 27 (expression -> expression_paren .)
    AND             reduce using rule 27 (expression -> expression_paren .)
    OR              reduce using rule 27 (expression -> expression_paren .)
    NOT             reduce using rule 27 (expression -> expression_paren .)
    PLUS            reduce using rule 27 (expression -> expression_paren .)
    MINUS           reduce using rule 27 (expression -> expression_paren .)
    TIMES           reduce using rule 27 (expression -> expression_paren .)
    DIVISION        reduce using rule 27 (expression -> expression_paren .)
    DIV             reduce using rule 27 (expression -> expression_paren .)
    MOD             reduce using rule 27 (expression -> expression_paren .)
    SEMICOLON       reduce using rule 27 (expression -> expression_paren .)
    TO              reduce using rule 27 (expression -> expression_paren .)
    DOWNTO          reduce using rule 27 (expression -> expression_paren .)
    ELSE            reduce using rule 27 (expression -> expression_paren .)
    RPAREN          reduce using rule 27 (expression -> expression_paren .)
    THEN            reduce using rule 27 (expression -> expression_paren .)
    DO              reduce using rule 27 (expression -> expression_paren .)


state 66

    (30) expression -> func_call .
    (52) type -> func_call .

  ! reduce/reduce conflict for RANGE resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for EQ resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for NEQ resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for LTE resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for GTE resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for AND resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for OR resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for NOT resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for DIVISION resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for DIV resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for MOD resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for THEN resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for DO resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for TO resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 30 (expression -> func_call .)
    RANGE           reduce using rule 30 (expression -> func_call .)
    EQ              reduce using rule 30 (expression -> func_call .)
    NEQ             reduce using rule 30 (expression -> func_call .)
    LT              reduce using rule 30 (expression -> func_call .)
    GT              reduce using rule 30 (expression -> func_call .)
    LTE             reduce using rule 30 (expression -> func_call .)
    GTE             reduce using rule 30 (expression -> func_call .)
    AND             reduce using rule 30 (expression -> func_call .)
    OR              reduce using rule 30 (expression -> func_call .)
    NOT             reduce using rule 30 (expression -> func_call .)
    PLUS            reduce using rule 30 (expression -> func_call .)
    MINUS           reduce using rule 30 (expression -> func_call .)
    TIMES           reduce using rule 30 (expression -> func_call .)
    DIVISION        reduce using rule 30 (expression -> func_call .)
    DIV             reduce using rule 30 (expression -> func_call .)
    MOD             reduce using rule 30 (expression -> func_call .)
    RPAREN          reduce using rule 30 (expression -> func_call .)
    THEN            reduce using rule 30 (expression -> func_call .)
    DO              reduce using rule 30 (expression -> func_call .)
    SEMICOLON       reduce using rule 30 (expression -> func_call .)
    TO              reduce using rule 30 (expression -> func_call .)
    DOWNTO          reduce using rule 30 (expression -> func_call .)
    ELSE            reduce using rule 30 (expression -> func_call .)

  ! RANGE           [ reduce using rule 52 (type -> func_call .) ]
  ! EQ              [ reduce using rule 52 (type -> func_call .) ]
  ! NEQ             [ reduce using rule 52 (type -> func_call .) ]
  ! LT              [ reduce using rule 52 (type -> func_call .) ]
  ! GT              [ reduce using rule 52 (type -> func_call .) ]
  ! LTE             [ reduce using rule 52 (type -> func_call .) ]
  ! GTE             [ reduce using rule 52 (type -> func_call .) ]
  ! AND             [ reduce using rule 52 (type -> func_call .) ]
  ! OR              [ reduce using rule 52 (type -> func_call .) ]
  ! NOT             [ reduce using rule 52 (type -> func_call .) ]
  ! PLUS            [ reduce using rule 52 (type -> func_call .) ]
  ! MINUS           [ reduce using rule 52 (type -> func_call .) ]
  ! TIMES           [ reduce using rule 52 (type -> func_call .) ]
  ! DIVISION        [ reduce using rule 52 (type -> func_call .) ]
  ! DIV             [ reduce using rule 52 (type -> func_call .) ]
  ! MOD             [ reduce using rule 52 (type -> func_call .) ]
  ! THEN            [ reduce using rule 52 (type -> func_call .) ]
  ! DO              [ reduce using rule 52 (type -> func_call .) ]
  ! RPAREN          [ reduce using rule 52 (type -> func_call .) ]
  ! SEMICOLON       [ reduce using rule 52 (type -> func_call .) ]
  ! TO              [ reduce using rule 52 (type -> func_call .) ]
  ! DOWNTO          [ reduce using rule 52 (type -> func_call .) ]
  ! ELSE            [ reduce using rule 52 (type -> func_call .) ]


state 67

    (32) expression_paren -> LPAREN . expression RPAREN
    (26) expression -> . type operation type
    (27) expression -> . expression_paren
    (28) expression -> . expression operation type
    (29) expression -> . expression operation expression
    (30) expression -> . func_call
    (31) expression -> . condition
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (32) expression_paren -> . LPAREN expression RPAREN
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (107) condition -> . expression comparator expression
    (108) condition -> . type comparator expression
    (109) condition -> . type comparator type
    (110) condition -> . expression comparator type
    (111) condition -> . type
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    LPAREN          shift and go to state 67
    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48
    IDENTIFIER      shift and go to state 68

    expression                     shift and go to state 133
    type                           shift and go to state 134
    expression_paren               shift and go to state 65
    func_call                      shift and go to state 66
    condition                      shift and go to state 94
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 68

    (59) identifier -> IDENTIFIER .
    (12) array_access -> IDENTIFIER . LBRACKET type RBRACKET
    (96) prepare_func_call -> IDENTIFIER .

    RANGE           reduce using rule 59 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 59 (identifier -> IDENTIFIER .)
    NEQ             reduce using rule 59 (identifier -> IDENTIFIER .)
    LT              reduce using rule 59 (identifier -> IDENTIFIER .)
    GT              reduce using rule 59 (identifier -> IDENTIFIER .)
    LTE             reduce using rule 59 (identifier -> IDENTIFIER .)
    GTE             reduce using rule 59 (identifier -> IDENTIFIER .)
    AND             reduce using rule 59 (identifier -> IDENTIFIER .)
    OR              reduce using rule 59 (identifier -> IDENTIFIER .)
    NOT             reduce using rule 59 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 59 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 59 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 59 (identifier -> IDENTIFIER .)
    DIVISION        reduce using rule 59 (identifier -> IDENTIFIER .)
    DIV             reduce using rule 59 (identifier -> IDENTIFIER .)
    MOD             reduce using rule 59 (identifier -> IDENTIFIER .)
    THEN            reduce using rule 59 (identifier -> IDENTIFIER .)
    DO              reduce using rule 59 (identifier -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 59 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 59 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 59 (identifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 59 (identifier -> IDENTIFIER .)
    TO              reduce using rule 59 (identifier -> IDENTIFIER .)
    DOWNTO          reduce using rule 59 (identifier -> IDENTIFIER .)
    ELSE            reduce using rule 59 (identifier -> IDENTIFIER .)
    RBRACKET        reduce using rule 59 (identifier -> IDENTIFIER .)
    LBRACKET        shift and go to state 61
    LPAREN          reduce using rule 96 (prepare_func_call -> IDENTIFIER .)


state 69

    (119) while_loop -> WHILE condition . DO statement
    (120) while_loop -> WHILE condition . DO if_body
    (31) expression -> condition .

    DO              shift and go to state 135
    RANGE           reduce using rule 31 (expression -> condition .)
    EQ              reduce using rule 31 (expression -> condition .)
    NEQ             reduce using rule 31 (expression -> condition .)
    LT              reduce using rule 31 (expression -> condition .)
    GT              reduce using rule 31 (expression -> condition .)
    LTE             reduce using rule 31 (expression -> condition .)
    GTE             reduce using rule 31 (expression -> condition .)
    AND             reduce using rule 31 (expression -> condition .)
    OR              reduce using rule 31 (expression -> condition .)
    NOT             reduce using rule 31 (expression -> condition .)
    PLUS            reduce using rule 31 (expression -> condition .)
    MINUS           reduce using rule 31 (expression -> condition .)
    TIMES           reduce using rule 31 (expression -> condition .)
    DIVISION        reduce using rule 31 (expression -> condition .)
    DIV             reduce using rule 31 (expression -> condition .)
    MOD             reduce using rule 31 (expression -> condition .)


state 70

    (115) for_loop -> FOR assignment . to type DO statement
    (116) for_loop -> FOR assignment . to type DO if_body
    (117) for_loop -> FOR assignment . downto type DO statement
    (118) for_loop -> FOR assignment . downto type DO if_body
    (113) to -> . TO
    (114) downto -> . DOWNTO

    TO              shift and go to state 138
    DOWNTO          shift and go to state 139

    to                             shift and go to state 136
    downto                         shift and go to state 137

state 71

    (121) readln -> READLN LPAREN . type RPAREN
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48
    IDENTIFIER      shift and go to state 68

    type                           shift and go to state 140
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 72

    (95) func_call -> prepare_func_call LPAREN . arg_list RPAREN
    (97) arg_list -> . IDENTIFIER COMMA arg_list
    (98) arg_list -> . IDENTIFIER
    (99) arg_list -> .

    IDENTIFIER      shift and go to state 142
    RPAREN          reduce using rule 99 (arg_list -> .)

    arg_list                       shift and go to state 141

state 73

    (85) function -> func_header SEMICOLON VAR . func_variable_declaration func_body SEMICOLON
    (92) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON func_variable_declaration
    (93) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    func_variable_declaration      shift and go to state 143
    identifier_list                shift and go to state 144

state 74

    (86) function -> func_header SEMICOLON func_body . SEMICOLON

    SEMICOLON       shift and go to state 145


state 75

    (94) func_body -> BEGIN . statements END
    (14) statements -> . statement SEMICOLON statements
    (15) statements -> . statement SEMICOLON
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . readln
    (122) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (23) assignment -> . type ASSIGNMENT type
    (24) assignment -> . type ASSIGNMENT expression
    (25) assignment -> . type ASSIGNMENT length
    (102) procedure_call -> . IDENTIFIER
    (103) cond_if -> . IF condition THEN statement
    (104) cond_if -> . IF condition THEN statement ELSE statement
    (105) cond_if -> . IF condition THEN if_body
    (106) cond_if -> . IF condition THEN if_body ELSE if_body
    (119) while_loop -> . WHILE condition DO statement
    (120) while_loop -> . WHILE condition DO if_body
    (115) for_loop -> . FOR assignment to type DO statement
    (116) for_loop -> . FOR assignment to type DO if_body
    (117) for_loop -> . FOR assignment downto type DO statement
    (118) for_loop -> . FOR assignment downto type DO if_body
    (121) readln -> . READLN LPAREN type RPAREN
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 31
    IF              shift and go to state 32
    WHILE           shift and go to state 33
    FOR             shift and go to state 34
    READLN          shift and go to state 35
    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48

    statements                     shift and go to state 146
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28
    type                           shift and go to state 30
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 76

    (100) procedure -> PROCEDURE IDENTIFIER SEMICOLON . procedure_body SEMICOLON
    (101) procedure_body -> . BEGIN statements END

    BEGIN           shift and go to state 148

    procedure_body                 shift and go to state 147

state 77

    (87) func_header -> FUNCTION IDENTIFIER LPAREN . func_args RPAREN COLON type_name
    (88) func_header -> FUNCTION IDENTIFIER LPAREN . RPAREN COLON type_name
    (89) func_args -> . func_arglist SEMICOLON func_args
    (90) func_args -> . func_arglist
    (91) func_arglist -> . identifier_list COLON type_name
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    RPAREN          shift and go to state 150
    IDENTIFIER      shift and go to state 17

    func_args                      shift and go to state 149
    func_arglist                   shift and go to state 151
    identifier_list                shift and go to state 152

state 78

    (7) variable_declaration -> identifier_list COLON type_name . SEMICOLON variable_declaration
    (8) variable_declaration -> identifier_list COLON type_name . SEMICOLON

    SEMICOLON       shift and go to state 153


state 79

    (40) type_name -> NINTEGER .

    SEMICOLON       reduce using rule 40 (type_name -> NINTEGER .)
    RPAREN          reduce using rule 40 (type_name -> NINTEGER .)


state 80

    (41) type_name -> NREAL .

    SEMICOLON       reduce using rule 41 (type_name -> NREAL .)
    RPAREN          reduce using rule 41 (type_name -> NREAL .)


state 81

    (42) type_name -> NSTRING .

    SEMICOLON       reduce using rule 42 (type_name -> NSTRING .)
    RPAREN          reduce using rule 42 (type_name -> NSTRING .)


state 82

    (43) type_name -> NCHAR .

    SEMICOLON       reduce using rule 43 (type_name -> NCHAR .)
    RPAREN          reduce using rule 43 (type_name -> NCHAR .)


state 83

    (44) type_name -> NBOOLEAN .

    SEMICOLON       reduce using rule 44 (type_name -> NBOOLEAN .)
    RPAREN          reduce using rule 44 (type_name -> NBOOLEAN .)


state 84

    (45) type_name -> array_type .

    SEMICOLON       reduce using rule 45 (type_name -> array_type .)
    RPAREN          reduce using rule 45 (type_name -> array_type .)


state 85

    (11) array_type -> ARRAY . LBRACKET type RANGE type RBRACKET OF type_name

    LBRACKET        shift and go to state 154


state 86

    (9) identifier_list -> IDENTIFIER COMMA identifier_list .

    COLON           reduce using rule 9 (identifier_list -> IDENTIFIER COMMA identifier_list .)


state 87

    (14) statements -> statement SEMICOLON statements .

    END             reduce using rule 14 (statements -> statement SEMICOLON statements .)


state 88

    (122) writeln -> WRITELN LPAREN writeln_args . RPAREN

    RPAREN          shift and go to state 155


state 89

    (123) writeln_args -> type . COMMA writeln_args
    (124) writeln_args -> type .

    COMMA           shift and go to state 156
    RPAREN          reduce using rule 124 (writeln_args -> type .)


state 90

    (23) assignment -> type ASSIGNMENT type .
    (26) expression -> type . operation type
    (108) condition -> type . comparator expression
    (109) condition -> type . comparator type
    (111) condition -> type .
    (33) operation -> . plus
    (34) operation -> . minus
    (35) operation -> . times
    (36) operation -> . division
    (37) operation -> . div
    (38) operation -> . mod
    (39) operation -> . RANGE
    (66) comparator -> . eq
    (67) comparator -> . neq
    (68) comparator -> . lt
    (69) comparator -> . gt
    (70) comparator -> . lte
    (71) comparator -> . gte
    (72) comparator -> . and
    (73) comparator -> . or
    (74) comparator -> . not
    (60) plus -> . PLUS
    (61) minus -> . MINUS
    (62) times -> . TIMES
    (63) division -> . DIVISION
    (64) div -> . DIV
    (65) mod -> . MOD
    (75) eq -> . EQ
    (76) neq -> . NEQ
    (77) lt -> . LT
    (78) gt -> . GT
    (79) lte -> . LTE
    (80) gte -> . GTE
    (81) and -> . AND
    (82) or -> . OR
    (83) not -> . NOT

  ! reduce/reduce conflict for SEMICOLON resolved using rule 23 (assignment -> type ASSIGNMENT type .)
  ! reduce/reduce conflict for TO resolved using rule 23 (assignment -> type ASSIGNMENT type .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 23 (assignment -> type ASSIGNMENT type .)
  ! reduce/reduce conflict for ELSE resolved using rule 23 (assignment -> type ASSIGNMENT type .)
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    SEMICOLON       reduce using rule 23 (assignment -> type ASSIGNMENT type .)
    TO              reduce using rule 23 (assignment -> type ASSIGNMENT type .)
    DOWNTO          reduce using rule 23 (assignment -> type ASSIGNMENT type .)
    ELSE            reduce using rule 23 (assignment -> type ASSIGNMENT type .)
    RANGE           shift and go to state 115
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    TIMES           shift and go to state 127
    DIVISION        shift and go to state 128
    DIV             shift and go to state 129
    MOD             shift and go to state 130
    EQ              shift and go to state 116
    NEQ             shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LTE             shift and go to state 120
    GTE             shift and go to state 121
    AND             shift and go to state 122
    OR              shift and go to state 123
    NOT             shift and go to state 124

  ! RANGE           [ reduce using rule 111 (condition -> type .) ]
  ! PLUS            [ reduce using rule 111 (condition -> type .) ]
  ! MINUS           [ reduce using rule 111 (condition -> type .) ]
  ! TIMES           [ reduce using rule 111 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 111 (condition -> type .) ]
  ! DIV             [ reduce using rule 111 (condition -> type .) ]
  ! MOD             [ reduce using rule 111 (condition -> type .) ]
  ! EQ              [ reduce using rule 111 (condition -> type .) ]
  ! NEQ             [ reduce using rule 111 (condition -> type .) ]
  ! LT              [ reduce using rule 111 (condition -> type .) ]
  ! GT              [ reduce using rule 111 (condition -> type .) ]
  ! LTE             [ reduce using rule 111 (condition -> type .) ]
  ! GTE             [ reduce using rule 111 (condition -> type .) ]
  ! AND             [ reduce using rule 111 (condition -> type .) ]
  ! OR              [ reduce using rule 111 (condition -> type .) ]
  ! NOT             [ reduce using rule 111 (condition -> type .) ]
  ! SEMICOLON       [ reduce using rule 111 (condition -> type .) ]
  ! TO              [ reduce using rule 111 (condition -> type .) ]
  ! DOWNTO          [ reduce using rule 111 (condition -> type .) ]
  ! ELSE            [ reduce using rule 111 (condition -> type .) ]

    operation                      shift and go to state 132
    comparator                     shift and go to state 131
    plus                           shift and go to state 109
    minus                          shift and go to state 110
    times                          shift and go to state 111
    division                       shift and go to state 112
    div                            shift and go to state 113
    mod                            shift and go to state 114
    eq                             shift and go to state 100
    neq                            shift and go to state 101
    lt                             shift and go to state 102
    gt                             shift and go to state 103
    lte                            shift and go to state 104
    gte                            shift and go to state 105
    and                            shift and go to state 106
    or                             shift and go to state 107
    not                            shift and go to state 108

state 91

    (24) assignment -> type ASSIGNMENT expression .
    (28) expression -> expression . operation type
    (29) expression -> expression . operation expression
    (107) condition -> expression . comparator expression
    (110) condition -> expression . comparator type
    (33) operation -> . plus
    (34) operation -> . minus
    (35) operation -> . times
    (36) operation -> . division
    (37) operation -> . div
    (38) operation -> . mod
    (39) operation -> . RANGE
    (66) comparator -> . eq
    (67) comparator -> . neq
    (68) comparator -> . lt
    (69) comparator -> . gt
    (70) comparator -> . lte
    (71) comparator -> . gte
    (72) comparator -> . and
    (73) comparator -> . or
    (74) comparator -> . not
    (60) plus -> . PLUS
    (61) minus -> . MINUS
    (62) times -> . TIMES
    (63) division -> . DIVISION
    (64) div -> . DIV
    (65) mod -> . MOD
    (75) eq -> . EQ
    (76) neq -> . NEQ
    (77) lt -> . LT
    (78) gt -> . GT
    (79) lte -> . LTE
    (80) gte -> . GTE
    (81) and -> . AND
    (82) or -> . OR
    (83) not -> . NOT

    SEMICOLON       reduce using rule 24 (assignment -> type ASSIGNMENT expression .)
    TO              reduce using rule 24 (assignment -> type ASSIGNMENT expression .)
    DOWNTO          reduce using rule 24 (assignment -> type ASSIGNMENT expression .)
    ELSE            reduce using rule 24 (assignment -> type ASSIGNMENT expression .)
    RANGE           shift and go to state 115
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    TIMES           shift and go to state 127
    DIVISION        shift and go to state 128
    DIV             shift and go to state 129
    MOD             shift and go to state 130
    EQ              shift and go to state 116
    NEQ             shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LTE             shift and go to state 120
    GTE             shift and go to state 121
    AND             shift and go to state 122
    OR              shift and go to state 123
    NOT             shift and go to state 124

    operation                      shift and go to state 99
    comparator                     shift and go to state 98
    plus                           shift and go to state 109
    minus                          shift and go to state 110
    times                          shift and go to state 111
    division                       shift and go to state 112
    div                            shift and go to state 113
    mod                            shift and go to state 114
    eq                             shift and go to state 100
    neq                            shift and go to state 101
    lt                             shift and go to state 102
    gt                             shift and go to state 103
    lte                            shift and go to state 104
    gte                            shift and go to state 105
    and                            shift and go to state 106
    or                             shift and go to state 107
    not                            shift and go to state 108

state 92

    (25) assignment -> type ASSIGNMENT length .

    SEMICOLON       reduce using rule 25 (assignment -> type ASSIGNMENT length .)
    TO              reduce using rule 25 (assignment -> type ASSIGNMENT length .)
    DOWNTO          reduce using rule 25 (assignment -> type ASSIGNMENT length .)
    ELSE            reduce using rule 25 (assignment -> type ASSIGNMENT length .)


state 93

    (52) type -> func_call .
    (30) expression -> func_call .

  ! reduce/reduce conflict for RANGE resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for DIVISION resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for DIV resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for MOD resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for EQ resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for NEQ resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for LTE resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for GTE resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for AND resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for OR resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for NOT resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for TO resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for THEN resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for DO resolved using rule 30 (expression -> func_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 30 (expression -> func_call .)
    RANGE           reduce using rule 30 (expression -> func_call .)
    PLUS            reduce using rule 30 (expression -> func_call .)
    MINUS           reduce using rule 30 (expression -> func_call .)
    TIMES           reduce using rule 30 (expression -> func_call .)
    DIVISION        reduce using rule 30 (expression -> func_call .)
    DIV             reduce using rule 30 (expression -> func_call .)
    MOD             reduce using rule 30 (expression -> func_call .)
    EQ              reduce using rule 30 (expression -> func_call .)
    NEQ             reduce using rule 30 (expression -> func_call .)
    LT              reduce using rule 30 (expression -> func_call .)
    GT              reduce using rule 30 (expression -> func_call .)
    LTE             reduce using rule 30 (expression -> func_call .)
    GTE             reduce using rule 30 (expression -> func_call .)
    AND             reduce using rule 30 (expression -> func_call .)
    OR              reduce using rule 30 (expression -> func_call .)
    NOT             reduce using rule 30 (expression -> func_call .)
    SEMICOLON       reduce using rule 30 (expression -> func_call .)
    TO              reduce using rule 30 (expression -> func_call .)
    DOWNTO          reduce using rule 30 (expression -> func_call .)
    ELSE            reduce using rule 30 (expression -> func_call .)
    THEN            reduce using rule 30 (expression -> func_call .)
    DO              reduce using rule 30 (expression -> func_call .)
    RPAREN          reduce using rule 30 (expression -> func_call .)

  ! RANGE           [ reduce using rule 52 (type -> func_call .) ]
  ! PLUS            [ reduce using rule 52 (type -> func_call .) ]
  ! MINUS           [ reduce using rule 52 (type -> func_call .) ]
  ! TIMES           [ reduce using rule 52 (type -> func_call .) ]
  ! DIVISION        [ reduce using rule 52 (type -> func_call .) ]
  ! DIV             [ reduce using rule 52 (type -> func_call .) ]
  ! MOD             [ reduce using rule 52 (type -> func_call .) ]
  ! EQ              [ reduce using rule 52 (type -> func_call .) ]
  ! NEQ             [ reduce using rule 52 (type -> func_call .) ]
  ! LT              [ reduce using rule 52 (type -> func_call .) ]
  ! GT              [ reduce using rule 52 (type -> func_call .) ]
  ! LTE             [ reduce using rule 52 (type -> func_call .) ]
  ! GTE             [ reduce using rule 52 (type -> func_call .) ]
  ! AND             [ reduce using rule 52 (type -> func_call .) ]
  ! OR              [ reduce using rule 52 (type -> func_call .) ]
  ! NOT             [ reduce using rule 52 (type -> func_call .) ]
  ! SEMICOLON       [ reduce using rule 52 (type -> func_call .) ]
  ! TO              [ reduce using rule 52 (type -> func_call .) ]
  ! DOWNTO          [ reduce using rule 52 (type -> func_call .) ]
  ! ELSE            [ reduce using rule 52 (type -> func_call .) ]
  ! RPAREN          [ reduce using rule 52 (type -> func_call .) ]
  ! THEN            [ reduce using rule 52 (type -> func_call .) ]
  ! DO              [ reduce using rule 52 (type -> func_call .) ]


state 94

    (31) expression -> condition .

    RANGE           reduce using rule 31 (expression -> condition .)
    PLUS            reduce using rule 31 (expression -> condition .)
    MINUS           reduce using rule 31 (expression -> condition .)
    TIMES           reduce using rule 31 (expression -> condition .)
    DIVISION        reduce using rule 31 (expression -> condition .)
    DIV             reduce using rule 31 (expression -> condition .)
    MOD             reduce using rule 31 (expression -> condition .)
    EQ              reduce using rule 31 (expression -> condition .)
    NEQ             reduce using rule 31 (expression -> condition .)
    LT              reduce using rule 31 (expression -> condition .)
    GT              reduce using rule 31 (expression -> condition .)
    LTE             reduce using rule 31 (expression -> condition .)
    GTE             reduce using rule 31 (expression -> condition .)
    AND             reduce using rule 31 (expression -> condition .)
    OR              reduce using rule 31 (expression -> condition .)
    NOT             reduce using rule 31 (expression -> condition .)
    SEMICOLON       reduce using rule 31 (expression -> condition .)
    TO              reduce using rule 31 (expression -> condition .)
    DOWNTO          reduce using rule 31 (expression -> condition .)
    ELSE            reduce using rule 31 (expression -> condition .)
    RPAREN          reduce using rule 31 (expression -> condition .)
    THEN            reduce using rule 31 (expression -> condition .)
    DO              reduce using rule 31 (expression -> condition .)


state 95

    (84) length -> LENGTH . LPAREN type RPAREN

    LPAREN          shift and go to state 157


state 96

    (12) array_access -> IDENTIFIER LBRACKET type . RBRACKET

    RBRACKET        shift and go to state 158


state 97

    (103) cond_if -> IF condition THEN . statement
    (104) cond_if -> IF condition THEN . statement ELSE statement
    (105) cond_if -> IF condition THEN . if_body
    (106) cond_if -> IF condition THEN . if_body ELSE if_body
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . readln
    (112) if_body -> . BEGIN statements END
    (122) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (23) assignment -> . type ASSIGNMENT type
    (24) assignment -> . type ASSIGNMENT expression
    (25) assignment -> . type ASSIGNMENT length
    (102) procedure_call -> . IDENTIFIER
    (103) cond_if -> . IF condition THEN statement
    (104) cond_if -> . IF condition THEN statement ELSE statement
    (105) cond_if -> . IF condition THEN if_body
    (106) cond_if -> . IF condition THEN if_body ELSE if_body
    (119) while_loop -> . WHILE condition DO statement
    (120) while_loop -> . WHILE condition DO if_body
    (115) for_loop -> . FOR assignment to type DO statement
    (116) for_loop -> . FOR assignment to type DO if_body
    (117) for_loop -> . FOR assignment downto type DO statement
    (118) for_loop -> . FOR assignment downto type DO if_body
    (121) readln -> . READLN LPAREN type RPAREN
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    BEGIN           shift and go to state 161
    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 31
    IF              shift and go to state 32
    WHILE           shift and go to state 33
    FOR             shift and go to state 34
    READLN          shift and go to state 35
    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48

    statement                      shift and go to state 159
    if_body                        shift and go to state 160
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28
    type                           shift and go to state 30
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 98

    (107) condition -> expression comparator . expression
    (110) condition -> expression comparator . type
    (26) expression -> . type operation type
    (27) expression -> . expression_paren
    (28) expression -> . expression operation type
    (29) expression -> . expression operation expression
    (30) expression -> . func_call
    (31) expression -> . condition
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (32) expression_paren -> . LPAREN expression RPAREN
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (107) condition -> . expression comparator expression
    (108) condition -> . type comparator expression
    (109) condition -> . type comparator type
    (110) condition -> . expression comparator type
    (111) condition -> . type
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    LPAREN          shift and go to state 67
    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48
    IDENTIFIER      shift and go to state 68

    expression                     shift and go to state 162
    type                           shift and go to state 163
    expression_paren               shift and go to state 65
    func_call                      shift and go to state 66
    condition                      shift and go to state 94
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 99

    (28) expression -> expression operation . type
    (29) expression -> expression operation . expression
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (26) expression -> . type operation type
    (27) expression -> . expression_paren
    (28) expression -> . expression operation type
    (29) expression -> . expression operation expression
    (30) expression -> . func_call
    (31) expression -> . condition
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (32) expression_paren -> . LPAREN expression RPAREN
    (107) condition -> . expression comparator expression
    (108) condition -> . type comparator expression
    (109) condition -> . type comparator type
    (110) condition -> . expression comparator type
    (111) condition -> . type
    (96) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48
    IDENTIFIER      shift and go to state 68
    LPAREN          shift and go to state 67

    expression                     shift and go to state 164
    type                           shift and go to state 165
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 93
    array_access                   shift and go to state 43
    expression_paren               shift and go to state 65
    condition                      shift and go to state 94
    prepare_func_call              shift and go to state 49

state 100

    (66) comparator -> eq .

    LPAREN          reduce using rule 66 (comparator -> eq .)
    INTEGER         reduce using rule 66 (comparator -> eq .)
    REAL            reduce using rule 66 (comparator -> eq .)
    STRING          reduce using rule 66 (comparator -> eq .)
    CHAR            reduce using rule 66 (comparator -> eq .)
    BOOLEAN         reduce using rule 66 (comparator -> eq .)
    IDENTIFIER      reduce using rule 66 (comparator -> eq .)


state 101

    (67) comparator -> neq .

    LPAREN          reduce using rule 67 (comparator -> neq .)
    INTEGER         reduce using rule 67 (comparator -> neq .)
    REAL            reduce using rule 67 (comparator -> neq .)
    STRING          reduce using rule 67 (comparator -> neq .)
    CHAR            reduce using rule 67 (comparator -> neq .)
    BOOLEAN         reduce using rule 67 (comparator -> neq .)
    IDENTIFIER      reduce using rule 67 (comparator -> neq .)


state 102

    (68) comparator -> lt .

    LPAREN          reduce using rule 68 (comparator -> lt .)
    INTEGER         reduce using rule 68 (comparator -> lt .)
    REAL            reduce using rule 68 (comparator -> lt .)
    STRING          reduce using rule 68 (comparator -> lt .)
    CHAR            reduce using rule 68 (comparator -> lt .)
    BOOLEAN         reduce using rule 68 (comparator -> lt .)
    IDENTIFIER      reduce using rule 68 (comparator -> lt .)


state 103

    (69) comparator -> gt .

    LPAREN          reduce using rule 69 (comparator -> gt .)
    INTEGER         reduce using rule 69 (comparator -> gt .)
    REAL            reduce using rule 69 (comparator -> gt .)
    STRING          reduce using rule 69 (comparator -> gt .)
    CHAR            reduce using rule 69 (comparator -> gt .)
    BOOLEAN         reduce using rule 69 (comparator -> gt .)
    IDENTIFIER      reduce using rule 69 (comparator -> gt .)


state 104

    (70) comparator -> lte .

    LPAREN          reduce using rule 70 (comparator -> lte .)
    INTEGER         reduce using rule 70 (comparator -> lte .)
    REAL            reduce using rule 70 (comparator -> lte .)
    STRING          reduce using rule 70 (comparator -> lte .)
    CHAR            reduce using rule 70 (comparator -> lte .)
    BOOLEAN         reduce using rule 70 (comparator -> lte .)
    IDENTIFIER      reduce using rule 70 (comparator -> lte .)


state 105

    (71) comparator -> gte .

    LPAREN          reduce using rule 71 (comparator -> gte .)
    INTEGER         reduce using rule 71 (comparator -> gte .)
    REAL            reduce using rule 71 (comparator -> gte .)
    STRING          reduce using rule 71 (comparator -> gte .)
    CHAR            reduce using rule 71 (comparator -> gte .)
    BOOLEAN         reduce using rule 71 (comparator -> gte .)
    IDENTIFIER      reduce using rule 71 (comparator -> gte .)


state 106

    (72) comparator -> and .

    LPAREN          reduce using rule 72 (comparator -> and .)
    INTEGER         reduce using rule 72 (comparator -> and .)
    REAL            reduce using rule 72 (comparator -> and .)
    STRING          reduce using rule 72 (comparator -> and .)
    CHAR            reduce using rule 72 (comparator -> and .)
    BOOLEAN         reduce using rule 72 (comparator -> and .)
    IDENTIFIER      reduce using rule 72 (comparator -> and .)


state 107

    (73) comparator -> or .

    LPAREN          reduce using rule 73 (comparator -> or .)
    INTEGER         reduce using rule 73 (comparator -> or .)
    REAL            reduce using rule 73 (comparator -> or .)
    STRING          reduce using rule 73 (comparator -> or .)
    CHAR            reduce using rule 73 (comparator -> or .)
    BOOLEAN         reduce using rule 73 (comparator -> or .)
    IDENTIFIER      reduce using rule 73 (comparator -> or .)


state 108

    (74) comparator -> not .

    LPAREN          reduce using rule 74 (comparator -> not .)
    INTEGER         reduce using rule 74 (comparator -> not .)
    REAL            reduce using rule 74 (comparator -> not .)
    STRING          reduce using rule 74 (comparator -> not .)
    CHAR            reduce using rule 74 (comparator -> not .)
    BOOLEAN         reduce using rule 74 (comparator -> not .)
    IDENTIFIER      reduce using rule 74 (comparator -> not .)


state 109

    (33) operation -> plus .

    INTEGER         reduce using rule 33 (operation -> plus .)
    REAL            reduce using rule 33 (operation -> plus .)
    STRING          reduce using rule 33 (operation -> plus .)
    CHAR            reduce using rule 33 (operation -> plus .)
    BOOLEAN         reduce using rule 33 (operation -> plus .)
    IDENTIFIER      reduce using rule 33 (operation -> plus .)
    LPAREN          reduce using rule 33 (operation -> plus .)


state 110

    (34) operation -> minus .

    INTEGER         reduce using rule 34 (operation -> minus .)
    REAL            reduce using rule 34 (operation -> minus .)
    STRING          reduce using rule 34 (operation -> minus .)
    CHAR            reduce using rule 34 (operation -> minus .)
    BOOLEAN         reduce using rule 34 (operation -> minus .)
    IDENTIFIER      reduce using rule 34 (operation -> minus .)
    LPAREN          reduce using rule 34 (operation -> minus .)


state 111

    (35) operation -> times .

    INTEGER         reduce using rule 35 (operation -> times .)
    REAL            reduce using rule 35 (operation -> times .)
    STRING          reduce using rule 35 (operation -> times .)
    CHAR            reduce using rule 35 (operation -> times .)
    BOOLEAN         reduce using rule 35 (operation -> times .)
    IDENTIFIER      reduce using rule 35 (operation -> times .)
    LPAREN          reduce using rule 35 (operation -> times .)


state 112

    (36) operation -> division .

    INTEGER         reduce using rule 36 (operation -> division .)
    REAL            reduce using rule 36 (operation -> division .)
    STRING          reduce using rule 36 (operation -> division .)
    CHAR            reduce using rule 36 (operation -> division .)
    BOOLEAN         reduce using rule 36 (operation -> division .)
    IDENTIFIER      reduce using rule 36 (operation -> division .)
    LPAREN          reduce using rule 36 (operation -> division .)


state 113

    (37) operation -> div .

    INTEGER         reduce using rule 37 (operation -> div .)
    REAL            reduce using rule 37 (operation -> div .)
    STRING          reduce using rule 37 (operation -> div .)
    CHAR            reduce using rule 37 (operation -> div .)
    BOOLEAN         reduce using rule 37 (operation -> div .)
    IDENTIFIER      reduce using rule 37 (operation -> div .)
    LPAREN          reduce using rule 37 (operation -> div .)


state 114

    (38) operation -> mod .

    INTEGER         reduce using rule 38 (operation -> mod .)
    REAL            reduce using rule 38 (operation -> mod .)
    STRING          reduce using rule 38 (operation -> mod .)
    CHAR            reduce using rule 38 (operation -> mod .)
    BOOLEAN         reduce using rule 38 (operation -> mod .)
    IDENTIFIER      reduce using rule 38 (operation -> mod .)
    LPAREN          reduce using rule 38 (operation -> mod .)


state 115

    (39) operation -> RANGE .

    INTEGER         reduce using rule 39 (operation -> RANGE .)
    REAL            reduce using rule 39 (operation -> RANGE .)
    STRING          reduce using rule 39 (operation -> RANGE .)
    CHAR            reduce using rule 39 (operation -> RANGE .)
    BOOLEAN         reduce using rule 39 (operation -> RANGE .)
    IDENTIFIER      reduce using rule 39 (operation -> RANGE .)
    LPAREN          reduce using rule 39 (operation -> RANGE .)


state 116

    (75) eq -> EQ .

    LPAREN          reduce using rule 75 (eq -> EQ .)
    INTEGER         reduce using rule 75 (eq -> EQ .)
    REAL            reduce using rule 75 (eq -> EQ .)
    STRING          reduce using rule 75 (eq -> EQ .)
    CHAR            reduce using rule 75 (eq -> EQ .)
    BOOLEAN         reduce using rule 75 (eq -> EQ .)
    IDENTIFIER      reduce using rule 75 (eq -> EQ .)


state 117

    (76) neq -> NEQ .

    LPAREN          reduce using rule 76 (neq -> NEQ .)
    INTEGER         reduce using rule 76 (neq -> NEQ .)
    REAL            reduce using rule 76 (neq -> NEQ .)
    STRING          reduce using rule 76 (neq -> NEQ .)
    CHAR            reduce using rule 76 (neq -> NEQ .)
    BOOLEAN         reduce using rule 76 (neq -> NEQ .)
    IDENTIFIER      reduce using rule 76 (neq -> NEQ .)


state 118

    (77) lt -> LT .

    LPAREN          reduce using rule 77 (lt -> LT .)
    INTEGER         reduce using rule 77 (lt -> LT .)
    REAL            reduce using rule 77 (lt -> LT .)
    STRING          reduce using rule 77 (lt -> LT .)
    CHAR            reduce using rule 77 (lt -> LT .)
    BOOLEAN         reduce using rule 77 (lt -> LT .)
    IDENTIFIER      reduce using rule 77 (lt -> LT .)


state 119

    (78) gt -> GT .

    LPAREN          reduce using rule 78 (gt -> GT .)
    INTEGER         reduce using rule 78 (gt -> GT .)
    REAL            reduce using rule 78 (gt -> GT .)
    STRING          reduce using rule 78 (gt -> GT .)
    CHAR            reduce using rule 78 (gt -> GT .)
    BOOLEAN         reduce using rule 78 (gt -> GT .)
    IDENTIFIER      reduce using rule 78 (gt -> GT .)


state 120

    (79) lte -> LTE .

    LPAREN          reduce using rule 79 (lte -> LTE .)
    INTEGER         reduce using rule 79 (lte -> LTE .)
    REAL            reduce using rule 79 (lte -> LTE .)
    STRING          reduce using rule 79 (lte -> LTE .)
    CHAR            reduce using rule 79 (lte -> LTE .)
    BOOLEAN         reduce using rule 79 (lte -> LTE .)
    IDENTIFIER      reduce using rule 79 (lte -> LTE .)


state 121

    (80) gte -> GTE .

    LPAREN          reduce using rule 80 (gte -> GTE .)
    INTEGER         reduce using rule 80 (gte -> GTE .)
    REAL            reduce using rule 80 (gte -> GTE .)
    STRING          reduce using rule 80 (gte -> GTE .)
    CHAR            reduce using rule 80 (gte -> GTE .)
    BOOLEAN         reduce using rule 80 (gte -> GTE .)
    IDENTIFIER      reduce using rule 80 (gte -> GTE .)


state 122

    (81) and -> AND .

    LPAREN          reduce using rule 81 (and -> AND .)
    INTEGER         reduce using rule 81 (and -> AND .)
    REAL            reduce using rule 81 (and -> AND .)
    STRING          reduce using rule 81 (and -> AND .)
    CHAR            reduce using rule 81 (and -> AND .)
    BOOLEAN         reduce using rule 81 (and -> AND .)
    IDENTIFIER      reduce using rule 81 (and -> AND .)


state 123

    (82) or -> OR .

    LPAREN          reduce using rule 82 (or -> OR .)
    INTEGER         reduce using rule 82 (or -> OR .)
    REAL            reduce using rule 82 (or -> OR .)
    STRING          reduce using rule 82 (or -> OR .)
    CHAR            reduce using rule 82 (or -> OR .)
    BOOLEAN         reduce using rule 82 (or -> OR .)
    IDENTIFIER      reduce using rule 82 (or -> OR .)


state 124

    (83) not -> NOT .

    LPAREN          reduce using rule 83 (not -> NOT .)
    INTEGER         reduce using rule 83 (not -> NOT .)
    REAL            reduce using rule 83 (not -> NOT .)
    STRING          reduce using rule 83 (not -> NOT .)
    CHAR            reduce using rule 83 (not -> NOT .)
    BOOLEAN         reduce using rule 83 (not -> NOT .)
    IDENTIFIER      reduce using rule 83 (not -> NOT .)


state 125

    (60) plus -> PLUS .

    INTEGER         reduce using rule 60 (plus -> PLUS .)
    REAL            reduce using rule 60 (plus -> PLUS .)
    STRING          reduce using rule 60 (plus -> PLUS .)
    CHAR            reduce using rule 60 (plus -> PLUS .)
    BOOLEAN         reduce using rule 60 (plus -> PLUS .)
    IDENTIFIER      reduce using rule 60 (plus -> PLUS .)
    LPAREN          reduce using rule 60 (plus -> PLUS .)


state 126

    (61) minus -> MINUS .

    INTEGER         reduce using rule 61 (minus -> MINUS .)
    REAL            reduce using rule 61 (minus -> MINUS .)
    STRING          reduce using rule 61 (minus -> MINUS .)
    CHAR            reduce using rule 61 (minus -> MINUS .)
    BOOLEAN         reduce using rule 61 (minus -> MINUS .)
    IDENTIFIER      reduce using rule 61 (minus -> MINUS .)
    LPAREN          reduce using rule 61 (minus -> MINUS .)


state 127

    (62) times -> TIMES .

    INTEGER         reduce using rule 62 (times -> TIMES .)
    REAL            reduce using rule 62 (times -> TIMES .)
    STRING          reduce using rule 62 (times -> TIMES .)
    CHAR            reduce using rule 62 (times -> TIMES .)
    BOOLEAN         reduce using rule 62 (times -> TIMES .)
    IDENTIFIER      reduce using rule 62 (times -> TIMES .)
    LPAREN          reduce using rule 62 (times -> TIMES .)


state 128

    (63) division -> DIVISION .

    INTEGER         reduce using rule 63 (division -> DIVISION .)
    REAL            reduce using rule 63 (division -> DIVISION .)
    STRING          reduce using rule 63 (division -> DIVISION .)
    CHAR            reduce using rule 63 (division -> DIVISION .)
    BOOLEAN         reduce using rule 63 (division -> DIVISION .)
    IDENTIFIER      reduce using rule 63 (division -> DIVISION .)
    LPAREN          reduce using rule 63 (division -> DIVISION .)


state 129

    (64) div -> DIV .

    INTEGER         reduce using rule 64 (div -> DIV .)
    REAL            reduce using rule 64 (div -> DIV .)
    STRING          reduce using rule 64 (div -> DIV .)
    CHAR            reduce using rule 64 (div -> DIV .)
    BOOLEAN         reduce using rule 64 (div -> DIV .)
    IDENTIFIER      reduce using rule 64 (div -> DIV .)
    LPAREN          reduce using rule 64 (div -> DIV .)


state 130

    (65) mod -> MOD .

    INTEGER         reduce using rule 65 (mod -> MOD .)
    REAL            reduce using rule 65 (mod -> MOD .)
    STRING          reduce using rule 65 (mod -> MOD .)
    CHAR            reduce using rule 65 (mod -> MOD .)
    BOOLEAN         reduce using rule 65 (mod -> MOD .)
    IDENTIFIER      reduce using rule 65 (mod -> MOD .)
    LPAREN          reduce using rule 65 (mod -> MOD .)


state 131

    (108) condition -> type comparator . expression
    (109) condition -> type comparator . type
    (26) expression -> . type operation type
    (27) expression -> . expression_paren
    (28) expression -> . expression operation type
    (29) expression -> . expression operation expression
    (30) expression -> . func_call
    (31) expression -> . condition
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (32) expression_paren -> . LPAREN expression RPAREN
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (107) condition -> . expression comparator expression
    (108) condition -> . type comparator expression
    (109) condition -> . type comparator type
    (110) condition -> . expression comparator type
    (111) condition -> . type
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    LPAREN          shift and go to state 67
    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48
    IDENTIFIER      shift and go to state 68

    type                           shift and go to state 166
    expression                     shift and go to state 167
    expression_paren               shift and go to state 65
    func_call                      shift and go to state 66
    condition                      shift and go to state 94
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 132

    (26) expression -> type operation . type
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48
    IDENTIFIER      shift and go to state 68

    type                           shift and go to state 168
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 133

    (32) expression_paren -> LPAREN expression . RPAREN
    (28) expression -> expression . operation type
    (29) expression -> expression . operation expression
    (107) condition -> expression . comparator expression
    (110) condition -> expression . comparator type
    (33) operation -> . plus
    (34) operation -> . minus
    (35) operation -> . times
    (36) operation -> . division
    (37) operation -> . div
    (38) operation -> . mod
    (39) operation -> . RANGE
    (66) comparator -> . eq
    (67) comparator -> . neq
    (68) comparator -> . lt
    (69) comparator -> . gt
    (70) comparator -> . lte
    (71) comparator -> . gte
    (72) comparator -> . and
    (73) comparator -> . or
    (74) comparator -> . not
    (60) plus -> . PLUS
    (61) minus -> . MINUS
    (62) times -> . TIMES
    (63) division -> . DIVISION
    (64) div -> . DIV
    (65) mod -> . MOD
    (75) eq -> . EQ
    (76) neq -> . NEQ
    (77) lt -> . LT
    (78) gt -> . GT
    (79) lte -> . LTE
    (80) gte -> . GTE
    (81) and -> . AND
    (82) or -> . OR
    (83) not -> . NOT

    RPAREN          shift and go to state 169
    RANGE           shift and go to state 115
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    TIMES           shift and go to state 127
    DIVISION        shift and go to state 128
    DIV             shift and go to state 129
    MOD             shift and go to state 130
    EQ              shift and go to state 116
    NEQ             shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LTE             shift and go to state 120
    GTE             shift and go to state 121
    AND             shift and go to state 122
    OR              shift and go to state 123
    NOT             shift and go to state 124

    operation                      shift and go to state 99
    comparator                     shift and go to state 98
    plus                           shift and go to state 109
    minus                          shift and go to state 110
    times                          shift and go to state 111
    division                       shift and go to state 112
    div                            shift and go to state 113
    mod                            shift and go to state 114
    eq                             shift and go to state 100
    neq                            shift and go to state 101
    lt                             shift and go to state 102
    gt                             shift and go to state 103
    lte                            shift and go to state 104
    gte                            shift and go to state 105
    and                            shift and go to state 106
    or                             shift and go to state 107
    not                            shift and go to state 108

state 134

    (26) expression -> type . operation type
    (108) condition -> type . comparator expression
    (109) condition -> type . comparator type
    (111) condition -> type .
    (33) operation -> . plus
    (34) operation -> . minus
    (35) operation -> . times
    (36) operation -> . division
    (37) operation -> . div
    (38) operation -> . mod
    (39) operation -> . RANGE
    (66) comparator -> . eq
    (67) comparator -> . neq
    (68) comparator -> . lt
    (69) comparator -> . gt
    (70) comparator -> . lte
    (71) comparator -> . gte
    (72) comparator -> . and
    (73) comparator -> . or
    (74) comparator -> . not
    (60) plus -> . PLUS
    (61) minus -> . MINUS
    (62) times -> . TIMES
    (63) division -> . DIVISION
    (64) div -> . DIV
    (65) mod -> . MOD
    (75) eq -> . EQ
    (76) neq -> . NEQ
    (77) lt -> . LT
    (78) gt -> . GT
    (79) lte -> . LTE
    (80) gte -> . GTE
    (81) and -> . AND
    (82) or -> . OR
    (83) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    RPAREN          reduce using rule 111 (condition -> type .)
    RANGE           shift and go to state 115
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    TIMES           shift and go to state 127
    DIVISION        shift and go to state 128
    DIV             shift and go to state 129
    MOD             shift and go to state 130
    EQ              shift and go to state 116
    NEQ             shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LTE             shift and go to state 120
    GTE             shift and go to state 121
    AND             shift and go to state 122
    OR              shift and go to state 123
    NOT             shift and go to state 124

  ! RANGE           [ reduce using rule 111 (condition -> type .) ]
  ! PLUS            [ reduce using rule 111 (condition -> type .) ]
  ! MINUS           [ reduce using rule 111 (condition -> type .) ]
  ! TIMES           [ reduce using rule 111 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 111 (condition -> type .) ]
  ! DIV             [ reduce using rule 111 (condition -> type .) ]
  ! MOD             [ reduce using rule 111 (condition -> type .) ]
  ! EQ              [ reduce using rule 111 (condition -> type .) ]
  ! NEQ             [ reduce using rule 111 (condition -> type .) ]
  ! LT              [ reduce using rule 111 (condition -> type .) ]
  ! GT              [ reduce using rule 111 (condition -> type .) ]
  ! LTE             [ reduce using rule 111 (condition -> type .) ]
  ! GTE             [ reduce using rule 111 (condition -> type .) ]
  ! AND             [ reduce using rule 111 (condition -> type .) ]
  ! OR              [ reduce using rule 111 (condition -> type .) ]
  ! NOT             [ reduce using rule 111 (condition -> type .) ]

    operation                      shift and go to state 132
    comparator                     shift and go to state 131
    plus                           shift and go to state 109
    minus                          shift and go to state 110
    times                          shift and go to state 111
    division                       shift and go to state 112
    div                            shift and go to state 113
    mod                            shift and go to state 114
    eq                             shift and go to state 100
    neq                            shift and go to state 101
    lt                             shift and go to state 102
    gt                             shift and go to state 103
    lte                            shift and go to state 104
    gte                            shift and go to state 105
    and                            shift and go to state 106
    or                             shift and go to state 107
    not                            shift and go to state 108

state 135

    (119) while_loop -> WHILE condition DO . statement
    (120) while_loop -> WHILE condition DO . if_body
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . readln
    (112) if_body -> . BEGIN statements END
    (122) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (23) assignment -> . type ASSIGNMENT type
    (24) assignment -> . type ASSIGNMENT expression
    (25) assignment -> . type ASSIGNMENT length
    (102) procedure_call -> . IDENTIFIER
    (103) cond_if -> . IF condition THEN statement
    (104) cond_if -> . IF condition THEN statement ELSE statement
    (105) cond_if -> . IF condition THEN if_body
    (106) cond_if -> . IF condition THEN if_body ELSE if_body
    (119) while_loop -> . WHILE condition DO statement
    (120) while_loop -> . WHILE condition DO if_body
    (115) for_loop -> . FOR assignment to type DO statement
    (116) for_loop -> . FOR assignment to type DO if_body
    (117) for_loop -> . FOR assignment downto type DO statement
    (118) for_loop -> . FOR assignment downto type DO if_body
    (121) readln -> . READLN LPAREN type RPAREN
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    BEGIN           shift and go to state 161
    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 31
    IF              shift and go to state 32
    WHILE           shift and go to state 33
    FOR             shift and go to state 34
    READLN          shift and go to state 35
    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48

    statement                      shift and go to state 170
    if_body                        shift and go to state 171
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28
    type                           shift and go to state 30
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 136

    (115) for_loop -> FOR assignment to . type DO statement
    (116) for_loop -> FOR assignment to . type DO if_body
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48
    IDENTIFIER      shift and go to state 68

    type                           shift and go to state 172
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 137

    (117) for_loop -> FOR assignment downto . type DO statement
    (118) for_loop -> FOR assignment downto . type DO if_body
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48
    IDENTIFIER      shift and go to state 68

    type                           shift and go to state 173
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 138

    (113) to -> TO .

    INTEGER         reduce using rule 113 (to -> TO .)
    REAL            reduce using rule 113 (to -> TO .)
    STRING          reduce using rule 113 (to -> TO .)
    CHAR            reduce using rule 113 (to -> TO .)
    BOOLEAN         reduce using rule 113 (to -> TO .)
    IDENTIFIER      reduce using rule 113 (to -> TO .)


state 139

    (114) downto -> DOWNTO .

    INTEGER         reduce using rule 114 (downto -> DOWNTO .)
    REAL            reduce using rule 114 (downto -> DOWNTO .)
    STRING          reduce using rule 114 (downto -> DOWNTO .)
    CHAR            reduce using rule 114 (downto -> DOWNTO .)
    BOOLEAN         reduce using rule 114 (downto -> DOWNTO .)
    IDENTIFIER      reduce using rule 114 (downto -> DOWNTO .)


state 140

    (121) readln -> READLN LPAREN type . RPAREN

    RPAREN          shift and go to state 174


state 141

    (95) func_call -> prepare_func_call LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 175


state 142

    (97) arg_list -> IDENTIFIER . COMMA arg_list
    (98) arg_list -> IDENTIFIER .

    COMMA           shift and go to state 176
    RPAREN          reduce using rule 98 (arg_list -> IDENTIFIER .)


state 143

    (85) function -> func_header SEMICOLON VAR func_variable_declaration . func_body SEMICOLON
    (94) func_body -> . BEGIN statements END

    BEGIN           shift and go to state 75

    func_body                      shift and go to state 177

state 144

    (92) func_variable_declaration -> identifier_list . COLON type_name SEMICOLON func_variable_declaration
    (93) func_variable_declaration -> identifier_list . COLON type_name SEMICOLON

    COLON           shift and go to state 178


state 145

    (86) function -> func_header SEMICOLON func_body SEMICOLON .

    VAR             reduce using rule 86 (function -> func_header SEMICOLON func_body SEMICOLON .)
    BEGIN           reduce using rule 86 (function -> func_header SEMICOLON func_body SEMICOLON .)
    PROCEDURE       reduce using rule 86 (function -> func_header SEMICOLON func_body SEMICOLON .)
    FUNCTION        reduce using rule 86 (function -> func_header SEMICOLON func_body SEMICOLON .)


state 146

    (94) func_body -> BEGIN statements . END

    END             shift and go to state 179


state 147

    (100) procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body . SEMICOLON

    SEMICOLON       shift and go to state 180


state 148

    (101) procedure_body -> BEGIN . statements END
    (14) statements -> . statement SEMICOLON statements
    (15) statements -> . statement SEMICOLON
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . readln
    (122) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (23) assignment -> . type ASSIGNMENT type
    (24) assignment -> . type ASSIGNMENT expression
    (25) assignment -> . type ASSIGNMENT length
    (102) procedure_call -> . IDENTIFIER
    (103) cond_if -> . IF condition THEN statement
    (104) cond_if -> . IF condition THEN statement ELSE statement
    (105) cond_if -> . IF condition THEN if_body
    (106) cond_if -> . IF condition THEN if_body ELSE if_body
    (119) while_loop -> . WHILE condition DO statement
    (120) while_loop -> . WHILE condition DO if_body
    (115) for_loop -> . FOR assignment to type DO statement
    (116) for_loop -> . FOR assignment to type DO if_body
    (117) for_loop -> . FOR assignment downto type DO statement
    (118) for_loop -> . FOR assignment downto type DO if_body
    (121) readln -> . READLN LPAREN type RPAREN
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 31
    IF              shift and go to state 32
    WHILE           shift and go to state 33
    FOR             shift and go to state 34
    READLN          shift and go to state 35
    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48

    statements                     shift and go to state 181
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28
    type                           shift and go to state 30
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 149

    (87) func_header -> FUNCTION IDENTIFIER LPAREN func_args . RPAREN COLON type_name

    RPAREN          shift and go to state 182


state 150

    (88) func_header -> FUNCTION IDENTIFIER LPAREN RPAREN . COLON type_name

    COLON           shift and go to state 183


state 151

    (89) func_args -> func_arglist . SEMICOLON func_args
    (90) func_args -> func_arglist .

    SEMICOLON       shift and go to state 184
    RPAREN          reduce using rule 90 (func_args -> func_arglist .)


state 152

    (91) func_arglist -> identifier_list . COLON type_name

    COLON           shift and go to state 185


state 153

    (7) variable_declaration -> identifier_list COLON type_name SEMICOLON . variable_declaration
    (8) variable_declaration -> identifier_list COLON type_name SEMICOLON .
    (7) variable_declaration -> . identifier_list COLON type_name SEMICOLON variable_declaration
    (8) variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    BEGIN           reduce using rule 8 (variable_declaration -> identifier_list COLON type_name SEMICOLON .)
    IDENTIFIER      shift and go to state 17

    identifier_list                shift and go to state 16
    variable_declaration           shift and go to state 186

state 154

    (11) array_type -> ARRAY LBRACKET . type RANGE type RBRACKET OF type_name
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48
    IDENTIFIER      shift and go to state 68

    type                           shift and go to state 187
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 155

    (122) writeln -> WRITELN LPAREN writeln_args RPAREN .

    SEMICOLON       reduce using rule 122 (writeln -> WRITELN LPAREN writeln_args RPAREN .)
    ELSE            reduce using rule 122 (writeln -> WRITELN LPAREN writeln_args RPAREN .)


state 156

    (123) writeln_args -> type COMMA . writeln_args
    (123) writeln_args -> . type COMMA writeln_args
    (124) writeln_args -> . type
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48
    IDENTIFIER      shift and go to state 68

    type                           shift and go to state 89
    writeln_args                   shift and go to state 188
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 157

    (84) length -> LENGTH LPAREN . type RPAREN
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48
    IDENTIFIER      shift and go to state 68

    type                           shift and go to state 189
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 158

    (12) array_access -> IDENTIFIER LBRACKET type RBRACKET .

    ASSIGNMENT      reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    RANGE           reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    EQ              reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    NEQ             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    LT              reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    GT              reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    LTE             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    GTE             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    AND             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    OR              reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    NOT             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    PLUS            reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    MINUS           reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    TIMES           reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    DIVISION        reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    DIV             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    MOD             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    THEN            reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    DO              reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    COMMA           reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    RPAREN          reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    SEMICOLON       reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    TO              reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    DOWNTO          reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    ELSE            reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    RBRACKET        reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)


state 159

    (103) cond_if -> IF condition THEN statement .
    (104) cond_if -> IF condition THEN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 103 (cond_if -> IF condition THEN statement .)
    ELSE            shift and go to state 190

  ! ELSE            [ reduce using rule 103 (cond_if -> IF condition THEN statement .) ]


state 160

    (105) cond_if -> IF condition THEN if_body .
    (106) cond_if -> IF condition THEN if_body . ELSE if_body

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 105 (cond_if -> IF condition THEN if_body .)
    ELSE            shift and go to state 191

  ! ELSE            [ reduce using rule 105 (cond_if -> IF condition THEN if_body .) ]


state 161

    (112) if_body -> BEGIN . statements END
    (14) statements -> . statement SEMICOLON statements
    (15) statements -> . statement SEMICOLON
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . readln
    (122) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (23) assignment -> . type ASSIGNMENT type
    (24) assignment -> . type ASSIGNMENT expression
    (25) assignment -> . type ASSIGNMENT length
    (102) procedure_call -> . IDENTIFIER
    (103) cond_if -> . IF condition THEN statement
    (104) cond_if -> . IF condition THEN statement ELSE statement
    (105) cond_if -> . IF condition THEN if_body
    (106) cond_if -> . IF condition THEN if_body ELSE if_body
    (119) while_loop -> . WHILE condition DO statement
    (120) while_loop -> . WHILE condition DO if_body
    (115) for_loop -> . FOR assignment to type DO statement
    (116) for_loop -> . FOR assignment to type DO if_body
    (117) for_loop -> . FOR assignment downto type DO statement
    (118) for_loop -> . FOR assignment downto type DO if_body
    (121) readln -> . READLN LPAREN type RPAREN
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 31
    IF              shift and go to state 32
    WHILE           shift and go to state 33
    FOR             shift and go to state 34
    READLN          shift and go to state 35
    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48

    statements                     shift and go to state 192
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28
    type                           shift and go to state 30
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 162

    (107) condition -> expression comparator expression .
    (28) expression -> expression . operation type
    (29) expression -> expression . operation expression
    (107) condition -> expression . comparator expression
    (110) condition -> expression . comparator type
    (33) operation -> . plus
    (34) operation -> . minus
    (35) operation -> . times
    (36) operation -> . division
    (37) operation -> . div
    (38) operation -> . mod
    (39) operation -> . RANGE
    (66) comparator -> . eq
    (67) comparator -> . neq
    (68) comparator -> . lt
    (69) comparator -> . gt
    (70) comparator -> . lte
    (71) comparator -> . gte
    (72) comparator -> . and
    (73) comparator -> . or
    (74) comparator -> . not
    (60) plus -> . PLUS
    (61) minus -> . MINUS
    (62) times -> . TIMES
    (63) division -> . DIVISION
    (64) div -> . DIV
    (65) mod -> . MOD
    (75) eq -> . EQ
    (76) neq -> . NEQ
    (77) lt -> . LT
    (78) gt -> . GT
    (79) lte -> . LTE
    (80) gte -> . GTE
    (81) and -> . AND
    (82) or -> . OR
    (83) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 107 (condition -> expression comparator expression .)
    DO              reduce using rule 107 (condition -> expression comparator expression .)
    SEMICOLON       reduce using rule 107 (condition -> expression comparator expression .)
    TO              reduce using rule 107 (condition -> expression comparator expression .)
    DOWNTO          reduce using rule 107 (condition -> expression comparator expression .)
    ELSE            reduce using rule 107 (condition -> expression comparator expression .)
    RPAREN          reduce using rule 107 (condition -> expression comparator expression .)
    RANGE           shift and go to state 115
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    TIMES           shift and go to state 127
    DIVISION        shift and go to state 128
    DIV             shift and go to state 129
    MOD             shift and go to state 130
    EQ              shift and go to state 116
    NEQ             shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LTE             shift and go to state 120
    GTE             shift and go to state 121
    AND             shift and go to state 122
    OR              shift and go to state 123
    NOT             shift and go to state 124

  ! RANGE           [ reduce using rule 107 (condition -> expression comparator expression .) ]
  ! EQ              [ reduce using rule 107 (condition -> expression comparator expression .) ]
  ! NEQ             [ reduce using rule 107 (condition -> expression comparator expression .) ]
  ! LT              [ reduce using rule 107 (condition -> expression comparator expression .) ]
  ! GT              [ reduce using rule 107 (condition -> expression comparator expression .) ]
  ! LTE             [ reduce using rule 107 (condition -> expression comparator expression .) ]
  ! GTE             [ reduce using rule 107 (condition -> expression comparator expression .) ]
  ! AND             [ reduce using rule 107 (condition -> expression comparator expression .) ]
  ! OR              [ reduce using rule 107 (condition -> expression comparator expression .) ]
  ! NOT             [ reduce using rule 107 (condition -> expression comparator expression .) ]
  ! PLUS            [ reduce using rule 107 (condition -> expression comparator expression .) ]
  ! MINUS           [ reduce using rule 107 (condition -> expression comparator expression .) ]
  ! TIMES           [ reduce using rule 107 (condition -> expression comparator expression .) ]
  ! DIVISION        [ reduce using rule 107 (condition -> expression comparator expression .) ]
  ! DIV             [ reduce using rule 107 (condition -> expression comparator expression .) ]
  ! MOD             [ reduce using rule 107 (condition -> expression comparator expression .) ]

    comparator                     shift and go to state 98
    operation                      shift and go to state 99
    plus                           shift and go to state 109
    minus                          shift and go to state 110
    times                          shift and go to state 111
    division                       shift and go to state 112
    div                            shift and go to state 113
    mod                            shift and go to state 114
    eq                             shift and go to state 100
    neq                            shift and go to state 101
    lt                             shift and go to state 102
    gt                             shift and go to state 103
    lte                            shift and go to state 104
    gte                            shift and go to state 105
    and                            shift and go to state 106
    or                             shift and go to state 107
    not                            shift and go to state 108

state 163

    (110) condition -> expression comparator type .
    (26) expression -> type . operation type
    (108) condition -> type . comparator expression
    (109) condition -> type . comparator type
    (111) condition -> type .
    (33) operation -> . plus
    (34) operation -> . minus
    (35) operation -> . times
    (36) operation -> . division
    (37) operation -> . div
    (38) operation -> . mod
    (39) operation -> . RANGE
    (66) comparator -> . eq
    (67) comparator -> . neq
    (68) comparator -> . lt
    (69) comparator -> . gt
    (70) comparator -> . lte
    (71) comparator -> . gte
    (72) comparator -> . and
    (73) comparator -> . or
    (74) comparator -> . not
    (60) plus -> . PLUS
    (61) minus -> . MINUS
    (62) times -> . TIMES
    (63) division -> . DIVISION
    (64) div -> . DIV
    (65) mod -> . MOD
    (75) eq -> . EQ
    (76) neq -> . NEQ
    (77) lt -> . LT
    (78) gt -> . GT
    (79) lte -> . LTE
    (80) gte -> . GTE
    (81) and -> . AND
    (82) or -> . OR
    (83) not -> . NOT

  ! reduce/reduce conflict for RANGE resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for PLUS resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for MINUS resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for TIMES resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DIVISION resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DIV resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for MOD resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for EQ resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for NEQ resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for LT resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for GT resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for LTE resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for GTE resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for AND resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for OR resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for NOT resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for THEN resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DO resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for TO resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for ELSE resolved using rule 110 (condition -> expression comparator type .)
  ! reduce/reduce conflict for RPAREN resolved using rule 110 (condition -> expression comparator type .)
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 110 (condition -> expression comparator type .)
    DO              reduce using rule 110 (condition -> expression comparator type .)
    SEMICOLON       reduce using rule 110 (condition -> expression comparator type .)
    TO              reduce using rule 110 (condition -> expression comparator type .)
    DOWNTO          reduce using rule 110 (condition -> expression comparator type .)
    ELSE            reduce using rule 110 (condition -> expression comparator type .)
    RPAREN          reduce using rule 110 (condition -> expression comparator type .)
    RANGE           shift and go to state 115
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    TIMES           shift and go to state 127
    DIVISION        shift and go to state 128
    DIV             shift and go to state 129
    MOD             shift and go to state 130
    EQ              shift and go to state 116
    NEQ             shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LTE             shift and go to state 120
    GTE             shift and go to state 121
    AND             shift and go to state 122
    OR              shift and go to state 123
    NOT             shift and go to state 124

  ! RANGE           [ reduce using rule 110 (condition -> expression comparator type .) ]
  ! EQ              [ reduce using rule 110 (condition -> expression comparator type .) ]
  ! NEQ             [ reduce using rule 110 (condition -> expression comparator type .) ]
  ! LT              [ reduce using rule 110 (condition -> expression comparator type .) ]
  ! GT              [ reduce using rule 110 (condition -> expression comparator type .) ]
  ! LTE             [ reduce using rule 110 (condition -> expression comparator type .) ]
  ! GTE             [ reduce using rule 110 (condition -> expression comparator type .) ]
  ! AND             [ reduce using rule 110 (condition -> expression comparator type .) ]
  ! OR              [ reduce using rule 110 (condition -> expression comparator type .) ]
  ! NOT             [ reduce using rule 110 (condition -> expression comparator type .) ]
  ! PLUS            [ reduce using rule 110 (condition -> expression comparator type .) ]
  ! MINUS           [ reduce using rule 110 (condition -> expression comparator type .) ]
  ! TIMES           [ reduce using rule 110 (condition -> expression comparator type .) ]
  ! DIVISION        [ reduce using rule 110 (condition -> expression comparator type .) ]
  ! DIV             [ reduce using rule 110 (condition -> expression comparator type .) ]
  ! MOD             [ reduce using rule 110 (condition -> expression comparator type .) ]
  ! RANGE           [ reduce using rule 111 (condition -> type .) ]
  ! PLUS            [ reduce using rule 111 (condition -> type .) ]
  ! MINUS           [ reduce using rule 111 (condition -> type .) ]
  ! TIMES           [ reduce using rule 111 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 111 (condition -> type .) ]
  ! DIV             [ reduce using rule 111 (condition -> type .) ]
  ! MOD             [ reduce using rule 111 (condition -> type .) ]
  ! EQ              [ reduce using rule 111 (condition -> type .) ]
  ! NEQ             [ reduce using rule 111 (condition -> type .) ]
  ! LT              [ reduce using rule 111 (condition -> type .) ]
  ! GT              [ reduce using rule 111 (condition -> type .) ]
  ! LTE             [ reduce using rule 111 (condition -> type .) ]
  ! GTE             [ reduce using rule 111 (condition -> type .) ]
  ! AND             [ reduce using rule 111 (condition -> type .) ]
  ! OR              [ reduce using rule 111 (condition -> type .) ]
  ! NOT             [ reduce using rule 111 (condition -> type .) ]
  ! THEN            [ reduce using rule 111 (condition -> type .) ]
  ! DO              [ reduce using rule 111 (condition -> type .) ]
  ! SEMICOLON       [ reduce using rule 111 (condition -> type .) ]
  ! TO              [ reduce using rule 111 (condition -> type .) ]
  ! DOWNTO          [ reduce using rule 111 (condition -> type .) ]
  ! ELSE            [ reduce using rule 111 (condition -> type .) ]
  ! RPAREN          [ reduce using rule 111 (condition -> type .) ]

    comparator                     shift and go to state 131
    operation                      shift and go to state 132
    plus                           shift and go to state 109
    minus                          shift and go to state 110
    times                          shift and go to state 111
    division                       shift and go to state 112
    div                            shift and go to state 113
    mod                            shift and go to state 114
    eq                             shift and go to state 100
    neq                            shift and go to state 101
    lt                             shift and go to state 102
    gt                             shift and go to state 103
    lte                            shift and go to state 104
    gte                            shift and go to state 105
    and                            shift and go to state 106
    or                             shift and go to state 107
    not                            shift and go to state 108

state 164

    (29) expression -> expression operation expression .
    (28) expression -> expression . operation type
    (29) expression -> expression . operation expression
    (107) condition -> expression . comparator expression
    (110) condition -> expression . comparator type
    (33) operation -> . plus
    (34) operation -> . minus
    (35) operation -> . times
    (36) operation -> . division
    (37) operation -> . div
    (38) operation -> . mod
    (39) operation -> . RANGE
    (66) comparator -> . eq
    (67) comparator -> . neq
    (68) comparator -> . lt
    (69) comparator -> . gt
    (70) comparator -> . lte
    (71) comparator -> . gte
    (72) comparator -> . and
    (73) comparator -> . or
    (74) comparator -> . not
    (60) plus -> . PLUS
    (61) minus -> . MINUS
    (62) times -> . TIMES
    (63) division -> . DIVISION
    (64) div -> . DIV
    (65) mod -> . MOD
    (75) eq -> . EQ
    (76) neq -> . NEQ
    (77) lt -> . LT
    (78) gt -> . GT
    (79) lte -> . LTE
    (80) gte -> . GTE
    (81) and -> . AND
    (82) or -> . OR
    (83) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    SEMICOLON       reduce using rule 29 (expression -> expression operation expression .)
    TO              reduce using rule 29 (expression -> expression operation expression .)
    DOWNTO          reduce using rule 29 (expression -> expression operation expression .)
    ELSE            reduce using rule 29 (expression -> expression operation expression .)
    RPAREN          reduce using rule 29 (expression -> expression operation expression .)
    THEN            reduce using rule 29 (expression -> expression operation expression .)
    DO              reduce using rule 29 (expression -> expression operation expression .)
    RANGE           shift and go to state 115
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    TIMES           shift and go to state 127
    DIVISION        shift and go to state 128
    DIV             shift and go to state 129
    MOD             shift and go to state 130
    EQ              shift and go to state 116
    NEQ             shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LTE             shift and go to state 120
    GTE             shift and go to state 121
    AND             shift and go to state 122
    OR              shift and go to state 123
    NOT             shift and go to state 124

  ! RANGE           [ reduce using rule 29 (expression -> expression operation expression .) ]
  ! EQ              [ reduce using rule 29 (expression -> expression operation expression .) ]
  ! NEQ             [ reduce using rule 29 (expression -> expression operation expression .) ]
  ! LT              [ reduce using rule 29 (expression -> expression operation expression .) ]
  ! GT              [ reduce using rule 29 (expression -> expression operation expression .) ]
  ! LTE             [ reduce using rule 29 (expression -> expression operation expression .) ]
  ! GTE             [ reduce using rule 29 (expression -> expression operation expression .) ]
  ! AND             [ reduce using rule 29 (expression -> expression operation expression .) ]
  ! OR              [ reduce using rule 29 (expression -> expression operation expression .) ]
  ! NOT             [ reduce using rule 29 (expression -> expression operation expression .) ]
  ! PLUS            [ reduce using rule 29 (expression -> expression operation expression .) ]
  ! MINUS           [ reduce using rule 29 (expression -> expression operation expression .) ]
  ! TIMES           [ reduce using rule 29 (expression -> expression operation expression .) ]
  ! DIVISION        [ reduce using rule 29 (expression -> expression operation expression .) ]
  ! DIV             [ reduce using rule 29 (expression -> expression operation expression .) ]
  ! MOD             [ reduce using rule 29 (expression -> expression operation expression .) ]

    operation                      shift and go to state 99
    comparator                     shift and go to state 98
    plus                           shift and go to state 109
    minus                          shift and go to state 110
    times                          shift and go to state 111
    division                       shift and go to state 112
    div                            shift and go to state 113
    mod                            shift and go to state 114
    eq                             shift and go to state 100
    neq                            shift and go to state 101
    lt                             shift and go to state 102
    gt                             shift and go to state 103
    lte                            shift and go to state 104
    gte                            shift and go to state 105
    and                            shift and go to state 106
    or                             shift and go to state 107
    not                            shift and go to state 108

state 165

    (28) expression -> expression operation type .
    (26) expression -> type . operation type
    (108) condition -> type . comparator expression
    (109) condition -> type . comparator type
    (111) condition -> type .
    (33) operation -> . plus
    (34) operation -> . minus
    (35) operation -> . times
    (36) operation -> . division
    (37) operation -> . div
    (38) operation -> . mod
    (39) operation -> . RANGE
    (66) comparator -> . eq
    (67) comparator -> . neq
    (68) comparator -> . lt
    (69) comparator -> . gt
    (70) comparator -> . lte
    (71) comparator -> . gte
    (72) comparator -> . and
    (73) comparator -> . or
    (74) comparator -> . not
    (60) plus -> . PLUS
    (61) minus -> . MINUS
    (62) times -> . TIMES
    (63) division -> . DIVISION
    (64) div -> . DIV
    (65) mod -> . MOD
    (75) eq -> . EQ
    (76) neq -> . NEQ
    (77) lt -> . LT
    (78) gt -> . GT
    (79) lte -> . LTE
    (80) gte -> . GTE
    (81) and -> . AND
    (82) or -> . OR
    (83) not -> . NOT

  ! reduce/reduce conflict for RANGE resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for PLUS resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for MINUS resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for TIMES resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for DIVISION resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for DIV resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for MOD resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for EQ resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for NEQ resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for LT resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for GT resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for LTE resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for GTE resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for AND resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for OR resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for NOT resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for THEN resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for DO resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for TO resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for ELSE resolved using rule 28 (expression -> expression operation type .)
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (expression -> expression operation type .)
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    SEMICOLON       reduce using rule 28 (expression -> expression operation type .)
    TO              reduce using rule 28 (expression -> expression operation type .)
    DOWNTO          reduce using rule 28 (expression -> expression operation type .)
    ELSE            reduce using rule 28 (expression -> expression operation type .)
    RPAREN          reduce using rule 28 (expression -> expression operation type .)
    THEN            reduce using rule 28 (expression -> expression operation type .)
    DO              reduce using rule 28 (expression -> expression operation type .)
    RANGE           shift and go to state 115
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    TIMES           shift and go to state 127
    DIVISION        shift and go to state 128
    DIV             shift and go to state 129
    MOD             shift and go to state 130
    EQ              shift and go to state 116
    NEQ             shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LTE             shift and go to state 120
    GTE             shift and go to state 121
    AND             shift and go to state 122
    OR              shift and go to state 123
    NOT             shift and go to state 124

  ! RANGE           [ reduce using rule 28 (expression -> expression operation type .) ]
  ! EQ              [ reduce using rule 28 (expression -> expression operation type .) ]
  ! NEQ             [ reduce using rule 28 (expression -> expression operation type .) ]
  ! LT              [ reduce using rule 28 (expression -> expression operation type .) ]
  ! GT              [ reduce using rule 28 (expression -> expression operation type .) ]
  ! LTE             [ reduce using rule 28 (expression -> expression operation type .) ]
  ! GTE             [ reduce using rule 28 (expression -> expression operation type .) ]
  ! AND             [ reduce using rule 28 (expression -> expression operation type .) ]
  ! OR              [ reduce using rule 28 (expression -> expression operation type .) ]
  ! NOT             [ reduce using rule 28 (expression -> expression operation type .) ]
  ! PLUS            [ reduce using rule 28 (expression -> expression operation type .) ]
  ! MINUS           [ reduce using rule 28 (expression -> expression operation type .) ]
  ! TIMES           [ reduce using rule 28 (expression -> expression operation type .) ]
  ! DIVISION        [ reduce using rule 28 (expression -> expression operation type .) ]
  ! DIV             [ reduce using rule 28 (expression -> expression operation type .) ]
  ! MOD             [ reduce using rule 28 (expression -> expression operation type .) ]
  ! RANGE           [ reduce using rule 111 (condition -> type .) ]
  ! PLUS            [ reduce using rule 111 (condition -> type .) ]
  ! MINUS           [ reduce using rule 111 (condition -> type .) ]
  ! TIMES           [ reduce using rule 111 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 111 (condition -> type .) ]
  ! DIV             [ reduce using rule 111 (condition -> type .) ]
  ! MOD             [ reduce using rule 111 (condition -> type .) ]
  ! EQ              [ reduce using rule 111 (condition -> type .) ]
  ! NEQ             [ reduce using rule 111 (condition -> type .) ]
  ! LT              [ reduce using rule 111 (condition -> type .) ]
  ! GT              [ reduce using rule 111 (condition -> type .) ]
  ! LTE             [ reduce using rule 111 (condition -> type .) ]
  ! GTE             [ reduce using rule 111 (condition -> type .) ]
  ! AND             [ reduce using rule 111 (condition -> type .) ]
  ! OR              [ reduce using rule 111 (condition -> type .) ]
  ! NOT             [ reduce using rule 111 (condition -> type .) ]
  ! THEN            [ reduce using rule 111 (condition -> type .) ]
  ! DO              [ reduce using rule 111 (condition -> type .) ]
  ! SEMICOLON       [ reduce using rule 111 (condition -> type .) ]
  ! TO              [ reduce using rule 111 (condition -> type .) ]
  ! DOWNTO          [ reduce using rule 111 (condition -> type .) ]
  ! ELSE            [ reduce using rule 111 (condition -> type .) ]
  ! RPAREN          [ reduce using rule 111 (condition -> type .) ]

    operation                      shift and go to state 132
    comparator                     shift and go to state 131
    plus                           shift and go to state 109
    minus                          shift and go to state 110
    times                          shift and go to state 111
    division                       shift and go to state 112
    div                            shift and go to state 113
    mod                            shift and go to state 114
    eq                             shift and go to state 100
    neq                            shift and go to state 101
    lt                             shift and go to state 102
    gt                             shift and go to state 103
    lte                            shift and go to state 104
    gte                            shift and go to state 105
    and                            shift and go to state 106
    or                             shift and go to state 107
    not                            shift and go to state 108

state 166

    (109) condition -> type comparator type .
    (26) expression -> type . operation type
    (108) condition -> type . comparator expression
    (109) condition -> type . comparator type
    (111) condition -> type .
    (33) operation -> . plus
    (34) operation -> . minus
    (35) operation -> . times
    (36) operation -> . division
    (37) operation -> . div
    (38) operation -> . mod
    (39) operation -> . RANGE
    (66) comparator -> . eq
    (67) comparator -> . neq
    (68) comparator -> . lt
    (69) comparator -> . gt
    (70) comparator -> . lte
    (71) comparator -> . gte
    (72) comparator -> . and
    (73) comparator -> . or
    (74) comparator -> . not
    (60) plus -> . PLUS
    (61) minus -> . MINUS
    (62) times -> . TIMES
    (63) division -> . DIVISION
    (64) div -> . DIV
    (65) mod -> . MOD
    (75) eq -> . EQ
    (76) neq -> . NEQ
    (77) lt -> . LT
    (78) gt -> . GT
    (79) lte -> . LTE
    (80) gte -> . GTE
    (81) and -> . AND
    (82) or -> . OR
    (83) not -> . NOT

  ! reduce/reduce conflict for RANGE resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for PLUS resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for MINUS resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for TIMES resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for DIVISION resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for DIV resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for MOD resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for EQ resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for NEQ resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for LT resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for GT resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for LTE resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for GTE resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for AND resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for OR resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for NOT resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for THEN resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for DO resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for TO resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for ELSE resolved using rule 109 (condition -> type comparator type .)
  ! reduce/reduce conflict for RPAREN resolved using rule 109 (condition -> type comparator type .)
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 109 (condition -> type comparator type .)
    DO              reduce using rule 109 (condition -> type comparator type .)
    SEMICOLON       reduce using rule 109 (condition -> type comparator type .)
    TO              reduce using rule 109 (condition -> type comparator type .)
    DOWNTO          reduce using rule 109 (condition -> type comparator type .)
    ELSE            reduce using rule 109 (condition -> type comparator type .)
    RPAREN          reduce using rule 109 (condition -> type comparator type .)
    RANGE           shift and go to state 115
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    TIMES           shift and go to state 127
    DIVISION        shift and go to state 128
    DIV             shift and go to state 129
    MOD             shift and go to state 130
    EQ              shift and go to state 116
    NEQ             shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LTE             shift and go to state 120
    GTE             shift and go to state 121
    AND             shift and go to state 122
    OR              shift and go to state 123
    NOT             shift and go to state 124

  ! RANGE           [ reduce using rule 109 (condition -> type comparator type .) ]
  ! EQ              [ reduce using rule 109 (condition -> type comparator type .) ]
  ! NEQ             [ reduce using rule 109 (condition -> type comparator type .) ]
  ! LT              [ reduce using rule 109 (condition -> type comparator type .) ]
  ! GT              [ reduce using rule 109 (condition -> type comparator type .) ]
  ! LTE             [ reduce using rule 109 (condition -> type comparator type .) ]
  ! GTE             [ reduce using rule 109 (condition -> type comparator type .) ]
  ! AND             [ reduce using rule 109 (condition -> type comparator type .) ]
  ! OR              [ reduce using rule 109 (condition -> type comparator type .) ]
  ! NOT             [ reduce using rule 109 (condition -> type comparator type .) ]
  ! PLUS            [ reduce using rule 109 (condition -> type comparator type .) ]
  ! MINUS           [ reduce using rule 109 (condition -> type comparator type .) ]
  ! TIMES           [ reduce using rule 109 (condition -> type comparator type .) ]
  ! DIVISION        [ reduce using rule 109 (condition -> type comparator type .) ]
  ! DIV             [ reduce using rule 109 (condition -> type comparator type .) ]
  ! MOD             [ reduce using rule 109 (condition -> type comparator type .) ]
  ! RANGE           [ reduce using rule 111 (condition -> type .) ]
  ! PLUS            [ reduce using rule 111 (condition -> type .) ]
  ! MINUS           [ reduce using rule 111 (condition -> type .) ]
  ! TIMES           [ reduce using rule 111 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 111 (condition -> type .) ]
  ! DIV             [ reduce using rule 111 (condition -> type .) ]
  ! MOD             [ reduce using rule 111 (condition -> type .) ]
  ! EQ              [ reduce using rule 111 (condition -> type .) ]
  ! NEQ             [ reduce using rule 111 (condition -> type .) ]
  ! LT              [ reduce using rule 111 (condition -> type .) ]
  ! GT              [ reduce using rule 111 (condition -> type .) ]
  ! LTE             [ reduce using rule 111 (condition -> type .) ]
  ! GTE             [ reduce using rule 111 (condition -> type .) ]
  ! AND             [ reduce using rule 111 (condition -> type .) ]
  ! OR              [ reduce using rule 111 (condition -> type .) ]
  ! NOT             [ reduce using rule 111 (condition -> type .) ]
  ! THEN            [ reduce using rule 111 (condition -> type .) ]
  ! DO              [ reduce using rule 111 (condition -> type .) ]
  ! SEMICOLON       [ reduce using rule 111 (condition -> type .) ]
  ! TO              [ reduce using rule 111 (condition -> type .) ]
  ! DOWNTO          [ reduce using rule 111 (condition -> type .) ]
  ! ELSE            [ reduce using rule 111 (condition -> type .) ]
  ! RPAREN          [ reduce using rule 111 (condition -> type .) ]

    comparator                     shift and go to state 131
    operation                      shift and go to state 132
    plus                           shift and go to state 109
    minus                          shift and go to state 110
    times                          shift and go to state 111
    division                       shift and go to state 112
    div                            shift and go to state 113
    mod                            shift and go to state 114
    eq                             shift and go to state 100
    neq                            shift and go to state 101
    lt                             shift and go to state 102
    gt                             shift and go to state 103
    lte                            shift and go to state 104
    gte                            shift and go to state 105
    and                            shift and go to state 106
    or                             shift and go to state 107
    not                            shift and go to state 108

state 167

    (108) condition -> type comparator expression .
    (28) expression -> expression . operation type
    (29) expression -> expression . operation expression
    (107) condition -> expression . comparator expression
    (110) condition -> expression . comparator type
    (33) operation -> . plus
    (34) operation -> . minus
    (35) operation -> . times
    (36) operation -> . division
    (37) operation -> . div
    (38) operation -> . mod
    (39) operation -> . RANGE
    (66) comparator -> . eq
    (67) comparator -> . neq
    (68) comparator -> . lt
    (69) comparator -> . gt
    (70) comparator -> . lte
    (71) comparator -> . gte
    (72) comparator -> . and
    (73) comparator -> . or
    (74) comparator -> . not
    (60) plus -> . PLUS
    (61) minus -> . MINUS
    (62) times -> . TIMES
    (63) division -> . DIVISION
    (64) div -> . DIV
    (65) mod -> . MOD
    (75) eq -> . EQ
    (76) neq -> . NEQ
    (77) lt -> . LT
    (78) gt -> . GT
    (79) lte -> . LTE
    (80) gte -> . GTE
    (81) and -> . AND
    (82) or -> . OR
    (83) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 108 (condition -> type comparator expression .)
    DO              reduce using rule 108 (condition -> type comparator expression .)
    SEMICOLON       reduce using rule 108 (condition -> type comparator expression .)
    TO              reduce using rule 108 (condition -> type comparator expression .)
    DOWNTO          reduce using rule 108 (condition -> type comparator expression .)
    ELSE            reduce using rule 108 (condition -> type comparator expression .)
    RPAREN          reduce using rule 108 (condition -> type comparator expression .)
    RANGE           shift and go to state 115
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126
    TIMES           shift and go to state 127
    DIVISION        shift and go to state 128
    DIV             shift and go to state 129
    MOD             shift and go to state 130
    EQ              shift and go to state 116
    NEQ             shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LTE             shift and go to state 120
    GTE             shift and go to state 121
    AND             shift and go to state 122
    OR              shift and go to state 123
    NOT             shift and go to state 124

  ! RANGE           [ reduce using rule 108 (condition -> type comparator expression .) ]
  ! EQ              [ reduce using rule 108 (condition -> type comparator expression .) ]
  ! NEQ             [ reduce using rule 108 (condition -> type comparator expression .) ]
  ! LT              [ reduce using rule 108 (condition -> type comparator expression .) ]
  ! GT              [ reduce using rule 108 (condition -> type comparator expression .) ]
  ! LTE             [ reduce using rule 108 (condition -> type comparator expression .) ]
  ! GTE             [ reduce using rule 108 (condition -> type comparator expression .) ]
  ! AND             [ reduce using rule 108 (condition -> type comparator expression .) ]
  ! OR              [ reduce using rule 108 (condition -> type comparator expression .) ]
  ! NOT             [ reduce using rule 108 (condition -> type comparator expression .) ]
  ! PLUS            [ reduce using rule 108 (condition -> type comparator expression .) ]
  ! MINUS           [ reduce using rule 108 (condition -> type comparator expression .) ]
  ! TIMES           [ reduce using rule 108 (condition -> type comparator expression .) ]
  ! DIVISION        [ reduce using rule 108 (condition -> type comparator expression .) ]
  ! DIV             [ reduce using rule 108 (condition -> type comparator expression .) ]
  ! MOD             [ reduce using rule 108 (condition -> type comparator expression .) ]

    comparator                     shift and go to state 98
    operation                      shift and go to state 99
    plus                           shift and go to state 109
    minus                          shift and go to state 110
    times                          shift and go to state 111
    division                       shift and go to state 112
    div                            shift and go to state 113
    mod                            shift and go to state 114
    eq                             shift and go to state 100
    neq                            shift and go to state 101
    lt                             shift and go to state 102
    gt                             shift and go to state 103
    lte                            shift and go to state 104
    gte                            shift and go to state 105
    and                            shift and go to state 106
    or                             shift and go to state 107
    not                            shift and go to state 108

state 168

    (26) expression -> type operation type .

    RANGE           reduce using rule 26 (expression -> type operation type .)
    EQ              reduce using rule 26 (expression -> type operation type .)
    NEQ             reduce using rule 26 (expression -> type operation type .)
    LT              reduce using rule 26 (expression -> type operation type .)
    GT              reduce using rule 26 (expression -> type operation type .)
    LTE             reduce using rule 26 (expression -> type operation type .)
    GTE             reduce using rule 26 (expression -> type operation type .)
    AND             reduce using rule 26 (expression -> type operation type .)
    OR              reduce using rule 26 (expression -> type operation type .)
    NOT             reduce using rule 26 (expression -> type operation type .)
    PLUS            reduce using rule 26 (expression -> type operation type .)
    MINUS           reduce using rule 26 (expression -> type operation type .)
    TIMES           reduce using rule 26 (expression -> type operation type .)
    DIVISION        reduce using rule 26 (expression -> type operation type .)
    DIV             reduce using rule 26 (expression -> type operation type .)
    MOD             reduce using rule 26 (expression -> type operation type .)
    SEMICOLON       reduce using rule 26 (expression -> type operation type .)
    TO              reduce using rule 26 (expression -> type operation type .)
    DOWNTO          reduce using rule 26 (expression -> type operation type .)
    ELSE            reduce using rule 26 (expression -> type operation type .)
    RPAREN          reduce using rule 26 (expression -> type operation type .)
    THEN            reduce using rule 26 (expression -> type operation type .)
    DO              reduce using rule 26 (expression -> type operation type .)


state 169

    (32) expression_paren -> LPAREN expression RPAREN .

    RANGE           reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    EQ              reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    LT              reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    GT              reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    LTE             reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    GTE             reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    AND             reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    OR              reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    NOT             reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    DIVISION        reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    DIV             reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    MOD             reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    TO              reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    THEN            reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)
    DO              reduce using rule 32 (expression_paren -> LPAREN expression RPAREN .)


state 170

    (119) while_loop -> WHILE condition DO statement .

    SEMICOLON       reduce using rule 119 (while_loop -> WHILE condition DO statement .)
    ELSE            reduce using rule 119 (while_loop -> WHILE condition DO statement .)


state 171

    (120) while_loop -> WHILE condition DO if_body .

    SEMICOLON       reduce using rule 120 (while_loop -> WHILE condition DO if_body .)
    ELSE            reduce using rule 120 (while_loop -> WHILE condition DO if_body .)


state 172

    (115) for_loop -> FOR assignment to type . DO statement
    (116) for_loop -> FOR assignment to type . DO if_body

    DO              shift and go to state 193


state 173

    (117) for_loop -> FOR assignment downto type . DO statement
    (118) for_loop -> FOR assignment downto type . DO if_body

    DO              shift and go to state 194


state 174

    (121) readln -> READLN LPAREN type RPAREN .

    SEMICOLON       reduce using rule 121 (readln -> READLN LPAREN type RPAREN .)
    ELSE            reduce using rule 121 (readln -> READLN LPAREN type RPAREN .)


state 175

    (95) func_call -> prepare_func_call LPAREN arg_list RPAREN .

    ASSIGNMENT      reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    RANGE           reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    EQ              reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    LT              reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    GT              reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    LTE             reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    GTE             reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    AND             reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    OR              reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    NOT             reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    DIVISION        reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    DIV             reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    MOD             reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    THEN            reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    DO              reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    SEMICOLON       reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    TO              reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    DOWNTO          reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    ELSE            reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    RBRACKET        reduce using rule 95 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)


state 176

    (97) arg_list -> IDENTIFIER COMMA . arg_list
    (97) arg_list -> . IDENTIFIER COMMA arg_list
    (98) arg_list -> . IDENTIFIER
    (99) arg_list -> .

    IDENTIFIER      shift and go to state 142
    RPAREN          reduce using rule 99 (arg_list -> .)

    arg_list                       shift and go to state 195

state 177

    (85) function -> func_header SEMICOLON VAR func_variable_declaration func_body . SEMICOLON

    SEMICOLON       shift and go to state 196


state 178

    (92) func_variable_declaration -> identifier_list COLON . type_name SEMICOLON func_variable_declaration
    (93) func_variable_declaration -> identifier_list COLON . type_name SEMICOLON
    (40) type_name -> . NINTEGER
    (41) type_name -> . NREAL
    (42) type_name -> . NSTRING
    (43) type_name -> . NCHAR
    (44) type_name -> . NBOOLEAN
    (45) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 79
    NREAL           shift and go to state 80
    NSTRING         shift and go to state 81
    NCHAR           shift and go to state 82
    NBOOLEAN        shift and go to state 83
    ARRAY           shift and go to state 85

    type_name                      shift and go to state 197
    array_type                     shift and go to state 84

state 179

    (94) func_body -> BEGIN statements END .

    SEMICOLON       reduce using rule 94 (func_body -> BEGIN statements END .)


state 180

    (100) procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .

    VAR             reduce using rule 100 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)
    BEGIN           reduce using rule 100 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)
    PROCEDURE       reduce using rule 100 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)
    FUNCTION        reduce using rule 100 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)


state 181

    (101) procedure_body -> BEGIN statements . END

    END             shift and go to state 198


state 182

    (87) func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN . COLON type_name

    COLON           shift and go to state 199


state 183

    (88) func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON . type_name
    (40) type_name -> . NINTEGER
    (41) type_name -> . NREAL
    (42) type_name -> . NSTRING
    (43) type_name -> . NCHAR
    (44) type_name -> . NBOOLEAN
    (45) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 79
    NREAL           shift and go to state 80
    NSTRING         shift and go to state 81
    NCHAR           shift and go to state 82
    NBOOLEAN        shift and go to state 83
    ARRAY           shift and go to state 85

    type_name                      shift and go to state 200
    array_type                     shift and go to state 84

state 184

    (89) func_args -> func_arglist SEMICOLON . func_args
    (89) func_args -> . func_arglist SEMICOLON func_args
    (90) func_args -> . func_arglist
    (91) func_arglist -> . identifier_list COLON type_name
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    func_arglist                   shift and go to state 151
    func_args                      shift and go to state 201
    identifier_list                shift and go to state 152

state 185

    (91) func_arglist -> identifier_list COLON . type_name
    (40) type_name -> . NINTEGER
    (41) type_name -> . NREAL
    (42) type_name -> . NSTRING
    (43) type_name -> . NCHAR
    (44) type_name -> . NBOOLEAN
    (45) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 79
    NREAL           shift and go to state 80
    NSTRING         shift and go to state 81
    NCHAR           shift and go to state 82
    NBOOLEAN        shift and go to state 83
    ARRAY           shift and go to state 85

    type_name                      shift and go to state 202
    array_type                     shift and go to state 84

state 186

    (7) variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration .

    BEGIN           reduce using rule 7 (variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration .)


state 187

    (11) array_type -> ARRAY LBRACKET type . RANGE type RBRACKET OF type_name

    RANGE           shift and go to state 203


state 188

    (123) writeln_args -> type COMMA writeln_args .

    RPAREN          reduce using rule 123 (writeln_args -> type COMMA writeln_args .)


state 189

    (84) length -> LENGTH LPAREN type . RPAREN

    RPAREN          shift and go to state 204


state 190

    (104) cond_if -> IF condition THEN statement ELSE . statement
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . readln
    (122) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (23) assignment -> . type ASSIGNMENT type
    (24) assignment -> . type ASSIGNMENT expression
    (25) assignment -> . type ASSIGNMENT length
    (102) procedure_call -> . IDENTIFIER
    (103) cond_if -> . IF condition THEN statement
    (104) cond_if -> . IF condition THEN statement ELSE statement
    (105) cond_if -> . IF condition THEN if_body
    (106) cond_if -> . IF condition THEN if_body ELSE if_body
    (119) while_loop -> . WHILE condition DO statement
    (120) while_loop -> . WHILE condition DO if_body
    (115) for_loop -> . FOR assignment to type DO statement
    (116) for_loop -> . FOR assignment to type DO if_body
    (117) for_loop -> . FOR assignment downto type DO statement
    (118) for_loop -> . FOR assignment downto type DO if_body
    (121) readln -> . READLN LPAREN type RPAREN
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 31
    IF              shift and go to state 32
    WHILE           shift and go to state 33
    FOR             shift and go to state 34
    READLN          shift and go to state 35
    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48

    statement                      shift and go to state 205
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28
    type                           shift and go to state 30
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 191

    (106) cond_if -> IF condition THEN if_body ELSE . if_body
    (112) if_body -> . BEGIN statements END

    BEGIN           shift and go to state 161

    if_body                        shift and go to state 206

state 192

    (112) if_body -> BEGIN statements . END

    END             shift and go to state 207


state 193

    (115) for_loop -> FOR assignment to type DO . statement
    (116) for_loop -> FOR assignment to type DO . if_body
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . readln
    (112) if_body -> . BEGIN statements END
    (122) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (23) assignment -> . type ASSIGNMENT type
    (24) assignment -> . type ASSIGNMENT expression
    (25) assignment -> . type ASSIGNMENT length
    (102) procedure_call -> . IDENTIFIER
    (103) cond_if -> . IF condition THEN statement
    (104) cond_if -> . IF condition THEN statement ELSE statement
    (105) cond_if -> . IF condition THEN if_body
    (106) cond_if -> . IF condition THEN if_body ELSE if_body
    (119) while_loop -> . WHILE condition DO statement
    (120) while_loop -> . WHILE condition DO if_body
    (115) for_loop -> . FOR assignment to type DO statement
    (116) for_loop -> . FOR assignment to type DO if_body
    (117) for_loop -> . FOR assignment downto type DO statement
    (118) for_loop -> . FOR assignment downto type DO if_body
    (121) readln -> . READLN LPAREN type RPAREN
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    BEGIN           shift and go to state 161
    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 31
    IF              shift and go to state 32
    WHILE           shift and go to state 33
    FOR             shift and go to state 34
    READLN          shift and go to state 35
    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48

    assignment                     shift and go to state 23
    type                           shift and go to state 30
    statement                      shift and go to state 208
    if_body                        shift and go to state 209
    writeln                        shift and go to state 22
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 194

    (117) for_loop -> FOR assignment downto type DO . statement
    (118) for_loop -> FOR assignment downto type DO . if_body
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . readln
    (112) if_body -> . BEGIN statements END
    (122) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (23) assignment -> . type ASSIGNMENT type
    (24) assignment -> . type ASSIGNMENT expression
    (25) assignment -> . type ASSIGNMENT length
    (102) procedure_call -> . IDENTIFIER
    (103) cond_if -> . IF condition THEN statement
    (104) cond_if -> . IF condition THEN statement ELSE statement
    (105) cond_if -> . IF condition THEN if_body
    (106) cond_if -> . IF condition THEN if_body ELSE if_body
    (119) while_loop -> . WHILE condition DO statement
    (120) while_loop -> . WHILE condition DO if_body
    (115) for_loop -> . FOR assignment to type DO statement
    (116) for_loop -> . FOR assignment to type DO if_body
    (117) for_loop -> . FOR assignment downto type DO statement
    (118) for_loop -> . FOR assignment downto type DO if_body
    (121) readln -> . READLN LPAREN type RPAREN
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    BEGIN           shift and go to state 161
    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 31
    IF              shift and go to state 32
    WHILE           shift and go to state 33
    FOR             shift and go to state 34
    READLN          shift and go to state 35
    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48

    assignment                     shift and go to state 23
    type                           shift and go to state 30
    statement                      shift and go to state 210
    if_body                        shift and go to state 211
    writeln                        shift and go to state 22
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 195

    (97) arg_list -> IDENTIFIER COMMA arg_list .

    RPAREN          reduce using rule 97 (arg_list -> IDENTIFIER COMMA arg_list .)


state 196

    (85) function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .

    VAR             reduce using rule 85 (function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .)
    BEGIN           reduce using rule 85 (function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .)
    PROCEDURE       reduce using rule 85 (function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .)
    FUNCTION        reduce using rule 85 (function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .)


state 197

    (92) func_variable_declaration -> identifier_list COLON type_name . SEMICOLON func_variable_declaration
    (93) func_variable_declaration -> identifier_list COLON type_name . SEMICOLON

    SEMICOLON       shift and go to state 212


state 198

    (101) procedure_body -> BEGIN statements END .

    SEMICOLON       reduce using rule 101 (procedure_body -> BEGIN statements END .)


state 199

    (87) func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON . type_name
    (40) type_name -> . NINTEGER
    (41) type_name -> . NREAL
    (42) type_name -> . NSTRING
    (43) type_name -> . NCHAR
    (44) type_name -> . NBOOLEAN
    (45) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 79
    NREAL           shift and go to state 80
    NSTRING         shift and go to state 81
    NCHAR           shift and go to state 82
    NBOOLEAN        shift and go to state 83
    ARRAY           shift and go to state 85

    type_name                      shift and go to state 213
    array_type                     shift and go to state 84

state 200

    (88) func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name .

    SEMICOLON       reduce using rule 88 (func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name .)


state 201

    (89) func_args -> func_arglist SEMICOLON func_args .

    RPAREN          reduce using rule 89 (func_args -> func_arglist SEMICOLON func_args .)


state 202

    (91) func_arglist -> identifier_list COLON type_name .

    SEMICOLON       reduce using rule 91 (func_arglist -> identifier_list COLON type_name .)
    RPAREN          reduce using rule 91 (func_arglist -> identifier_list COLON type_name .)


state 203

    (11) array_type -> ARRAY LBRACKET type RANGE . type RBRACKET OF type_name
    (46) type -> . integer
    (47) type -> . real
    (48) type -> . string
    (49) type -> . char
    (50) type -> . boolean
    (51) type -> . identifier
    (52) type -> . func_call
    (53) type -> . array_access
    (54) integer -> . INTEGER
    (55) real -> . REAL
    (56) string -> . STRING
    (57) char -> . CHAR
    (58) boolean -> . BOOLEAN
    (59) identifier -> . IDENTIFIER
    (95) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (96) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 44
    REAL            shift and go to state 45
    STRING          shift and go to state 46
    CHAR            shift and go to state 47
    BOOLEAN         shift and go to state 48
    IDENTIFIER      shift and go to state 68

    type                           shift and go to state 214
    integer                        shift and go to state 36
    real                           shift and go to state 37
    string                         shift and go to state 38
    char                           shift and go to state 39
    boolean                        shift and go to state 40
    identifier                     shift and go to state 41
    func_call                      shift and go to state 42
    array_access                   shift and go to state 43
    prepare_func_call              shift and go to state 49

state 204

    (84) length -> LENGTH LPAREN type RPAREN .

    SEMICOLON       reduce using rule 84 (length -> LENGTH LPAREN type RPAREN .)
    TO              reduce using rule 84 (length -> LENGTH LPAREN type RPAREN .)
    DOWNTO          reduce using rule 84 (length -> LENGTH LPAREN type RPAREN .)
    ELSE            reduce using rule 84 (length -> LENGTH LPAREN type RPAREN .)


state 205

    (104) cond_if -> IF condition THEN statement ELSE statement .

    SEMICOLON       reduce using rule 104 (cond_if -> IF condition THEN statement ELSE statement .)
    ELSE            reduce using rule 104 (cond_if -> IF condition THEN statement ELSE statement .)


state 206

    (106) cond_if -> IF condition THEN if_body ELSE if_body .

    SEMICOLON       reduce using rule 106 (cond_if -> IF condition THEN if_body ELSE if_body .)
    ELSE            reduce using rule 106 (cond_if -> IF condition THEN if_body ELSE if_body .)


state 207

    (112) if_body -> BEGIN statements END .

    ELSE            reduce using rule 112 (if_body -> BEGIN statements END .)
    SEMICOLON       reduce using rule 112 (if_body -> BEGIN statements END .)


state 208

    (115) for_loop -> FOR assignment to type DO statement .

    SEMICOLON       reduce using rule 115 (for_loop -> FOR assignment to type DO statement .)
    ELSE            reduce using rule 115 (for_loop -> FOR assignment to type DO statement .)


state 209

    (116) for_loop -> FOR assignment to type DO if_body .

    SEMICOLON       reduce using rule 116 (for_loop -> FOR assignment to type DO if_body .)
    ELSE            reduce using rule 116 (for_loop -> FOR assignment to type DO if_body .)


state 210

    (117) for_loop -> FOR assignment downto type DO statement .

    SEMICOLON       reduce using rule 117 (for_loop -> FOR assignment downto type DO statement .)
    ELSE            reduce using rule 117 (for_loop -> FOR assignment downto type DO statement .)


state 211

    (118) for_loop -> FOR assignment downto type DO if_body .

    SEMICOLON       reduce using rule 118 (for_loop -> FOR assignment downto type DO if_body .)
    ELSE            reduce using rule 118 (for_loop -> FOR assignment downto type DO if_body .)


state 212

    (92) func_variable_declaration -> identifier_list COLON type_name SEMICOLON . func_variable_declaration
    (93) func_variable_declaration -> identifier_list COLON type_name SEMICOLON .
    (92) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON func_variable_declaration
    (93) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    BEGIN           reduce using rule 93 (func_variable_declaration -> identifier_list COLON type_name SEMICOLON .)
    IDENTIFIER      shift and go to state 17

    identifier_list                shift and go to state 144
    func_variable_declaration      shift and go to state 215

state 213

    (87) func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name .

    SEMICOLON       reduce using rule 87 (func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name .)


state 214

    (11) array_type -> ARRAY LBRACKET type RANGE type . RBRACKET OF type_name

    RBRACKET        shift and go to state 216


state 215

    (92) func_variable_declaration -> identifier_list COLON type_name SEMICOLON func_variable_declaration .

    BEGIN           reduce using rule 92 (func_variable_declaration -> identifier_list COLON type_name SEMICOLON func_variable_declaration .)


state 216

    (11) array_type -> ARRAY LBRACKET type RANGE type RBRACKET . OF type_name

    OF              shift and go to state 217


state 217

    (11) array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF . type_name
    (40) type_name -> . NINTEGER
    (41) type_name -> . NREAL
    (42) type_name -> . NSTRING
    (43) type_name -> . NCHAR
    (44) type_name -> . NBOOLEAN
    (45) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 79
    NREAL           shift and go to state 80
    NSTRING         shift and go to state 81
    NCHAR           shift and go to state 82
    NBOOLEAN        shift and go to state 83
    ARRAY           shift and go to state 85

    type_name                      shift and go to state 218
    array_type                     shift and go to state 84

state 218

    (11) array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .

    SEMICOLON       reduce using rule 11 (array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .)
    RPAREN          reduce using rule 11 (array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RANGE in state 64 resolved as shift
WARNING: shift/reduce conflict for EQ in state 64 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 64 resolved as shift
WARNING: shift/reduce conflict for LT in state 64 resolved as shift
WARNING: shift/reduce conflict for GT in state 64 resolved as shift
WARNING: shift/reduce conflict for LTE in state 64 resolved as shift
WARNING: shift/reduce conflict for GTE in state 64 resolved as shift
WARNING: shift/reduce conflict for AND in state 64 resolved as shift
WARNING: shift/reduce conflict for OR in state 64 resolved as shift
WARNING: shift/reduce conflict for NOT in state 64 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 64 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 64 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 64 resolved as shift
WARNING: shift/reduce conflict for DIV in state 64 resolved as shift
WARNING: shift/reduce conflict for MOD in state 64 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 90 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 90 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 90 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 90 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 90 resolved as shift
WARNING: shift/reduce conflict for DIV in state 90 resolved as shift
WARNING: shift/reduce conflict for MOD in state 90 resolved as shift
WARNING: shift/reduce conflict for EQ in state 90 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 90 resolved as shift
WARNING: shift/reduce conflict for LT in state 90 resolved as shift
WARNING: shift/reduce conflict for GT in state 90 resolved as shift
WARNING: shift/reduce conflict for LTE in state 90 resolved as shift
WARNING: shift/reduce conflict for GTE in state 90 resolved as shift
WARNING: shift/reduce conflict for AND in state 90 resolved as shift
WARNING: shift/reduce conflict for OR in state 90 resolved as shift
WARNING: shift/reduce conflict for NOT in state 90 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 134 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 134 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 134 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 134 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 134 resolved as shift
WARNING: shift/reduce conflict for DIV in state 134 resolved as shift
WARNING: shift/reduce conflict for MOD in state 134 resolved as shift
WARNING: shift/reduce conflict for EQ in state 134 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 134 resolved as shift
WARNING: shift/reduce conflict for LT in state 134 resolved as shift
WARNING: shift/reduce conflict for GT in state 134 resolved as shift
WARNING: shift/reduce conflict for LTE in state 134 resolved as shift
WARNING: shift/reduce conflict for GTE in state 134 resolved as shift
WARNING: shift/reduce conflict for AND in state 134 resolved as shift
WARNING: shift/reduce conflict for OR in state 134 resolved as shift
WARNING: shift/reduce conflict for NOT in state 134 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 159 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 160 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 162 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 162 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 162 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 162 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 162 resolved as shift
WARNING: shift/reduce conflict for DIV in state 162 resolved as shift
WARNING: shift/reduce conflict for MOD in state 162 resolved as shift
WARNING: shift/reduce conflict for EQ in state 162 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 162 resolved as shift
WARNING: shift/reduce conflict for LT in state 162 resolved as shift
WARNING: shift/reduce conflict for GT in state 162 resolved as shift
WARNING: shift/reduce conflict for LTE in state 162 resolved as shift
WARNING: shift/reduce conflict for GTE in state 162 resolved as shift
WARNING: shift/reduce conflict for AND in state 162 resolved as shift
WARNING: shift/reduce conflict for OR in state 162 resolved as shift
WARNING: shift/reduce conflict for NOT in state 162 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 163 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 163 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 163 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 163 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 163 resolved as shift
WARNING: shift/reduce conflict for DIV in state 163 resolved as shift
WARNING: shift/reduce conflict for MOD in state 163 resolved as shift
WARNING: shift/reduce conflict for EQ in state 163 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 163 resolved as shift
WARNING: shift/reduce conflict for LT in state 163 resolved as shift
WARNING: shift/reduce conflict for GT in state 163 resolved as shift
WARNING: shift/reduce conflict for LTE in state 163 resolved as shift
WARNING: shift/reduce conflict for GTE in state 163 resolved as shift
WARNING: shift/reduce conflict for AND in state 163 resolved as shift
WARNING: shift/reduce conflict for OR in state 163 resolved as shift
WARNING: shift/reduce conflict for NOT in state 163 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 164 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 164 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 164 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 164 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 164 resolved as shift
WARNING: shift/reduce conflict for DIV in state 164 resolved as shift
WARNING: shift/reduce conflict for MOD in state 164 resolved as shift
WARNING: shift/reduce conflict for EQ in state 164 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 164 resolved as shift
WARNING: shift/reduce conflict for LT in state 164 resolved as shift
WARNING: shift/reduce conflict for GT in state 164 resolved as shift
WARNING: shift/reduce conflict for LTE in state 164 resolved as shift
WARNING: shift/reduce conflict for GTE in state 164 resolved as shift
WARNING: shift/reduce conflict for AND in state 164 resolved as shift
WARNING: shift/reduce conflict for OR in state 164 resolved as shift
WARNING: shift/reduce conflict for NOT in state 164 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 165 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 165 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 165 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 165 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 165 resolved as shift
WARNING: shift/reduce conflict for DIV in state 165 resolved as shift
WARNING: shift/reduce conflict for MOD in state 165 resolved as shift
WARNING: shift/reduce conflict for EQ in state 165 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 165 resolved as shift
WARNING: shift/reduce conflict for LT in state 165 resolved as shift
WARNING: shift/reduce conflict for GT in state 165 resolved as shift
WARNING: shift/reduce conflict for LTE in state 165 resolved as shift
WARNING: shift/reduce conflict for GTE in state 165 resolved as shift
WARNING: shift/reduce conflict for AND in state 165 resolved as shift
WARNING: shift/reduce conflict for OR in state 165 resolved as shift
WARNING: shift/reduce conflict for NOT in state 165 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 166 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 166 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 166 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 166 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 166 resolved as shift
WARNING: shift/reduce conflict for DIV in state 166 resolved as shift
WARNING: shift/reduce conflict for MOD in state 166 resolved as shift
WARNING: shift/reduce conflict for EQ in state 166 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 166 resolved as shift
WARNING: shift/reduce conflict for LT in state 166 resolved as shift
WARNING: shift/reduce conflict for GT in state 166 resolved as shift
WARNING: shift/reduce conflict for LTE in state 166 resolved as shift
WARNING: shift/reduce conflict for GTE in state 166 resolved as shift
WARNING: shift/reduce conflict for AND in state 166 resolved as shift
WARNING: shift/reduce conflict for OR in state 166 resolved as shift
WARNING: shift/reduce conflict for NOT in state 166 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 167 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 167 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 167 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 167 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 167 resolved as shift
WARNING: shift/reduce conflict for DIV in state 167 resolved as shift
WARNING: shift/reduce conflict for MOD in state 167 resolved as shift
WARNING: shift/reduce conflict for EQ in state 167 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 167 resolved as shift
WARNING: shift/reduce conflict for LT in state 167 resolved as shift
WARNING: shift/reduce conflict for GT in state 167 resolved as shift
WARNING: shift/reduce conflict for LTE in state 167 resolved as shift
WARNING: shift/reduce conflict for GTE in state 167 resolved as shift
WARNING: shift/reduce conflict for AND in state 167 resolved as shift
WARNING: shift/reduce conflict for OR in state 167 resolved as shift
WARNING: shift/reduce conflict for NOT in state 167 resolved as shift
WARNING: reduce/reduce conflict in state 66 resolved using rule (expression -> func_call)
WARNING: rejected rule (type -> func_call) in state 66
WARNING: reduce/reduce conflict in state 90 resolved using rule (assignment -> type ASSIGNMENT type)
WARNING: rejected rule (condition -> type) in state 90
WARNING: reduce/reduce conflict in state 93 resolved using rule (expression -> func_call)
WARNING: rejected rule (type -> func_call) in state 93
WARNING: reduce/reduce conflict in state 163 resolved using rule (condition -> expression comparator type)
WARNING: rejected rule (condition -> type) in state 163
WARNING: reduce/reduce conflict in state 165 resolved using rule (expression -> expression operation type)
WARNING: rejected rule (condition -> type) in state 165
WARNING: reduce/reduce conflict in state 166 resolved using rule (condition -> type comparator type)
WARNING: rejected rule (condition -> type) in state 166
