Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> header block DOT
Rule 2     header -> PROGRAM IDENTIFIER SEMICOLON
Rule 3     block -> VAR variable_declaration body
Rule 4     block -> body
Rule 5     block -> function block
Rule 6     block -> procedure block
Rule 7     variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration
Rule 8     variable_declaration -> identifier_list COLON type_name SEMICOLON
Rule 9     identifier_list -> IDENTIFIER COMMA identifier_list
Rule 10    identifier_list -> IDENTIFIER
Rule 11    array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name
Rule 12    array_access -> IDENTIFIER LBRACKET type RBRACKET
Rule 13    body -> BEGIN statements END
Rule 14    statements -> statement SEMICOLON statements
Rule 15    statements -> statement SEMICOLON
Rule 16    statement -> writeln
Rule 17    statement -> assignment
Rule 18    statement -> procedure_call
Rule 19    statement -> cond_if
Rule 20    statement -> while_loop
Rule 21    statement -> for_loop
Rule 22    statement -> repeat_loop
Rule 23    statement -> readln
Rule 24    assignment -> type ASSIGNMENT type
Rule 25    assignment -> type ASSIGNMENT expression
Rule 26    assignment -> type ASSIGNMENT length
Rule 27    expression -> type operation type
Rule 28    expression -> expression_paren
Rule 29    expression -> expression operation type
Rule 30    expression -> expression operation expression
Rule 31    expression -> func_call
Rule 32    expression -> condition
Rule 33    expression_paren -> LPAREN expression RPAREN
Rule 34    operation -> plus
Rule 35    operation -> minus
Rule 36    operation -> times
Rule 37    operation -> division
Rule 38    operation -> div
Rule 39    operation -> mod
Rule 40    operation -> RANGE
Rule 41    type_name -> NINTEGER
Rule 42    type_name -> NREAL
Rule 43    type_name -> NSTRING
Rule 44    type_name -> NCHAR
Rule 45    type_name -> NBOOLEAN
Rule 46    type_name -> array_type
Rule 47    type -> integer
Rule 48    type -> real
Rule 49    type -> string
Rule 50    type -> char
Rule 51    type -> boolean
Rule 52    type -> identifier
Rule 53    type -> func_call
Rule 54    type -> array_access
Rule 55    integer -> INTEGER
Rule 56    real -> REAL
Rule 57    string -> STRING
Rule 58    char -> CHAR
Rule 59    boolean -> BOOLEAN
Rule 60    identifier -> IDENTIFIER
Rule 61    plus -> PLUS
Rule 62    minus -> MINUS
Rule 63    times -> TIMES
Rule 64    division -> DIVISION
Rule 65    div -> DIV
Rule 66    mod -> MOD
Rule 67    comparator -> eq
Rule 68    comparator -> neq
Rule 69    comparator -> lt
Rule 70    comparator -> gt
Rule 71    comparator -> lte
Rule 72    comparator -> gte
Rule 73    comparator -> and
Rule 74    comparator -> or
Rule 75    comparator -> not
Rule 76    eq -> EQ
Rule 77    neq -> NEQ
Rule 78    lt -> LT
Rule 79    gt -> GT
Rule 80    lte -> LTE
Rule 81    gte -> GTE
Rule 82    and -> AND
Rule 83    or -> OR
Rule 84    not -> NOT
Rule 85    procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
Rule 86    procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON
Rule 87    procedure_body -> BEGIN statements END
Rule 88    procedure_call -> prepare_func_call
Rule 89    procedure_call -> prepare_func_call LPAREN procedure_arg_list RPAREN
Rule 90    procedure_arg_list -> IDENTIFIER COMMA procedure_arg_list
Rule 91    procedure_arg_list -> IDENTIFIER
Rule 92    procedure_arg_list -> type COMMA procedure_arg_list
Rule 93    procedure_arg_list -> type
Rule 94    length -> LENGTH LPAREN type RPAREN
Rule 95    function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON
Rule 96    function -> func_header SEMICOLON func_body SEMICOLON
Rule 97    func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
Rule 98    func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name
Rule 99    func_args -> func_arglist SEMICOLON func_args
Rule 100   func_args -> func_arglist
Rule 101   func_arglist -> identifier_list COLON type_name
Rule 102   func_variable_declaration -> identifier_list COLON type_name SEMICOLON func_variable_declaration
Rule 103   func_variable_declaration -> identifier_list COLON type_name SEMICOLON
Rule 104   func_body -> BEGIN statements END
Rule 105   func_call -> prepare_func_call LPAREN arg_list RPAREN
Rule 106   prepare_func_call -> IDENTIFIER
Rule 107   arg_list -> IDENTIFIER COMMA arg_list
Rule 108   arg_list -> IDENTIFIER
Rule 109   arg_list -> type COMMA arg_list
Rule 110   arg_list -> type
Rule 111   arg_list -> <empty>
Rule 112   cond_if -> IF condition THEN statement
Rule 113   cond_if -> IF condition THEN statement ELSE statement
Rule 114   cond_if -> IF condition THEN statement ELSE if_body
Rule 115   cond_if -> IF condition THEN if_body
Rule 116   cond_if -> IF condition THEN if_body ELSE if_body
Rule 117   cond_if -> IF condition THEN if_body ELSE statement
Rule 118   condition -> expression comparator expression
Rule 119   condition -> type comparator expression
Rule 120   condition -> type comparator type
Rule 121   condition -> expression comparator type
Rule 122   condition -> type
Rule 123   if_body -> BEGIN statements END
Rule 124   to -> TO
Rule 125   downto -> DOWNTO
Rule 126   for_loop -> FOR assignment to type DO statement
Rule 127   for_loop -> FOR assignment to type DO if_body
Rule 128   for_loop -> FOR assignment downto type DO statement
Rule 129   for_loop -> FOR assignment downto type DO if_body
Rule 130   while_loop -> WHILE condition DO statement
Rule 131   while_loop -> WHILE condition DO if_body
Rule 132   repeat_loop -> REPEAT statements UNTIL condition
Rule 133   readln -> READLN LPAREN type RPAREN
Rule 134   writeln -> WRITELN LPAREN writeln_args RPAREN
Rule 135   writeln_args -> type COMMA writeln_args
Rule 136   writeln_args -> type

Terminals, with rules where they appear

AND                  : 82
ARRAY                : 11
ASSIGNMENT           : 24 25 26
BEGIN                : 13 87 104 123
BOOLEAN              : 59
CHAR                 : 58
COLON                : 7 8 97 98 101 102 103
COMMA                : 9 90 92 107 109 135
COMMENT              : 
DIV                  : 65
DIVISION             : 64
DO                   : 126 127 128 129 130 131
DOT                  : 1
DOWNTO               : 125
ELSE                 : 113 114 116 117
END                  : 13 87 104 123
EQ                   : 76
FOR                  : 126 127 128 129
FUNCTION             : 97 98
GT                   : 79
GTE                  : 81
IDENTIFIER           : 2 9 10 12 60 85 86 90 91 97 98 106 107 108
IF                   : 112 113 114 115 116 117
INTEGER              : 55
LBRACKET             : 11 12
LENGTH               : 94
LPAREN               : 33 86 89 94 97 98 105 133 134
LT                   : 78
LTE                  : 80
MINUS                : 62
MOD                  : 66
NBOOLEAN             : 45
NCHAR                : 44
NEQ                  : 77
NINTEGER             : 41
NOT                  : 84
NREAL                : 42
NSTRING              : 43
OF                   : 11
OR                   : 83
PLUS                 : 61
PROCEDURE            : 85 86
PROGRAM              : 2
RANGE                : 11 40
RBRACKET             : 11 12
READLN               : 133
REAL                 : 56
REPEAT               : 132
RPAREN               : 33 86 89 94 97 98 105 133 134
SEMICOLON            : 2 7 8 14 15 85 85 86 86 95 95 96 96 99 102 103
STRING               : 57
THEN                 : 112 113 114 115 116 117
TIMES                : 63
TO                   : 124
UNTIL                : 132
VAR                  : 3 95
WHILE                : 130 131
WRITELN              : 134
error                : 

Nonterminals, with rules where they appear

and                  : 73
arg_list             : 105 107 109
array_access         : 54
array_type           : 46
assignment           : 17 126 127 128 129
block                : 1 5 6
body                 : 3 4
boolean              : 51
char                 : 50
comparator           : 118 119 120 121
cond_if              : 19
condition            : 32 112 113 114 115 116 117 130 131 132
div                  : 38
division             : 37
downto               : 128 129
eq                   : 67
expression           : 25 29 30 30 33 118 118 119 121
expression_paren     : 28
for_loop             : 21
func_arglist         : 99 100
func_args            : 86 97 99
func_body            : 95 96
func_call            : 31 53
func_header          : 95 96
func_variable_declaration : 95 102
function             : 5
gt                   : 70
gte                  : 72
header               : 1
identifier           : 52
identifier_list      : 7 8 9 101 102 103
if_body              : 114 115 116 116 117 127 129 131
integer              : 47
length               : 26
lt                   : 69
lte                  : 71
minus                : 35
mod                  : 39
neq                  : 68
not                  : 75
operation            : 27 29 30
or                   : 74
plus                 : 34
prepare_func_call    : 88 89 105
procedure            : 6
procedure_arg_list   : 89 90 92
procedure_body       : 85 86
procedure_call       : 18
program              : 0
readln               : 23
real                 : 48
repeat_loop          : 22
statement            : 14 15 112 113 113 114 117 126 128 130
statements           : 13 14 87 104 123 132
string               : 49
times                : 36
to                   : 126 127
type                 : 11 11 12 24 24 25 26 27 27 29 92 93 94 109 110 119 120 120 121 122 126 127 128 129 133 135 136
type_name            : 7 8 11 97 98 101 102 103
variable_declaration : 3 7
while_loop           : 20
writeln              : 16
writeln_args         : 134 135

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . header block DOT
    (2) header -> . PROGRAM IDENTIFIER SEMICOLON

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    header                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> header . block DOT
    (3) block -> . VAR variable_declaration body
    (4) block -> . body
    (5) block -> . function block
    (6) block -> . procedure block
    (13) body -> . BEGIN statements END
    (95) function -> . func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON
    (96) function -> . func_header SEMICOLON func_body SEMICOLON
    (85) procedure -> . PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
    (86) procedure -> . PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON
    (97) func_header -> . FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (98) func_header -> . FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name

    VAR             shift and go to state 5
    BEGIN           shift and go to state 9
    PROCEDURE       shift and go to state 11
    FUNCTION        shift and go to state 12

    block                          shift and go to state 4
    body                           shift and go to state 6
    function                       shift and go to state 7
    procedure                      shift and go to state 8
    func_header                    shift and go to state 10

state 3

    (2) header -> PROGRAM . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 13


state 4

    (1) program -> header block . DOT

    DOT             shift and go to state 14


state 5

    (3) block -> VAR . variable_declaration body
    (7) variable_declaration -> . identifier_list COLON type_name SEMICOLON variable_declaration
    (8) variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    variable_declaration           shift and go to state 15
    identifier_list                shift and go to state 16

state 6

    (4) block -> body .

    DOT             reduce using rule 4 (block -> body .)


state 7

    (5) block -> function . block
    (3) block -> . VAR variable_declaration body
    (4) block -> . body
    (5) block -> . function block
    (6) block -> . procedure block
    (13) body -> . BEGIN statements END
    (95) function -> . func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON
    (96) function -> . func_header SEMICOLON func_body SEMICOLON
    (85) procedure -> . PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
    (86) procedure -> . PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON
    (97) func_header -> . FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (98) func_header -> . FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name

    VAR             shift and go to state 5
    BEGIN           shift and go to state 9
    PROCEDURE       shift and go to state 11
    FUNCTION        shift and go to state 12

    function                       shift and go to state 7
    block                          shift and go to state 18
    body                           shift and go to state 6
    procedure                      shift and go to state 8
    func_header                    shift and go to state 10

state 8

    (6) block -> procedure . block
    (3) block -> . VAR variable_declaration body
    (4) block -> . body
    (5) block -> . function block
    (6) block -> . procedure block
    (13) body -> . BEGIN statements END
    (95) function -> . func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON
    (96) function -> . func_header SEMICOLON func_body SEMICOLON
    (85) procedure -> . PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
    (86) procedure -> . PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON
    (97) func_header -> . FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (98) func_header -> . FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name

    VAR             shift and go to state 5
    BEGIN           shift and go to state 9
    PROCEDURE       shift and go to state 11
    FUNCTION        shift and go to state 12

    procedure                      shift and go to state 8
    block                          shift and go to state 19
    body                           shift and go to state 6
    function                       shift and go to state 7
    func_header                    shift and go to state 10

state 9

    (13) body -> BEGIN . statements END
    (14) statements -> . statement SEMICOLON statements
    (15) statements -> . statement SEMICOLON
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (134) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (88) procedure_call -> . prepare_func_call
    (89) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (112) cond_if -> . IF condition THEN statement
    (113) cond_if -> . IF condition THEN statement ELSE statement
    (114) cond_if -> . IF condition THEN statement ELSE if_body
    (115) cond_if -> . IF condition THEN if_body
    (116) cond_if -> . IF condition THEN if_body ELSE if_body
    (117) cond_if -> . IF condition THEN if_body ELSE statement
    (130) while_loop -> . WHILE condition DO statement
    (131) while_loop -> . WHILE condition DO if_body
    (126) for_loop -> . FOR assignment to type DO statement
    (127) for_loop -> . FOR assignment to type DO if_body
    (128) for_loop -> . FOR assignment downto type DO statement
    (129) for_loop -> . FOR assignment downto type DO if_body
    (132) repeat_loop -> . REPEAT statements UNTIL condition
    (133) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (106) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    statements                     shift and go to state 20
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 10

    (95) function -> func_header . SEMICOLON VAR func_variable_declaration func_body SEMICOLON
    (96) function -> func_header . SEMICOLON func_body SEMICOLON

    SEMICOLON       shift and go to state 52


state 11

    (85) procedure -> PROCEDURE . IDENTIFIER SEMICOLON procedure_body SEMICOLON
    (86) procedure -> PROCEDURE . IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON

    IDENTIFIER      shift and go to state 53


state 12

    (97) func_header -> FUNCTION . IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (98) func_header -> FUNCTION . IDENTIFIER LPAREN RPAREN COLON type_name

    IDENTIFIER      shift and go to state 54


state 13

    (2) header -> PROGRAM IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 55


state 14

    (1) program -> header block DOT .

    $end            reduce using rule 1 (program -> header block DOT .)


state 15

    (3) block -> VAR variable_declaration . body
    (13) body -> . BEGIN statements END

    BEGIN           shift and go to state 9

    body                           shift and go to state 56

state 16

    (7) variable_declaration -> identifier_list . COLON type_name SEMICOLON variable_declaration
    (8) variable_declaration -> identifier_list . COLON type_name SEMICOLON

    COLON           shift and go to state 57


state 17

    (9) identifier_list -> IDENTIFIER . COMMA identifier_list
    (10) identifier_list -> IDENTIFIER .

    COMMA           shift and go to state 58
    COLON           reduce using rule 10 (identifier_list -> IDENTIFIER .)


state 18

    (5) block -> function block .

    DOT             reduce using rule 5 (block -> function block .)


state 19

    (6) block -> procedure block .

    DOT             reduce using rule 6 (block -> procedure block .)


state 20

    (13) body -> BEGIN statements . END

    END             shift and go to state 59


state 21

    (14) statements -> statement . SEMICOLON statements
    (15) statements -> statement . SEMICOLON

    SEMICOLON       shift and go to state 60


state 22

    (16) statement -> writeln .

    SEMICOLON       reduce using rule 16 (statement -> writeln .)
    ELSE            reduce using rule 16 (statement -> writeln .)


state 23

    (17) statement -> assignment .

    SEMICOLON       reduce using rule 17 (statement -> assignment .)
    ELSE            reduce using rule 17 (statement -> assignment .)


state 24

    (18) statement -> procedure_call .

    SEMICOLON       reduce using rule 18 (statement -> procedure_call .)
    ELSE            reduce using rule 18 (statement -> procedure_call .)


state 25

    (19) statement -> cond_if .

    SEMICOLON       reduce using rule 19 (statement -> cond_if .)
    ELSE            reduce using rule 19 (statement -> cond_if .)


state 26

    (20) statement -> while_loop .

    SEMICOLON       reduce using rule 20 (statement -> while_loop .)
    ELSE            reduce using rule 20 (statement -> while_loop .)


state 27

    (21) statement -> for_loop .

    SEMICOLON       reduce using rule 21 (statement -> for_loop .)
    ELSE            reduce using rule 21 (statement -> for_loop .)


state 28

    (22) statement -> repeat_loop .

    SEMICOLON       reduce using rule 22 (statement -> repeat_loop .)
    ELSE            reduce using rule 22 (statement -> repeat_loop .)


state 29

    (23) statement -> readln .

    SEMICOLON       reduce using rule 23 (statement -> readln .)
    ELSE            reduce using rule 23 (statement -> readln .)


state 30

    (134) writeln -> WRITELN . LPAREN writeln_args RPAREN

    LPAREN          shift and go to state 61


state 31

    (24) assignment -> type . ASSIGNMENT type
    (25) assignment -> type . ASSIGNMENT expression
    (26) assignment -> type . ASSIGNMENT length

    ASSIGNMENT      shift and go to state 62


state 32

    (88) procedure_call -> prepare_func_call .
    (89) procedure_call -> prepare_func_call . LPAREN procedure_arg_list RPAREN
    (105) func_call -> prepare_func_call . LPAREN arg_list RPAREN

    SEMICOLON       reduce using rule 88 (procedure_call -> prepare_func_call .)
    ELSE            reduce using rule 88 (procedure_call -> prepare_func_call .)
    LPAREN          shift and go to state 63


state 33

    (112) cond_if -> IF . condition THEN statement
    (113) cond_if -> IF . condition THEN statement ELSE statement
    (114) cond_if -> IF . condition THEN statement ELSE if_body
    (115) cond_if -> IF . condition THEN if_body
    (116) cond_if -> IF . condition THEN if_body ELSE if_body
    (117) cond_if -> IF . condition THEN if_body ELSE statement
    (118) condition -> . expression comparator expression
    (119) condition -> . type comparator expression
    (120) condition -> . type comparator type
    (121) condition -> . expression comparator type
    (122) condition -> . type
    (27) expression -> . type operation type
    (28) expression -> . expression_paren
    (29) expression -> . expression operation type
    (30) expression -> . expression operation expression
    (31) expression -> . func_call
    (32) expression -> . condition
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (33) expression_paren -> . LPAREN expression RPAREN
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    LPAREN          shift and go to state 69
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    condition                      shift and go to state 64
    expression                     shift and go to state 65
    type                           shift and go to state 66
    expression_paren               shift and go to state 67
    func_call                      shift and go to state 68
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 34

    (130) while_loop -> WHILE . condition DO statement
    (131) while_loop -> WHILE . condition DO if_body
    (118) condition -> . expression comparator expression
    (119) condition -> . type comparator expression
    (120) condition -> . type comparator type
    (121) condition -> . expression comparator type
    (122) condition -> . type
    (27) expression -> . type operation type
    (28) expression -> . expression_paren
    (29) expression -> . expression operation type
    (30) expression -> . expression operation expression
    (31) expression -> . func_call
    (32) expression -> . condition
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (33) expression_paren -> . LPAREN expression RPAREN
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    LPAREN          shift and go to state 69
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    condition                      shift and go to state 72
    expression                     shift and go to state 65
    type                           shift and go to state 66
    expression_paren               shift and go to state 67
    func_call                      shift and go to state 68
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 35

    (126) for_loop -> FOR . assignment to type DO statement
    (127) for_loop -> FOR . assignment to type DO if_body
    (128) for_loop -> FOR . assignment downto type DO statement
    (129) for_loop -> FOR . assignment downto type DO if_body
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    assignment                     shift and go to state 73
    type                           shift and go to state 31
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 36

    (132) repeat_loop -> REPEAT . statements UNTIL condition
    (14) statements -> . statement SEMICOLON statements
    (15) statements -> . statement SEMICOLON
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (134) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (88) procedure_call -> . prepare_func_call
    (89) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (112) cond_if -> . IF condition THEN statement
    (113) cond_if -> . IF condition THEN statement ELSE statement
    (114) cond_if -> . IF condition THEN statement ELSE if_body
    (115) cond_if -> . IF condition THEN if_body
    (116) cond_if -> . IF condition THEN if_body ELSE if_body
    (117) cond_if -> . IF condition THEN if_body ELSE statement
    (130) while_loop -> . WHILE condition DO statement
    (131) while_loop -> . WHILE condition DO if_body
    (126) for_loop -> . FOR assignment to type DO statement
    (127) for_loop -> . FOR assignment to type DO if_body
    (128) for_loop -> . FOR assignment downto type DO statement
    (129) for_loop -> . FOR assignment downto type DO if_body
    (132) repeat_loop -> . REPEAT statements UNTIL condition
    (133) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (106) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    statements                     shift and go to state 74
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 37

    (133) readln -> READLN . LPAREN type RPAREN

    LPAREN          shift and go to state 75


state 38

    (47) type -> integer .

    ASSIGNMENT      reduce using rule 47 (type -> integer .)
    RANGE           reduce using rule 47 (type -> integer .)
    EQ              reduce using rule 47 (type -> integer .)
    NEQ             reduce using rule 47 (type -> integer .)
    LT              reduce using rule 47 (type -> integer .)
    GT              reduce using rule 47 (type -> integer .)
    LTE             reduce using rule 47 (type -> integer .)
    GTE             reduce using rule 47 (type -> integer .)
    AND             reduce using rule 47 (type -> integer .)
    OR              reduce using rule 47 (type -> integer .)
    NOT             reduce using rule 47 (type -> integer .)
    PLUS            reduce using rule 47 (type -> integer .)
    MINUS           reduce using rule 47 (type -> integer .)
    TIMES           reduce using rule 47 (type -> integer .)
    DIVISION        reduce using rule 47 (type -> integer .)
    DIV             reduce using rule 47 (type -> integer .)
    MOD             reduce using rule 47 (type -> integer .)
    THEN            reduce using rule 47 (type -> integer .)
    DO              reduce using rule 47 (type -> integer .)
    COMMA           reduce using rule 47 (type -> integer .)
    RPAREN          reduce using rule 47 (type -> integer .)
    SEMICOLON       reduce using rule 47 (type -> integer .)
    TO              reduce using rule 47 (type -> integer .)
    DOWNTO          reduce using rule 47 (type -> integer .)
    ELSE            reduce using rule 47 (type -> integer .)
    RBRACKET        reduce using rule 47 (type -> integer .)


state 39

    (48) type -> real .

    ASSIGNMENT      reduce using rule 48 (type -> real .)
    RANGE           reduce using rule 48 (type -> real .)
    EQ              reduce using rule 48 (type -> real .)
    NEQ             reduce using rule 48 (type -> real .)
    LT              reduce using rule 48 (type -> real .)
    GT              reduce using rule 48 (type -> real .)
    LTE             reduce using rule 48 (type -> real .)
    GTE             reduce using rule 48 (type -> real .)
    AND             reduce using rule 48 (type -> real .)
    OR              reduce using rule 48 (type -> real .)
    NOT             reduce using rule 48 (type -> real .)
    PLUS            reduce using rule 48 (type -> real .)
    MINUS           reduce using rule 48 (type -> real .)
    TIMES           reduce using rule 48 (type -> real .)
    DIVISION        reduce using rule 48 (type -> real .)
    DIV             reduce using rule 48 (type -> real .)
    MOD             reduce using rule 48 (type -> real .)
    THEN            reduce using rule 48 (type -> real .)
    DO              reduce using rule 48 (type -> real .)
    COMMA           reduce using rule 48 (type -> real .)
    RPAREN          reduce using rule 48 (type -> real .)
    SEMICOLON       reduce using rule 48 (type -> real .)
    TO              reduce using rule 48 (type -> real .)
    DOWNTO          reduce using rule 48 (type -> real .)
    ELSE            reduce using rule 48 (type -> real .)
    RBRACKET        reduce using rule 48 (type -> real .)


state 40

    (49) type -> string .

    ASSIGNMENT      reduce using rule 49 (type -> string .)
    RANGE           reduce using rule 49 (type -> string .)
    EQ              reduce using rule 49 (type -> string .)
    NEQ             reduce using rule 49 (type -> string .)
    LT              reduce using rule 49 (type -> string .)
    GT              reduce using rule 49 (type -> string .)
    LTE             reduce using rule 49 (type -> string .)
    GTE             reduce using rule 49 (type -> string .)
    AND             reduce using rule 49 (type -> string .)
    OR              reduce using rule 49 (type -> string .)
    NOT             reduce using rule 49 (type -> string .)
    PLUS            reduce using rule 49 (type -> string .)
    MINUS           reduce using rule 49 (type -> string .)
    TIMES           reduce using rule 49 (type -> string .)
    DIVISION        reduce using rule 49 (type -> string .)
    DIV             reduce using rule 49 (type -> string .)
    MOD             reduce using rule 49 (type -> string .)
    THEN            reduce using rule 49 (type -> string .)
    DO              reduce using rule 49 (type -> string .)
    COMMA           reduce using rule 49 (type -> string .)
    RPAREN          reduce using rule 49 (type -> string .)
    SEMICOLON       reduce using rule 49 (type -> string .)
    TO              reduce using rule 49 (type -> string .)
    DOWNTO          reduce using rule 49 (type -> string .)
    ELSE            reduce using rule 49 (type -> string .)
    RBRACKET        reduce using rule 49 (type -> string .)


state 41

    (50) type -> char .

    ASSIGNMENT      reduce using rule 50 (type -> char .)
    RANGE           reduce using rule 50 (type -> char .)
    EQ              reduce using rule 50 (type -> char .)
    NEQ             reduce using rule 50 (type -> char .)
    LT              reduce using rule 50 (type -> char .)
    GT              reduce using rule 50 (type -> char .)
    LTE             reduce using rule 50 (type -> char .)
    GTE             reduce using rule 50 (type -> char .)
    AND             reduce using rule 50 (type -> char .)
    OR              reduce using rule 50 (type -> char .)
    NOT             reduce using rule 50 (type -> char .)
    PLUS            reduce using rule 50 (type -> char .)
    MINUS           reduce using rule 50 (type -> char .)
    TIMES           reduce using rule 50 (type -> char .)
    DIVISION        reduce using rule 50 (type -> char .)
    DIV             reduce using rule 50 (type -> char .)
    MOD             reduce using rule 50 (type -> char .)
    THEN            reduce using rule 50 (type -> char .)
    DO              reduce using rule 50 (type -> char .)
    COMMA           reduce using rule 50 (type -> char .)
    RPAREN          reduce using rule 50 (type -> char .)
    SEMICOLON       reduce using rule 50 (type -> char .)
    TO              reduce using rule 50 (type -> char .)
    DOWNTO          reduce using rule 50 (type -> char .)
    ELSE            reduce using rule 50 (type -> char .)
    RBRACKET        reduce using rule 50 (type -> char .)


state 42

    (51) type -> boolean .

    ASSIGNMENT      reduce using rule 51 (type -> boolean .)
    RANGE           reduce using rule 51 (type -> boolean .)
    EQ              reduce using rule 51 (type -> boolean .)
    NEQ             reduce using rule 51 (type -> boolean .)
    LT              reduce using rule 51 (type -> boolean .)
    GT              reduce using rule 51 (type -> boolean .)
    LTE             reduce using rule 51 (type -> boolean .)
    GTE             reduce using rule 51 (type -> boolean .)
    AND             reduce using rule 51 (type -> boolean .)
    OR              reduce using rule 51 (type -> boolean .)
    NOT             reduce using rule 51 (type -> boolean .)
    PLUS            reduce using rule 51 (type -> boolean .)
    MINUS           reduce using rule 51 (type -> boolean .)
    TIMES           reduce using rule 51 (type -> boolean .)
    DIVISION        reduce using rule 51 (type -> boolean .)
    DIV             reduce using rule 51 (type -> boolean .)
    MOD             reduce using rule 51 (type -> boolean .)
    THEN            reduce using rule 51 (type -> boolean .)
    DO              reduce using rule 51 (type -> boolean .)
    COMMA           reduce using rule 51 (type -> boolean .)
    RPAREN          reduce using rule 51 (type -> boolean .)
    SEMICOLON       reduce using rule 51 (type -> boolean .)
    TO              reduce using rule 51 (type -> boolean .)
    DOWNTO          reduce using rule 51 (type -> boolean .)
    ELSE            reduce using rule 51 (type -> boolean .)
    RBRACKET        reduce using rule 51 (type -> boolean .)


state 43

    (52) type -> identifier .

    ASSIGNMENT      reduce using rule 52 (type -> identifier .)
    RANGE           reduce using rule 52 (type -> identifier .)
    EQ              reduce using rule 52 (type -> identifier .)
    NEQ             reduce using rule 52 (type -> identifier .)
    LT              reduce using rule 52 (type -> identifier .)
    GT              reduce using rule 52 (type -> identifier .)
    LTE             reduce using rule 52 (type -> identifier .)
    GTE             reduce using rule 52 (type -> identifier .)
    AND             reduce using rule 52 (type -> identifier .)
    OR              reduce using rule 52 (type -> identifier .)
    NOT             reduce using rule 52 (type -> identifier .)
    PLUS            reduce using rule 52 (type -> identifier .)
    MINUS           reduce using rule 52 (type -> identifier .)
    TIMES           reduce using rule 52 (type -> identifier .)
    DIVISION        reduce using rule 52 (type -> identifier .)
    DIV             reduce using rule 52 (type -> identifier .)
    MOD             reduce using rule 52 (type -> identifier .)
    THEN            reduce using rule 52 (type -> identifier .)
    DO              reduce using rule 52 (type -> identifier .)
    COMMA           reduce using rule 52 (type -> identifier .)
    RPAREN          reduce using rule 52 (type -> identifier .)
    SEMICOLON       reduce using rule 52 (type -> identifier .)
    TO              reduce using rule 52 (type -> identifier .)
    DOWNTO          reduce using rule 52 (type -> identifier .)
    ELSE            reduce using rule 52 (type -> identifier .)
    RBRACKET        reduce using rule 52 (type -> identifier .)


state 44

    (53) type -> func_call .

    ASSIGNMENT      reduce using rule 53 (type -> func_call .)
    COMMA           reduce using rule 53 (type -> func_call .)
    RPAREN          reduce using rule 53 (type -> func_call .)
    RBRACKET        reduce using rule 53 (type -> func_call .)
    RANGE           reduce using rule 53 (type -> func_call .)
    EQ              reduce using rule 53 (type -> func_call .)
    NEQ             reduce using rule 53 (type -> func_call .)
    LT              reduce using rule 53 (type -> func_call .)
    GT              reduce using rule 53 (type -> func_call .)
    LTE             reduce using rule 53 (type -> func_call .)
    GTE             reduce using rule 53 (type -> func_call .)
    AND             reduce using rule 53 (type -> func_call .)
    OR              reduce using rule 53 (type -> func_call .)
    NOT             reduce using rule 53 (type -> func_call .)
    PLUS            reduce using rule 53 (type -> func_call .)
    MINUS           reduce using rule 53 (type -> func_call .)
    TIMES           reduce using rule 53 (type -> func_call .)
    DIVISION        reduce using rule 53 (type -> func_call .)
    DIV             reduce using rule 53 (type -> func_call .)
    MOD             reduce using rule 53 (type -> func_call .)
    SEMICOLON       reduce using rule 53 (type -> func_call .)
    TO              reduce using rule 53 (type -> func_call .)
    DOWNTO          reduce using rule 53 (type -> func_call .)
    ELSE            reduce using rule 53 (type -> func_call .)
    THEN            reduce using rule 53 (type -> func_call .)
    DO              reduce using rule 53 (type -> func_call .)


state 45

    (54) type -> array_access .

    ASSIGNMENT      reduce using rule 54 (type -> array_access .)
    RANGE           reduce using rule 54 (type -> array_access .)
    EQ              reduce using rule 54 (type -> array_access .)
    NEQ             reduce using rule 54 (type -> array_access .)
    LT              reduce using rule 54 (type -> array_access .)
    GT              reduce using rule 54 (type -> array_access .)
    LTE             reduce using rule 54 (type -> array_access .)
    GTE             reduce using rule 54 (type -> array_access .)
    AND             reduce using rule 54 (type -> array_access .)
    OR              reduce using rule 54 (type -> array_access .)
    NOT             reduce using rule 54 (type -> array_access .)
    PLUS            reduce using rule 54 (type -> array_access .)
    MINUS           reduce using rule 54 (type -> array_access .)
    TIMES           reduce using rule 54 (type -> array_access .)
    DIVISION        reduce using rule 54 (type -> array_access .)
    DIV             reduce using rule 54 (type -> array_access .)
    MOD             reduce using rule 54 (type -> array_access .)
    THEN            reduce using rule 54 (type -> array_access .)
    DO              reduce using rule 54 (type -> array_access .)
    COMMA           reduce using rule 54 (type -> array_access .)
    RPAREN          reduce using rule 54 (type -> array_access .)
    SEMICOLON       reduce using rule 54 (type -> array_access .)
    TO              reduce using rule 54 (type -> array_access .)
    DOWNTO          reduce using rule 54 (type -> array_access .)
    ELSE            reduce using rule 54 (type -> array_access .)
    RBRACKET        reduce using rule 54 (type -> array_access .)


state 46

    (106) prepare_func_call -> IDENTIFIER .
    (60) identifier -> IDENTIFIER .
    (12) array_access -> IDENTIFIER . LBRACKET type RBRACKET

    LPAREN          reduce using rule 106 (prepare_func_call -> IDENTIFIER .)
    SEMICOLON       reduce using rule 106 (prepare_func_call -> IDENTIFIER .)
    ELSE            reduce using rule 106 (prepare_func_call -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 60 (identifier -> IDENTIFIER .)
    LBRACKET        shift and go to state 76


state 47

    (55) integer -> INTEGER .

    ASSIGNMENT      reduce using rule 55 (integer -> INTEGER .)
    RANGE           reduce using rule 55 (integer -> INTEGER .)
    EQ              reduce using rule 55 (integer -> INTEGER .)
    NEQ             reduce using rule 55 (integer -> INTEGER .)
    LT              reduce using rule 55 (integer -> INTEGER .)
    GT              reduce using rule 55 (integer -> INTEGER .)
    LTE             reduce using rule 55 (integer -> INTEGER .)
    GTE             reduce using rule 55 (integer -> INTEGER .)
    AND             reduce using rule 55 (integer -> INTEGER .)
    OR              reduce using rule 55 (integer -> INTEGER .)
    NOT             reduce using rule 55 (integer -> INTEGER .)
    PLUS            reduce using rule 55 (integer -> INTEGER .)
    MINUS           reduce using rule 55 (integer -> INTEGER .)
    TIMES           reduce using rule 55 (integer -> INTEGER .)
    DIVISION        reduce using rule 55 (integer -> INTEGER .)
    DIV             reduce using rule 55 (integer -> INTEGER .)
    MOD             reduce using rule 55 (integer -> INTEGER .)
    THEN            reduce using rule 55 (integer -> INTEGER .)
    DO              reduce using rule 55 (integer -> INTEGER .)
    COMMA           reduce using rule 55 (integer -> INTEGER .)
    RPAREN          reduce using rule 55 (integer -> INTEGER .)
    SEMICOLON       reduce using rule 55 (integer -> INTEGER .)
    TO              reduce using rule 55 (integer -> INTEGER .)
    DOWNTO          reduce using rule 55 (integer -> INTEGER .)
    ELSE            reduce using rule 55 (integer -> INTEGER .)
    RBRACKET        reduce using rule 55 (integer -> INTEGER .)


state 48

    (56) real -> REAL .

    ASSIGNMENT      reduce using rule 56 (real -> REAL .)
    RANGE           reduce using rule 56 (real -> REAL .)
    EQ              reduce using rule 56 (real -> REAL .)
    NEQ             reduce using rule 56 (real -> REAL .)
    LT              reduce using rule 56 (real -> REAL .)
    GT              reduce using rule 56 (real -> REAL .)
    LTE             reduce using rule 56 (real -> REAL .)
    GTE             reduce using rule 56 (real -> REAL .)
    AND             reduce using rule 56 (real -> REAL .)
    OR              reduce using rule 56 (real -> REAL .)
    NOT             reduce using rule 56 (real -> REAL .)
    PLUS            reduce using rule 56 (real -> REAL .)
    MINUS           reduce using rule 56 (real -> REAL .)
    TIMES           reduce using rule 56 (real -> REAL .)
    DIVISION        reduce using rule 56 (real -> REAL .)
    DIV             reduce using rule 56 (real -> REAL .)
    MOD             reduce using rule 56 (real -> REAL .)
    THEN            reduce using rule 56 (real -> REAL .)
    DO              reduce using rule 56 (real -> REAL .)
    COMMA           reduce using rule 56 (real -> REAL .)
    RPAREN          reduce using rule 56 (real -> REAL .)
    SEMICOLON       reduce using rule 56 (real -> REAL .)
    TO              reduce using rule 56 (real -> REAL .)
    DOWNTO          reduce using rule 56 (real -> REAL .)
    ELSE            reduce using rule 56 (real -> REAL .)
    RBRACKET        reduce using rule 56 (real -> REAL .)


state 49

    (57) string -> STRING .

    ASSIGNMENT      reduce using rule 57 (string -> STRING .)
    RANGE           reduce using rule 57 (string -> STRING .)
    EQ              reduce using rule 57 (string -> STRING .)
    NEQ             reduce using rule 57 (string -> STRING .)
    LT              reduce using rule 57 (string -> STRING .)
    GT              reduce using rule 57 (string -> STRING .)
    LTE             reduce using rule 57 (string -> STRING .)
    GTE             reduce using rule 57 (string -> STRING .)
    AND             reduce using rule 57 (string -> STRING .)
    OR              reduce using rule 57 (string -> STRING .)
    NOT             reduce using rule 57 (string -> STRING .)
    PLUS            reduce using rule 57 (string -> STRING .)
    MINUS           reduce using rule 57 (string -> STRING .)
    TIMES           reduce using rule 57 (string -> STRING .)
    DIVISION        reduce using rule 57 (string -> STRING .)
    DIV             reduce using rule 57 (string -> STRING .)
    MOD             reduce using rule 57 (string -> STRING .)
    THEN            reduce using rule 57 (string -> STRING .)
    DO              reduce using rule 57 (string -> STRING .)
    COMMA           reduce using rule 57 (string -> STRING .)
    RPAREN          reduce using rule 57 (string -> STRING .)
    SEMICOLON       reduce using rule 57 (string -> STRING .)
    TO              reduce using rule 57 (string -> STRING .)
    DOWNTO          reduce using rule 57 (string -> STRING .)
    ELSE            reduce using rule 57 (string -> STRING .)
    RBRACKET        reduce using rule 57 (string -> STRING .)


state 50

    (58) char -> CHAR .

    ASSIGNMENT      reduce using rule 58 (char -> CHAR .)
    RANGE           reduce using rule 58 (char -> CHAR .)
    EQ              reduce using rule 58 (char -> CHAR .)
    NEQ             reduce using rule 58 (char -> CHAR .)
    LT              reduce using rule 58 (char -> CHAR .)
    GT              reduce using rule 58 (char -> CHAR .)
    LTE             reduce using rule 58 (char -> CHAR .)
    GTE             reduce using rule 58 (char -> CHAR .)
    AND             reduce using rule 58 (char -> CHAR .)
    OR              reduce using rule 58 (char -> CHAR .)
    NOT             reduce using rule 58 (char -> CHAR .)
    PLUS            reduce using rule 58 (char -> CHAR .)
    MINUS           reduce using rule 58 (char -> CHAR .)
    TIMES           reduce using rule 58 (char -> CHAR .)
    DIVISION        reduce using rule 58 (char -> CHAR .)
    DIV             reduce using rule 58 (char -> CHAR .)
    MOD             reduce using rule 58 (char -> CHAR .)
    THEN            reduce using rule 58 (char -> CHAR .)
    DO              reduce using rule 58 (char -> CHAR .)
    COMMA           reduce using rule 58 (char -> CHAR .)
    RPAREN          reduce using rule 58 (char -> CHAR .)
    SEMICOLON       reduce using rule 58 (char -> CHAR .)
    TO              reduce using rule 58 (char -> CHAR .)
    DOWNTO          reduce using rule 58 (char -> CHAR .)
    ELSE            reduce using rule 58 (char -> CHAR .)
    RBRACKET        reduce using rule 58 (char -> CHAR .)


state 51

    (59) boolean -> BOOLEAN .

    ASSIGNMENT      reduce using rule 59 (boolean -> BOOLEAN .)
    RANGE           reduce using rule 59 (boolean -> BOOLEAN .)
    EQ              reduce using rule 59 (boolean -> BOOLEAN .)
    NEQ             reduce using rule 59 (boolean -> BOOLEAN .)
    LT              reduce using rule 59 (boolean -> BOOLEAN .)
    GT              reduce using rule 59 (boolean -> BOOLEAN .)
    LTE             reduce using rule 59 (boolean -> BOOLEAN .)
    GTE             reduce using rule 59 (boolean -> BOOLEAN .)
    AND             reduce using rule 59 (boolean -> BOOLEAN .)
    OR              reduce using rule 59 (boolean -> BOOLEAN .)
    NOT             reduce using rule 59 (boolean -> BOOLEAN .)
    PLUS            reduce using rule 59 (boolean -> BOOLEAN .)
    MINUS           reduce using rule 59 (boolean -> BOOLEAN .)
    TIMES           reduce using rule 59 (boolean -> BOOLEAN .)
    DIVISION        reduce using rule 59 (boolean -> BOOLEAN .)
    DIV             reduce using rule 59 (boolean -> BOOLEAN .)
    MOD             reduce using rule 59 (boolean -> BOOLEAN .)
    THEN            reduce using rule 59 (boolean -> BOOLEAN .)
    DO              reduce using rule 59 (boolean -> BOOLEAN .)
    COMMA           reduce using rule 59 (boolean -> BOOLEAN .)
    RPAREN          reduce using rule 59 (boolean -> BOOLEAN .)
    SEMICOLON       reduce using rule 59 (boolean -> BOOLEAN .)
    TO              reduce using rule 59 (boolean -> BOOLEAN .)
    DOWNTO          reduce using rule 59 (boolean -> BOOLEAN .)
    ELSE            reduce using rule 59 (boolean -> BOOLEAN .)
    RBRACKET        reduce using rule 59 (boolean -> BOOLEAN .)


state 52

    (95) function -> func_header SEMICOLON . VAR func_variable_declaration func_body SEMICOLON
    (96) function -> func_header SEMICOLON . func_body SEMICOLON
    (104) func_body -> . BEGIN statements END

    VAR             shift and go to state 77
    BEGIN           shift and go to state 79

    func_body                      shift and go to state 78

state 53

    (85) procedure -> PROCEDURE IDENTIFIER . SEMICOLON procedure_body SEMICOLON
    (86) procedure -> PROCEDURE IDENTIFIER . LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON

    SEMICOLON       shift and go to state 80
    LPAREN          shift and go to state 81


state 54

    (97) func_header -> FUNCTION IDENTIFIER . LPAREN func_args RPAREN COLON type_name
    (98) func_header -> FUNCTION IDENTIFIER . LPAREN RPAREN COLON type_name

    LPAREN          shift and go to state 82


state 55

    (2) header -> PROGRAM IDENTIFIER SEMICOLON .

    VAR             reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)
    BEGIN           reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)
    PROCEDURE       reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)


state 56

    (3) block -> VAR variable_declaration body .

    DOT             reduce using rule 3 (block -> VAR variable_declaration body .)


state 57

    (7) variable_declaration -> identifier_list COLON . type_name SEMICOLON variable_declaration
    (8) variable_declaration -> identifier_list COLON . type_name SEMICOLON
    (41) type_name -> . NINTEGER
    (42) type_name -> . NREAL
    (43) type_name -> . NSTRING
    (44) type_name -> . NCHAR
    (45) type_name -> . NBOOLEAN
    (46) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 84
    NREAL           shift and go to state 85
    NSTRING         shift and go to state 86
    NCHAR           shift and go to state 87
    NBOOLEAN        shift and go to state 88
    ARRAY           shift and go to state 90

    type_name                      shift and go to state 83
    array_type                     shift and go to state 89

state 58

    (9) identifier_list -> IDENTIFIER COMMA . identifier_list
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    identifier_list                shift and go to state 91

state 59

    (13) body -> BEGIN statements END .

    DOT             reduce using rule 13 (body -> BEGIN statements END .)


state 60

    (14) statements -> statement SEMICOLON . statements
    (15) statements -> statement SEMICOLON .
    (14) statements -> . statement SEMICOLON statements
    (15) statements -> . statement SEMICOLON
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (134) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (88) procedure_call -> . prepare_func_call
    (89) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (112) cond_if -> . IF condition THEN statement
    (113) cond_if -> . IF condition THEN statement ELSE statement
    (114) cond_if -> . IF condition THEN statement ELSE if_body
    (115) cond_if -> . IF condition THEN if_body
    (116) cond_if -> . IF condition THEN if_body ELSE if_body
    (117) cond_if -> . IF condition THEN if_body ELSE statement
    (130) while_loop -> . WHILE condition DO statement
    (131) while_loop -> . WHILE condition DO if_body
    (126) for_loop -> . FOR assignment to type DO statement
    (127) for_loop -> . FOR assignment to type DO if_body
    (128) for_loop -> . FOR assignment downto type DO statement
    (129) for_loop -> . FOR assignment downto type DO if_body
    (132) repeat_loop -> . REPEAT statements UNTIL condition
    (133) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (106) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    END             reduce using rule 15 (statements -> statement SEMICOLON .)
    UNTIL           reduce using rule 15 (statements -> statement SEMICOLON .)
    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    statement                      shift and go to state 21
    statements                     shift and go to state 92
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 61

    (134) writeln -> WRITELN LPAREN . writeln_args RPAREN
    (135) writeln_args -> . type COMMA writeln_args
    (136) writeln_args -> . type
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    writeln_args                   shift and go to state 93
    type                           shift and go to state 94
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 62

    (24) assignment -> type ASSIGNMENT . type
    (25) assignment -> type ASSIGNMENT . expression
    (26) assignment -> type ASSIGNMENT . length
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (27) expression -> . type operation type
    (28) expression -> . expression_paren
    (29) expression -> . expression operation type
    (30) expression -> . expression operation expression
    (31) expression -> . func_call
    (32) expression -> . condition
    (94) length -> . LENGTH LPAREN type RPAREN
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (33) expression_paren -> . LPAREN expression RPAREN
    (118) condition -> . expression comparator expression
    (119) condition -> . type comparator expression
    (120) condition -> . type comparator type
    (121) condition -> . expression comparator type
    (122) condition -> . type
    (106) prepare_func_call -> . IDENTIFIER

    LENGTH          shift and go to state 100
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 69

    type                           shift and go to state 95
    expression                     shift and go to state 96
    length                         shift and go to state 97
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 98
    array_access                   shift and go to state 45
    expression_paren               shift and go to state 67
    condition                      shift and go to state 99
    prepare_func_call              shift and go to state 70

state 63

    (89) procedure_call -> prepare_func_call LPAREN . procedure_arg_list RPAREN
    (105) func_call -> prepare_func_call LPAREN . arg_list RPAREN
    (90) procedure_arg_list -> . IDENTIFIER COMMA procedure_arg_list
    (91) procedure_arg_list -> . IDENTIFIER
    (92) procedure_arg_list -> . type COMMA procedure_arg_list
    (93) procedure_arg_list -> . type
    (107) arg_list -> . IDENTIFIER COMMA arg_list
    (108) arg_list -> . IDENTIFIER
    (109) arg_list -> . type COMMA arg_list
    (110) arg_list -> . type
    (111) arg_list -> .
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    IDENTIFIER      shift and go to state 103
    RPAREN          reduce using rule 111 (arg_list -> .)
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    prepare_func_call              shift and go to state 70
    procedure_arg_list             shift and go to state 101
    arg_list                       shift and go to state 102
    type                           shift and go to state 104
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 64

    (112) cond_if -> IF condition . THEN statement
    (113) cond_if -> IF condition . THEN statement ELSE statement
    (114) cond_if -> IF condition . THEN statement ELSE if_body
    (115) cond_if -> IF condition . THEN if_body
    (116) cond_if -> IF condition . THEN if_body ELSE if_body
    (117) cond_if -> IF condition . THEN if_body ELSE statement
    (32) expression -> condition .

    THEN            shift and go to state 105
    RANGE           reduce using rule 32 (expression -> condition .)
    EQ              reduce using rule 32 (expression -> condition .)
    NEQ             reduce using rule 32 (expression -> condition .)
    LT              reduce using rule 32 (expression -> condition .)
    GT              reduce using rule 32 (expression -> condition .)
    LTE             reduce using rule 32 (expression -> condition .)
    GTE             reduce using rule 32 (expression -> condition .)
    AND             reduce using rule 32 (expression -> condition .)
    OR              reduce using rule 32 (expression -> condition .)
    NOT             reduce using rule 32 (expression -> condition .)
    PLUS            reduce using rule 32 (expression -> condition .)
    MINUS           reduce using rule 32 (expression -> condition .)
    TIMES           reduce using rule 32 (expression -> condition .)
    DIVISION        reduce using rule 32 (expression -> condition .)
    DIV             reduce using rule 32 (expression -> condition .)
    MOD             reduce using rule 32 (expression -> condition .)


state 65

    (118) condition -> expression . comparator expression
    (121) condition -> expression . comparator type
    (29) expression -> expression . operation type
    (30) expression -> expression . operation expression
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD

    RANGE           shift and go to state 123
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138

    comparator                     shift and go to state 106
    operation                      shift and go to state 107
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122

state 66

    (119) condition -> type . comparator expression
    (120) condition -> type . comparator type
    (122) condition -> type .
    (27) expression -> type . operation type
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    THEN            reduce using rule 122 (condition -> type .)
    DO              reduce using rule 122 (condition -> type .)
    SEMICOLON       reduce using rule 122 (condition -> type .)
    ELSE            reduce using rule 122 (condition -> type .)
    RANGE           shift and go to state 123
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138

  ! RANGE           [ reduce using rule 122 (condition -> type .) ]
  ! EQ              [ reduce using rule 122 (condition -> type .) ]
  ! NEQ             [ reduce using rule 122 (condition -> type .) ]
  ! LT              [ reduce using rule 122 (condition -> type .) ]
  ! GT              [ reduce using rule 122 (condition -> type .) ]
  ! LTE             [ reduce using rule 122 (condition -> type .) ]
  ! GTE             [ reduce using rule 122 (condition -> type .) ]
  ! AND             [ reduce using rule 122 (condition -> type .) ]
  ! OR              [ reduce using rule 122 (condition -> type .) ]
  ! NOT             [ reduce using rule 122 (condition -> type .) ]
  ! PLUS            [ reduce using rule 122 (condition -> type .) ]
  ! MINUS           [ reduce using rule 122 (condition -> type .) ]
  ! TIMES           [ reduce using rule 122 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 122 (condition -> type .) ]
  ! DIV             [ reduce using rule 122 (condition -> type .) ]
  ! MOD             [ reduce using rule 122 (condition -> type .) ]

    comparator                     shift and go to state 139
    operation                      shift and go to state 140
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122

state 67

    (28) expression -> expression_paren .

    RANGE           reduce using rule 28 (expression -> expression_paren .)
    EQ              reduce using rule 28 (expression -> expression_paren .)
    NEQ             reduce using rule 28 (expression -> expression_paren .)
    LT              reduce using rule 28 (expression -> expression_paren .)
    GT              reduce using rule 28 (expression -> expression_paren .)
    LTE             reduce using rule 28 (expression -> expression_paren .)
    GTE             reduce using rule 28 (expression -> expression_paren .)
    AND             reduce using rule 28 (expression -> expression_paren .)
    OR              reduce using rule 28 (expression -> expression_paren .)
    NOT             reduce using rule 28 (expression -> expression_paren .)
    PLUS            reduce using rule 28 (expression -> expression_paren .)
    MINUS           reduce using rule 28 (expression -> expression_paren .)
    TIMES           reduce using rule 28 (expression -> expression_paren .)
    DIVISION        reduce using rule 28 (expression -> expression_paren .)
    DIV             reduce using rule 28 (expression -> expression_paren .)
    MOD             reduce using rule 28 (expression -> expression_paren .)
    SEMICOLON       reduce using rule 28 (expression -> expression_paren .)
    TO              reduce using rule 28 (expression -> expression_paren .)
    DOWNTO          reduce using rule 28 (expression -> expression_paren .)
    ELSE            reduce using rule 28 (expression -> expression_paren .)
    RPAREN          reduce using rule 28 (expression -> expression_paren .)
    THEN            reduce using rule 28 (expression -> expression_paren .)
    DO              reduce using rule 28 (expression -> expression_paren .)


state 68

    (31) expression -> func_call .
    (53) type -> func_call .

  ! reduce/reduce conflict for RANGE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for EQ resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for NEQ resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for LTE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for GTE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for AND resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for OR resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for NOT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DIVISION resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DIV resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for MOD resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for THEN resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DO resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for TO resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 31 (expression -> func_call .)
    RANGE           reduce using rule 31 (expression -> func_call .)
    EQ              reduce using rule 31 (expression -> func_call .)
    NEQ             reduce using rule 31 (expression -> func_call .)
    LT              reduce using rule 31 (expression -> func_call .)
    GT              reduce using rule 31 (expression -> func_call .)
    LTE             reduce using rule 31 (expression -> func_call .)
    GTE             reduce using rule 31 (expression -> func_call .)
    AND             reduce using rule 31 (expression -> func_call .)
    OR              reduce using rule 31 (expression -> func_call .)
    NOT             reduce using rule 31 (expression -> func_call .)
    PLUS            reduce using rule 31 (expression -> func_call .)
    MINUS           reduce using rule 31 (expression -> func_call .)
    TIMES           reduce using rule 31 (expression -> func_call .)
    DIVISION        reduce using rule 31 (expression -> func_call .)
    DIV             reduce using rule 31 (expression -> func_call .)
    MOD             reduce using rule 31 (expression -> func_call .)
    RPAREN          reduce using rule 31 (expression -> func_call .)
    THEN            reduce using rule 31 (expression -> func_call .)
    DO              reduce using rule 31 (expression -> func_call .)
    SEMICOLON       reduce using rule 31 (expression -> func_call .)
    TO              reduce using rule 31 (expression -> func_call .)
    DOWNTO          reduce using rule 31 (expression -> func_call .)
    ELSE            reduce using rule 31 (expression -> func_call .)

  ! RANGE           [ reduce using rule 53 (type -> func_call .) ]
  ! EQ              [ reduce using rule 53 (type -> func_call .) ]
  ! NEQ             [ reduce using rule 53 (type -> func_call .) ]
  ! LT              [ reduce using rule 53 (type -> func_call .) ]
  ! GT              [ reduce using rule 53 (type -> func_call .) ]
  ! LTE             [ reduce using rule 53 (type -> func_call .) ]
  ! GTE             [ reduce using rule 53 (type -> func_call .) ]
  ! AND             [ reduce using rule 53 (type -> func_call .) ]
  ! OR              [ reduce using rule 53 (type -> func_call .) ]
  ! NOT             [ reduce using rule 53 (type -> func_call .) ]
  ! PLUS            [ reduce using rule 53 (type -> func_call .) ]
  ! MINUS           [ reduce using rule 53 (type -> func_call .) ]
  ! TIMES           [ reduce using rule 53 (type -> func_call .) ]
  ! DIVISION        [ reduce using rule 53 (type -> func_call .) ]
  ! DIV             [ reduce using rule 53 (type -> func_call .) ]
  ! MOD             [ reduce using rule 53 (type -> func_call .) ]
  ! THEN            [ reduce using rule 53 (type -> func_call .) ]
  ! DO              [ reduce using rule 53 (type -> func_call .) ]
  ! RPAREN          [ reduce using rule 53 (type -> func_call .) ]
  ! SEMICOLON       [ reduce using rule 53 (type -> func_call .) ]
  ! TO              [ reduce using rule 53 (type -> func_call .) ]
  ! DOWNTO          [ reduce using rule 53 (type -> func_call .) ]
  ! ELSE            [ reduce using rule 53 (type -> func_call .) ]


state 69

    (33) expression_paren -> LPAREN . expression RPAREN
    (27) expression -> . type operation type
    (28) expression -> . expression_paren
    (29) expression -> . expression operation type
    (30) expression -> . expression operation expression
    (31) expression -> . func_call
    (32) expression -> . condition
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (33) expression_paren -> . LPAREN expression RPAREN
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (118) condition -> . expression comparator expression
    (119) condition -> . type comparator expression
    (120) condition -> . type comparator type
    (121) condition -> . expression comparator type
    (122) condition -> . type
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    LPAREN          shift and go to state 69
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    expression                     shift and go to state 141
    type                           shift and go to state 142
    expression_paren               shift and go to state 67
    func_call                      shift and go to state 68
    condition                      shift and go to state 99
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 70

    (105) func_call -> prepare_func_call . LPAREN arg_list RPAREN

    LPAREN          shift and go to state 143


state 71

    (60) identifier -> IDENTIFIER .
    (12) array_access -> IDENTIFIER . LBRACKET type RBRACKET
    (106) prepare_func_call -> IDENTIFIER .

    RANGE           reduce using rule 60 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 60 (identifier -> IDENTIFIER .)
    NEQ             reduce using rule 60 (identifier -> IDENTIFIER .)
    LT              reduce using rule 60 (identifier -> IDENTIFIER .)
    GT              reduce using rule 60 (identifier -> IDENTIFIER .)
    LTE             reduce using rule 60 (identifier -> IDENTIFIER .)
    GTE             reduce using rule 60 (identifier -> IDENTIFIER .)
    AND             reduce using rule 60 (identifier -> IDENTIFIER .)
    OR              reduce using rule 60 (identifier -> IDENTIFIER .)
    NOT             reduce using rule 60 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 60 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 60 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 60 (identifier -> IDENTIFIER .)
    DIVISION        reduce using rule 60 (identifier -> IDENTIFIER .)
    DIV             reduce using rule 60 (identifier -> IDENTIFIER .)
    MOD             reduce using rule 60 (identifier -> IDENTIFIER .)
    THEN            reduce using rule 60 (identifier -> IDENTIFIER .)
    DO              reduce using rule 60 (identifier -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 60 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 60 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 60 (identifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 60 (identifier -> IDENTIFIER .)
    TO              reduce using rule 60 (identifier -> IDENTIFIER .)
    DOWNTO          reduce using rule 60 (identifier -> IDENTIFIER .)
    ELSE            reduce using rule 60 (identifier -> IDENTIFIER .)
    RBRACKET        reduce using rule 60 (identifier -> IDENTIFIER .)
    LBRACKET        shift and go to state 76
    LPAREN          reduce using rule 106 (prepare_func_call -> IDENTIFIER .)


state 72

    (130) while_loop -> WHILE condition . DO statement
    (131) while_loop -> WHILE condition . DO if_body
    (32) expression -> condition .

    DO              shift and go to state 144
    RANGE           reduce using rule 32 (expression -> condition .)
    EQ              reduce using rule 32 (expression -> condition .)
    NEQ             reduce using rule 32 (expression -> condition .)
    LT              reduce using rule 32 (expression -> condition .)
    GT              reduce using rule 32 (expression -> condition .)
    LTE             reduce using rule 32 (expression -> condition .)
    GTE             reduce using rule 32 (expression -> condition .)
    AND             reduce using rule 32 (expression -> condition .)
    OR              reduce using rule 32 (expression -> condition .)
    NOT             reduce using rule 32 (expression -> condition .)
    PLUS            reduce using rule 32 (expression -> condition .)
    MINUS           reduce using rule 32 (expression -> condition .)
    TIMES           reduce using rule 32 (expression -> condition .)
    DIVISION        reduce using rule 32 (expression -> condition .)
    DIV             reduce using rule 32 (expression -> condition .)
    MOD             reduce using rule 32 (expression -> condition .)


state 73

    (126) for_loop -> FOR assignment . to type DO statement
    (127) for_loop -> FOR assignment . to type DO if_body
    (128) for_loop -> FOR assignment . downto type DO statement
    (129) for_loop -> FOR assignment . downto type DO if_body
    (124) to -> . TO
    (125) downto -> . DOWNTO

    TO              shift and go to state 147
    DOWNTO          shift and go to state 148

    to                             shift and go to state 145
    downto                         shift and go to state 146

state 74

    (132) repeat_loop -> REPEAT statements . UNTIL condition

    UNTIL           shift and go to state 149


state 75

    (133) readln -> READLN LPAREN . type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 150
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 76

    (12) array_access -> IDENTIFIER LBRACKET . type RBRACKET
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 151
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 77

    (95) function -> func_header SEMICOLON VAR . func_variable_declaration func_body SEMICOLON
    (102) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON func_variable_declaration
    (103) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    func_variable_declaration      shift and go to state 152
    identifier_list                shift and go to state 153

state 78

    (96) function -> func_header SEMICOLON func_body . SEMICOLON

    SEMICOLON       shift and go to state 154


state 79

    (104) func_body -> BEGIN . statements END
    (14) statements -> . statement SEMICOLON statements
    (15) statements -> . statement SEMICOLON
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (134) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (88) procedure_call -> . prepare_func_call
    (89) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (112) cond_if -> . IF condition THEN statement
    (113) cond_if -> . IF condition THEN statement ELSE statement
    (114) cond_if -> . IF condition THEN statement ELSE if_body
    (115) cond_if -> . IF condition THEN if_body
    (116) cond_if -> . IF condition THEN if_body ELSE if_body
    (117) cond_if -> . IF condition THEN if_body ELSE statement
    (130) while_loop -> . WHILE condition DO statement
    (131) while_loop -> . WHILE condition DO if_body
    (126) for_loop -> . FOR assignment to type DO statement
    (127) for_loop -> . FOR assignment to type DO if_body
    (128) for_loop -> . FOR assignment downto type DO statement
    (129) for_loop -> . FOR assignment downto type DO if_body
    (132) repeat_loop -> . REPEAT statements UNTIL condition
    (133) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (106) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    statements                     shift and go to state 155
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 80

    (85) procedure -> PROCEDURE IDENTIFIER SEMICOLON . procedure_body SEMICOLON
    (87) procedure_body -> . BEGIN statements END

    BEGIN           shift and go to state 157

    procedure_body                 shift and go to state 156

state 81

    (86) procedure -> PROCEDURE IDENTIFIER LPAREN . func_args RPAREN SEMICOLON procedure_body SEMICOLON
    (99) func_args -> . func_arglist SEMICOLON func_args
    (100) func_args -> . func_arglist
    (101) func_arglist -> . identifier_list COLON type_name
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    func_args                      shift and go to state 158
    func_arglist                   shift and go to state 159
    identifier_list                shift and go to state 160

state 82

    (97) func_header -> FUNCTION IDENTIFIER LPAREN . func_args RPAREN COLON type_name
    (98) func_header -> FUNCTION IDENTIFIER LPAREN . RPAREN COLON type_name
    (99) func_args -> . func_arglist SEMICOLON func_args
    (100) func_args -> . func_arglist
    (101) func_arglist -> . identifier_list COLON type_name
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    RPAREN          shift and go to state 162
    IDENTIFIER      shift and go to state 17

    func_args                      shift and go to state 161
    func_arglist                   shift and go to state 159
    identifier_list                shift and go to state 160

state 83

    (7) variable_declaration -> identifier_list COLON type_name . SEMICOLON variable_declaration
    (8) variable_declaration -> identifier_list COLON type_name . SEMICOLON

    SEMICOLON       shift and go to state 163


state 84

    (41) type_name -> NINTEGER .

    SEMICOLON       reduce using rule 41 (type_name -> NINTEGER .)
    RPAREN          reduce using rule 41 (type_name -> NINTEGER .)


state 85

    (42) type_name -> NREAL .

    SEMICOLON       reduce using rule 42 (type_name -> NREAL .)
    RPAREN          reduce using rule 42 (type_name -> NREAL .)


state 86

    (43) type_name -> NSTRING .

    SEMICOLON       reduce using rule 43 (type_name -> NSTRING .)
    RPAREN          reduce using rule 43 (type_name -> NSTRING .)


state 87

    (44) type_name -> NCHAR .

    SEMICOLON       reduce using rule 44 (type_name -> NCHAR .)
    RPAREN          reduce using rule 44 (type_name -> NCHAR .)


state 88

    (45) type_name -> NBOOLEAN .

    SEMICOLON       reduce using rule 45 (type_name -> NBOOLEAN .)
    RPAREN          reduce using rule 45 (type_name -> NBOOLEAN .)


state 89

    (46) type_name -> array_type .

    SEMICOLON       reduce using rule 46 (type_name -> array_type .)
    RPAREN          reduce using rule 46 (type_name -> array_type .)


state 90

    (11) array_type -> ARRAY . LBRACKET type RANGE type RBRACKET OF type_name

    LBRACKET        shift and go to state 164


state 91

    (9) identifier_list -> IDENTIFIER COMMA identifier_list .

    COLON           reduce using rule 9 (identifier_list -> IDENTIFIER COMMA identifier_list .)


state 92

    (14) statements -> statement SEMICOLON statements .

    END             reduce using rule 14 (statements -> statement SEMICOLON statements .)
    UNTIL           reduce using rule 14 (statements -> statement SEMICOLON statements .)


state 93

    (134) writeln -> WRITELN LPAREN writeln_args . RPAREN

    RPAREN          shift and go to state 165


state 94

    (135) writeln_args -> type . COMMA writeln_args
    (136) writeln_args -> type .

    COMMA           shift and go to state 166
    RPAREN          reduce using rule 136 (writeln_args -> type .)


state 95

    (24) assignment -> type ASSIGNMENT type .
    (27) expression -> type . operation type
    (119) condition -> type . comparator expression
    (120) condition -> type . comparator type
    (122) condition -> type .
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

  ! reduce/reduce conflict for SEMICOLON resolved using rule 24 (assignment -> type ASSIGNMENT type .)
  ! reduce/reduce conflict for TO resolved using rule 24 (assignment -> type ASSIGNMENT type .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 24 (assignment -> type ASSIGNMENT type .)
  ! reduce/reduce conflict for ELSE resolved using rule 24 (assignment -> type ASSIGNMENT type .)
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    SEMICOLON       reduce using rule 24 (assignment -> type ASSIGNMENT type .)
    TO              reduce using rule 24 (assignment -> type ASSIGNMENT type .)
    DOWNTO          reduce using rule 24 (assignment -> type ASSIGNMENT type .)
    ELSE            reduce using rule 24 (assignment -> type ASSIGNMENT type .)
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

  ! RANGE           [ reduce using rule 122 (condition -> type .) ]
  ! PLUS            [ reduce using rule 122 (condition -> type .) ]
  ! MINUS           [ reduce using rule 122 (condition -> type .) ]
  ! TIMES           [ reduce using rule 122 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 122 (condition -> type .) ]
  ! DIV             [ reduce using rule 122 (condition -> type .) ]
  ! MOD             [ reduce using rule 122 (condition -> type .) ]
  ! EQ              [ reduce using rule 122 (condition -> type .) ]
  ! NEQ             [ reduce using rule 122 (condition -> type .) ]
  ! LT              [ reduce using rule 122 (condition -> type .) ]
  ! GT              [ reduce using rule 122 (condition -> type .) ]
  ! LTE             [ reduce using rule 122 (condition -> type .) ]
  ! GTE             [ reduce using rule 122 (condition -> type .) ]
  ! AND             [ reduce using rule 122 (condition -> type .) ]
  ! OR              [ reduce using rule 122 (condition -> type .) ]
  ! NOT             [ reduce using rule 122 (condition -> type .) ]
  ! SEMICOLON       [ reduce using rule 122 (condition -> type .) ]
  ! TO              [ reduce using rule 122 (condition -> type .) ]
  ! DOWNTO          [ reduce using rule 122 (condition -> type .) ]
  ! ELSE            [ reduce using rule 122 (condition -> type .) ]

    operation                      shift and go to state 140
    comparator                     shift and go to state 139
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 96

    (25) assignment -> type ASSIGNMENT expression .
    (29) expression -> expression . operation type
    (30) expression -> expression . operation expression
    (118) condition -> expression . comparator expression
    (121) condition -> expression . comparator type
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

    SEMICOLON       reduce using rule 25 (assignment -> type ASSIGNMENT expression .)
    TO              reduce using rule 25 (assignment -> type ASSIGNMENT expression .)
    DOWNTO          reduce using rule 25 (assignment -> type ASSIGNMENT expression .)
    ELSE            reduce using rule 25 (assignment -> type ASSIGNMENT expression .)
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

    operation                      shift and go to state 107
    comparator                     shift and go to state 106
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 97

    (26) assignment -> type ASSIGNMENT length .

    SEMICOLON       reduce using rule 26 (assignment -> type ASSIGNMENT length .)
    TO              reduce using rule 26 (assignment -> type ASSIGNMENT length .)
    DOWNTO          reduce using rule 26 (assignment -> type ASSIGNMENT length .)
    ELSE            reduce using rule 26 (assignment -> type ASSIGNMENT length .)


state 98

    (53) type -> func_call .
    (31) expression -> func_call .

  ! reduce/reduce conflict for RANGE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DIVISION resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DIV resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for MOD resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for EQ resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for NEQ resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for LTE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for GTE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for AND resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for OR resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for NOT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for TO resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for THEN resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DO resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 31 (expression -> func_call .)
    RANGE           reduce using rule 31 (expression -> func_call .)
    PLUS            reduce using rule 31 (expression -> func_call .)
    MINUS           reduce using rule 31 (expression -> func_call .)
    TIMES           reduce using rule 31 (expression -> func_call .)
    DIVISION        reduce using rule 31 (expression -> func_call .)
    DIV             reduce using rule 31 (expression -> func_call .)
    MOD             reduce using rule 31 (expression -> func_call .)
    EQ              reduce using rule 31 (expression -> func_call .)
    NEQ             reduce using rule 31 (expression -> func_call .)
    LT              reduce using rule 31 (expression -> func_call .)
    GT              reduce using rule 31 (expression -> func_call .)
    LTE             reduce using rule 31 (expression -> func_call .)
    GTE             reduce using rule 31 (expression -> func_call .)
    AND             reduce using rule 31 (expression -> func_call .)
    OR              reduce using rule 31 (expression -> func_call .)
    NOT             reduce using rule 31 (expression -> func_call .)
    SEMICOLON       reduce using rule 31 (expression -> func_call .)
    TO              reduce using rule 31 (expression -> func_call .)
    DOWNTO          reduce using rule 31 (expression -> func_call .)
    ELSE            reduce using rule 31 (expression -> func_call .)
    THEN            reduce using rule 31 (expression -> func_call .)
    DO              reduce using rule 31 (expression -> func_call .)
    RPAREN          reduce using rule 31 (expression -> func_call .)

  ! RANGE           [ reduce using rule 53 (type -> func_call .) ]
  ! PLUS            [ reduce using rule 53 (type -> func_call .) ]
  ! MINUS           [ reduce using rule 53 (type -> func_call .) ]
  ! TIMES           [ reduce using rule 53 (type -> func_call .) ]
  ! DIVISION        [ reduce using rule 53 (type -> func_call .) ]
  ! DIV             [ reduce using rule 53 (type -> func_call .) ]
  ! MOD             [ reduce using rule 53 (type -> func_call .) ]
  ! EQ              [ reduce using rule 53 (type -> func_call .) ]
  ! NEQ             [ reduce using rule 53 (type -> func_call .) ]
  ! LT              [ reduce using rule 53 (type -> func_call .) ]
  ! GT              [ reduce using rule 53 (type -> func_call .) ]
  ! LTE             [ reduce using rule 53 (type -> func_call .) ]
  ! GTE             [ reduce using rule 53 (type -> func_call .) ]
  ! AND             [ reduce using rule 53 (type -> func_call .) ]
  ! OR              [ reduce using rule 53 (type -> func_call .) ]
  ! NOT             [ reduce using rule 53 (type -> func_call .) ]
  ! SEMICOLON       [ reduce using rule 53 (type -> func_call .) ]
  ! TO              [ reduce using rule 53 (type -> func_call .) ]
  ! DOWNTO          [ reduce using rule 53 (type -> func_call .) ]
  ! ELSE            [ reduce using rule 53 (type -> func_call .) ]
  ! RPAREN          [ reduce using rule 53 (type -> func_call .) ]
  ! THEN            [ reduce using rule 53 (type -> func_call .) ]
  ! DO              [ reduce using rule 53 (type -> func_call .) ]


state 99

    (32) expression -> condition .

    RANGE           reduce using rule 32 (expression -> condition .)
    PLUS            reduce using rule 32 (expression -> condition .)
    MINUS           reduce using rule 32 (expression -> condition .)
    TIMES           reduce using rule 32 (expression -> condition .)
    DIVISION        reduce using rule 32 (expression -> condition .)
    DIV             reduce using rule 32 (expression -> condition .)
    MOD             reduce using rule 32 (expression -> condition .)
    EQ              reduce using rule 32 (expression -> condition .)
    NEQ             reduce using rule 32 (expression -> condition .)
    LT              reduce using rule 32 (expression -> condition .)
    GT              reduce using rule 32 (expression -> condition .)
    LTE             reduce using rule 32 (expression -> condition .)
    GTE             reduce using rule 32 (expression -> condition .)
    AND             reduce using rule 32 (expression -> condition .)
    OR              reduce using rule 32 (expression -> condition .)
    NOT             reduce using rule 32 (expression -> condition .)
    SEMICOLON       reduce using rule 32 (expression -> condition .)
    TO              reduce using rule 32 (expression -> condition .)
    DOWNTO          reduce using rule 32 (expression -> condition .)
    ELSE            reduce using rule 32 (expression -> condition .)
    RPAREN          reduce using rule 32 (expression -> condition .)
    THEN            reduce using rule 32 (expression -> condition .)
    DO              reduce using rule 32 (expression -> condition .)


state 100

    (94) length -> LENGTH . LPAREN type RPAREN

    LPAREN          shift and go to state 167


state 101

    (89) procedure_call -> prepare_func_call LPAREN procedure_arg_list . RPAREN

    RPAREN          shift and go to state 168


state 102

    (105) func_call -> prepare_func_call LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 169


state 103

    (90) procedure_arg_list -> IDENTIFIER . COMMA procedure_arg_list
    (91) procedure_arg_list -> IDENTIFIER .
    (107) arg_list -> IDENTIFIER . COMMA arg_list
    (108) arg_list -> IDENTIFIER .
    (60) identifier -> IDENTIFIER .
    (12) array_access -> IDENTIFIER . LBRACKET type RBRACKET
    (106) prepare_func_call -> IDENTIFIER .

  ! reduce/reduce conflict for RPAREN resolved using rule 91 (procedure_arg_list -> IDENTIFIER .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 60 (identifier -> IDENTIFIER .)
    COMMA           shift and go to state 170
    RPAREN          reduce using rule 60 (identifier -> IDENTIFIER .)
    LBRACKET        shift and go to state 76
    LPAREN          reduce using rule 106 (prepare_func_call -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 91 (procedure_arg_list -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 108 (arg_list -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 60 (identifier -> IDENTIFIER .) ]


state 104

    (92) procedure_arg_list -> type . COMMA procedure_arg_list
    (93) procedure_arg_list -> type .
    (109) arg_list -> type . COMMA arg_list
    (110) arg_list -> type .

  ! reduce/reduce conflict for RPAREN resolved using rule 93 (procedure_arg_list -> type .)
    COMMA           shift and go to state 171
    RPAREN          reduce using rule 93 (procedure_arg_list -> type .)

  ! RPAREN          [ reduce using rule 110 (arg_list -> type .) ]


state 105

    (112) cond_if -> IF condition THEN . statement
    (113) cond_if -> IF condition THEN . statement ELSE statement
    (114) cond_if -> IF condition THEN . statement ELSE if_body
    (115) cond_if -> IF condition THEN . if_body
    (116) cond_if -> IF condition THEN . if_body ELSE if_body
    (117) cond_if -> IF condition THEN . if_body ELSE statement
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (123) if_body -> . BEGIN statements END
    (134) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (88) procedure_call -> . prepare_func_call
    (89) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (112) cond_if -> . IF condition THEN statement
    (113) cond_if -> . IF condition THEN statement ELSE statement
    (114) cond_if -> . IF condition THEN statement ELSE if_body
    (115) cond_if -> . IF condition THEN if_body
    (116) cond_if -> . IF condition THEN if_body ELSE if_body
    (117) cond_if -> . IF condition THEN if_body ELSE statement
    (130) while_loop -> . WHILE condition DO statement
    (131) while_loop -> . WHILE condition DO if_body
    (126) for_loop -> . FOR assignment to type DO statement
    (127) for_loop -> . FOR assignment to type DO if_body
    (128) for_loop -> . FOR assignment downto type DO statement
    (129) for_loop -> . FOR assignment downto type DO if_body
    (132) repeat_loop -> . REPEAT statements UNTIL condition
    (133) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (106) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    BEGIN           shift and go to state 174
    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    statement                      shift and go to state 172
    if_body                        shift and go to state 173
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 106

    (118) condition -> expression comparator . expression
    (121) condition -> expression comparator . type
    (27) expression -> . type operation type
    (28) expression -> . expression_paren
    (29) expression -> . expression operation type
    (30) expression -> . expression operation expression
    (31) expression -> . func_call
    (32) expression -> . condition
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (33) expression_paren -> . LPAREN expression RPAREN
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (118) condition -> . expression comparator expression
    (119) condition -> . type comparator expression
    (120) condition -> . type comparator type
    (121) condition -> . expression comparator type
    (122) condition -> . type
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    LPAREN          shift and go to state 69
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    expression                     shift and go to state 175
    type                           shift and go to state 176
    expression_paren               shift and go to state 67
    func_call                      shift and go to state 68
    condition                      shift and go to state 99
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 107

    (29) expression -> expression operation . type
    (30) expression -> expression operation . expression
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (27) expression -> . type operation type
    (28) expression -> . expression_paren
    (29) expression -> . expression operation type
    (30) expression -> . expression operation expression
    (31) expression -> . func_call
    (32) expression -> . condition
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (33) expression_paren -> . LPAREN expression RPAREN
    (118) condition -> . expression comparator expression
    (119) condition -> . type comparator expression
    (120) condition -> . type comparator type
    (121) condition -> . expression comparator type
    (122) condition -> . type
    (106) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 69

    expression                     shift and go to state 177
    type                           shift and go to state 178
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 98
    array_access                   shift and go to state 45
    expression_paren               shift and go to state 67
    condition                      shift and go to state 99
    prepare_func_call              shift and go to state 70

state 108

    (67) comparator -> eq .

    LPAREN          reduce using rule 67 (comparator -> eq .)
    INTEGER         reduce using rule 67 (comparator -> eq .)
    REAL            reduce using rule 67 (comparator -> eq .)
    STRING          reduce using rule 67 (comparator -> eq .)
    CHAR            reduce using rule 67 (comparator -> eq .)
    BOOLEAN         reduce using rule 67 (comparator -> eq .)
    IDENTIFIER      reduce using rule 67 (comparator -> eq .)


state 109

    (68) comparator -> neq .

    LPAREN          reduce using rule 68 (comparator -> neq .)
    INTEGER         reduce using rule 68 (comparator -> neq .)
    REAL            reduce using rule 68 (comparator -> neq .)
    STRING          reduce using rule 68 (comparator -> neq .)
    CHAR            reduce using rule 68 (comparator -> neq .)
    BOOLEAN         reduce using rule 68 (comparator -> neq .)
    IDENTIFIER      reduce using rule 68 (comparator -> neq .)


state 110

    (69) comparator -> lt .

    LPAREN          reduce using rule 69 (comparator -> lt .)
    INTEGER         reduce using rule 69 (comparator -> lt .)
    REAL            reduce using rule 69 (comparator -> lt .)
    STRING          reduce using rule 69 (comparator -> lt .)
    CHAR            reduce using rule 69 (comparator -> lt .)
    BOOLEAN         reduce using rule 69 (comparator -> lt .)
    IDENTIFIER      reduce using rule 69 (comparator -> lt .)


state 111

    (70) comparator -> gt .

    LPAREN          reduce using rule 70 (comparator -> gt .)
    INTEGER         reduce using rule 70 (comparator -> gt .)
    REAL            reduce using rule 70 (comparator -> gt .)
    STRING          reduce using rule 70 (comparator -> gt .)
    CHAR            reduce using rule 70 (comparator -> gt .)
    BOOLEAN         reduce using rule 70 (comparator -> gt .)
    IDENTIFIER      reduce using rule 70 (comparator -> gt .)


state 112

    (71) comparator -> lte .

    LPAREN          reduce using rule 71 (comparator -> lte .)
    INTEGER         reduce using rule 71 (comparator -> lte .)
    REAL            reduce using rule 71 (comparator -> lte .)
    STRING          reduce using rule 71 (comparator -> lte .)
    CHAR            reduce using rule 71 (comparator -> lte .)
    BOOLEAN         reduce using rule 71 (comparator -> lte .)
    IDENTIFIER      reduce using rule 71 (comparator -> lte .)


state 113

    (72) comparator -> gte .

    LPAREN          reduce using rule 72 (comparator -> gte .)
    INTEGER         reduce using rule 72 (comparator -> gte .)
    REAL            reduce using rule 72 (comparator -> gte .)
    STRING          reduce using rule 72 (comparator -> gte .)
    CHAR            reduce using rule 72 (comparator -> gte .)
    BOOLEAN         reduce using rule 72 (comparator -> gte .)
    IDENTIFIER      reduce using rule 72 (comparator -> gte .)


state 114

    (73) comparator -> and .

    LPAREN          reduce using rule 73 (comparator -> and .)
    INTEGER         reduce using rule 73 (comparator -> and .)
    REAL            reduce using rule 73 (comparator -> and .)
    STRING          reduce using rule 73 (comparator -> and .)
    CHAR            reduce using rule 73 (comparator -> and .)
    BOOLEAN         reduce using rule 73 (comparator -> and .)
    IDENTIFIER      reduce using rule 73 (comparator -> and .)


state 115

    (74) comparator -> or .

    LPAREN          reduce using rule 74 (comparator -> or .)
    INTEGER         reduce using rule 74 (comparator -> or .)
    REAL            reduce using rule 74 (comparator -> or .)
    STRING          reduce using rule 74 (comparator -> or .)
    CHAR            reduce using rule 74 (comparator -> or .)
    BOOLEAN         reduce using rule 74 (comparator -> or .)
    IDENTIFIER      reduce using rule 74 (comparator -> or .)


state 116

    (75) comparator -> not .

    LPAREN          reduce using rule 75 (comparator -> not .)
    INTEGER         reduce using rule 75 (comparator -> not .)
    REAL            reduce using rule 75 (comparator -> not .)
    STRING          reduce using rule 75 (comparator -> not .)
    CHAR            reduce using rule 75 (comparator -> not .)
    BOOLEAN         reduce using rule 75 (comparator -> not .)
    IDENTIFIER      reduce using rule 75 (comparator -> not .)


state 117

    (34) operation -> plus .

    INTEGER         reduce using rule 34 (operation -> plus .)
    REAL            reduce using rule 34 (operation -> plus .)
    STRING          reduce using rule 34 (operation -> plus .)
    CHAR            reduce using rule 34 (operation -> plus .)
    BOOLEAN         reduce using rule 34 (operation -> plus .)
    IDENTIFIER      reduce using rule 34 (operation -> plus .)
    LPAREN          reduce using rule 34 (operation -> plus .)


state 118

    (35) operation -> minus .

    INTEGER         reduce using rule 35 (operation -> minus .)
    REAL            reduce using rule 35 (operation -> minus .)
    STRING          reduce using rule 35 (operation -> minus .)
    CHAR            reduce using rule 35 (operation -> minus .)
    BOOLEAN         reduce using rule 35 (operation -> minus .)
    IDENTIFIER      reduce using rule 35 (operation -> minus .)
    LPAREN          reduce using rule 35 (operation -> minus .)


state 119

    (36) operation -> times .

    INTEGER         reduce using rule 36 (operation -> times .)
    REAL            reduce using rule 36 (operation -> times .)
    STRING          reduce using rule 36 (operation -> times .)
    CHAR            reduce using rule 36 (operation -> times .)
    BOOLEAN         reduce using rule 36 (operation -> times .)
    IDENTIFIER      reduce using rule 36 (operation -> times .)
    LPAREN          reduce using rule 36 (operation -> times .)


state 120

    (37) operation -> division .

    INTEGER         reduce using rule 37 (operation -> division .)
    REAL            reduce using rule 37 (operation -> division .)
    STRING          reduce using rule 37 (operation -> division .)
    CHAR            reduce using rule 37 (operation -> division .)
    BOOLEAN         reduce using rule 37 (operation -> division .)
    IDENTIFIER      reduce using rule 37 (operation -> division .)
    LPAREN          reduce using rule 37 (operation -> division .)


state 121

    (38) operation -> div .

    INTEGER         reduce using rule 38 (operation -> div .)
    REAL            reduce using rule 38 (operation -> div .)
    STRING          reduce using rule 38 (operation -> div .)
    CHAR            reduce using rule 38 (operation -> div .)
    BOOLEAN         reduce using rule 38 (operation -> div .)
    IDENTIFIER      reduce using rule 38 (operation -> div .)
    LPAREN          reduce using rule 38 (operation -> div .)


state 122

    (39) operation -> mod .

    INTEGER         reduce using rule 39 (operation -> mod .)
    REAL            reduce using rule 39 (operation -> mod .)
    STRING          reduce using rule 39 (operation -> mod .)
    CHAR            reduce using rule 39 (operation -> mod .)
    BOOLEAN         reduce using rule 39 (operation -> mod .)
    IDENTIFIER      reduce using rule 39 (operation -> mod .)
    LPAREN          reduce using rule 39 (operation -> mod .)


state 123

    (40) operation -> RANGE .

    INTEGER         reduce using rule 40 (operation -> RANGE .)
    REAL            reduce using rule 40 (operation -> RANGE .)
    STRING          reduce using rule 40 (operation -> RANGE .)
    CHAR            reduce using rule 40 (operation -> RANGE .)
    BOOLEAN         reduce using rule 40 (operation -> RANGE .)
    IDENTIFIER      reduce using rule 40 (operation -> RANGE .)
    LPAREN          reduce using rule 40 (operation -> RANGE .)


state 124

    (76) eq -> EQ .

    LPAREN          reduce using rule 76 (eq -> EQ .)
    INTEGER         reduce using rule 76 (eq -> EQ .)
    REAL            reduce using rule 76 (eq -> EQ .)
    STRING          reduce using rule 76 (eq -> EQ .)
    CHAR            reduce using rule 76 (eq -> EQ .)
    BOOLEAN         reduce using rule 76 (eq -> EQ .)
    IDENTIFIER      reduce using rule 76 (eq -> EQ .)


state 125

    (77) neq -> NEQ .

    LPAREN          reduce using rule 77 (neq -> NEQ .)
    INTEGER         reduce using rule 77 (neq -> NEQ .)
    REAL            reduce using rule 77 (neq -> NEQ .)
    STRING          reduce using rule 77 (neq -> NEQ .)
    CHAR            reduce using rule 77 (neq -> NEQ .)
    BOOLEAN         reduce using rule 77 (neq -> NEQ .)
    IDENTIFIER      reduce using rule 77 (neq -> NEQ .)


state 126

    (78) lt -> LT .

    LPAREN          reduce using rule 78 (lt -> LT .)
    INTEGER         reduce using rule 78 (lt -> LT .)
    REAL            reduce using rule 78 (lt -> LT .)
    STRING          reduce using rule 78 (lt -> LT .)
    CHAR            reduce using rule 78 (lt -> LT .)
    BOOLEAN         reduce using rule 78 (lt -> LT .)
    IDENTIFIER      reduce using rule 78 (lt -> LT .)


state 127

    (79) gt -> GT .

    LPAREN          reduce using rule 79 (gt -> GT .)
    INTEGER         reduce using rule 79 (gt -> GT .)
    REAL            reduce using rule 79 (gt -> GT .)
    STRING          reduce using rule 79 (gt -> GT .)
    CHAR            reduce using rule 79 (gt -> GT .)
    BOOLEAN         reduce using rule 79 (gt -> GT .)
    IDENTIFIER      reduce using rule 79 (gt -> GT .)


state 128

    (80) lte -> LTE .

    LPAREN          reduce using rule 80 (lte -> LTE .)
    INTEGER         reduce using rule 80 (lte -> LTE .)
    REAL            reduce using rule 80 (lte -> LTE .)
    STRING          reduce using rule 80 (lte -> LTE .)
    CHAR            reduce using rule 80 (lte -> LTE .)
    BOOLEAN         reduce using rule 80 (lte -> LTE .)
    IDENTIFIER      reduce using rule 80 (lte -> LTE .)


state 129

    (81) gte -> GTE .

    LPAREN          reduce using rule 81 (gte -> GTE .)
    INTEGER         reduce using rule 81 (gte -> GTE .)
    REAL            reduce using rule 81 (gte -> GTE .)
    STRING          reduce using rule 81 (gte -> GTE .)
    CHAR            reduce using rule 81 (gte -> GTE .)
    BOOLEAN         reduce using rule 81 (gte -> GTE .)
    IDENTIFIER      reduce using rule 81 (gte -> GTE .)


state 130

    (82) and -> AND .

    LPAREN          reduce using rule 82 (and -> AND .)
    INTEGER         reduce using rule 82 (and -> AND .)
    REAL            reduce using rule 82 (and -> AND .)
    STRING          reduce using rule 82 (and -> AND .)
    CHAR            reduce using rule 82 (and -> AND .)
    BOOLEAN         reduce using rule 82 (and -> AND .)
    IDENTIFIER      reduce using rule 82 (and -> AND .)


state 131

    (83) or -> OR .

    LPAREN          reduce using rule 83 (or -> OR .)
    INTEGER         reduce using rule 83 (or -> OR .)
    REAL            reduce using rule 83 (or -> OR .)
    STRING          reduce using rule 83 (or -> OR .)
    CHAR            reduce using rule 83 (or -> OR .)
    BOOLEAN         reduce using rule 83 (or -> OR .)
    IDENTIFIER      reduce using rule 83 (or -> OR .)


state 132

    (84) not -> NOT .

    LPAREN          reduce using rule 84 (not -> NOT .)
    INTEGER         reduce using rule 84 (not -> NOT .)
    REAL            reduce using rule 84 (not -> NOT .)
    STRING          reduce using rule 84 (not -> NOT .)
    CHAR            reduce using rule 84 (not -> NOT .)
    BOOLEAN         reduce using rule 84 (not -> NOT .)
    IDENTIFIER      reduce using rule 84 (not -> NOT .)


state 133

    (61) plus -> PLUS .

    INTEGER         reduce using rule 61 (plus -> PLUS .)
    REAL            reduce using rule 61 (plus -> PLUS .)
    STRING          reduce using rule 61 (plus -> PLUS .)
    CHAR            reduce using rule 61 (plus -> PLUS .)
    BOOLEAN         reduce using rule 61 (plus -> PLUS .)
    IDENTIFIER      reduce using rule 61 (plus -> PLUS .)
    LPAREN          reduce using rule 61 (plus -> PLUS .)


state 134

    (62) minus -> MINUS .

    INTEGER         reduce using rule 62 (minus -> MINUS .)
    REAL            reduce using rule 62 (minus -> MINUS .)
    STRING          reduce using rule 62 (minus -> MINUS .)
    CHAR            reduce using rule 62 (minus -> MINUS .)
    BOOLEAN         reduce using rule 62 (minus -> MINUS .)
    IDENTIFIER      reduce using rule 62 (minus -> MINUS .)
    LPAREN          reduce using rule 62 (minus -> MINUS .)


state 135

    (63) times -> TIMES .

    INTEGER         reduce using rule 63 (times -> TIMES .)
    REAL            reduce using rule 63 (times -> TIMES .)
    STRING          reduce using rule 63 (times -> TIMES .)
    CHAR            reduce using rule 63 (times -> TIMES .)
    BOOLEAN         reduce using rule 63 (times -> TIMES .)
    IDENTIFIER      reduce using rule 63 (times -> TIMES .)
    LPAREN          reduce using rule 63 (times -> TIMES .)


state 136

    (64) division -> DIVISION .

    INTEGER         reduce using rule 64 (division -> DIVISION .)
    REAL            reduce using rule 64 (division -> DIVISION .)
    STRING          reduce using rule 64 (division -> DIVISION .)
    CHAR            reduce using rule 64 (division -> DIVISION .)
    BOOLEAN         reduce using rule 64 (division -> DIVISION .)
    IDENTIFIER      reduce using rule 64 (division -> DIVISION .)
    LPAREN          reduce using rule 64 (division -> DIVISION .)


state 137

    (65) div -> DIV .

    INTEGER         reduce using rule 65 (div -> DIV .)
    REAL            reduce using rule 65 (div -> DIV .)
    STRING          reduce using rule 65 (div -> DIV .)
    CHAR            reduce using rule 65 (div -> DIV .)
    BOOLEAN         reduce using rule 65 (div -> DIV .)
    IDENTIFIER      reduce using rule 65 (div -> DIV .)
    LPAREN          reduce using rule 65 (div -> DIV .)


state 138

    (66) mod -> MOD .

    INTEGER         reduce using rule 66 (mod -> MOD .)
    REAL            reduce using rule 66 (mod -> MOD .)
    STRING          reduce using rule 66 (mod -> MOD .)
    CHAR            reduce using rule 66 (mod -> MOD .)
    BOOLEAN         reduce using rule 66 (mod -> MOD .)
    IDENTIFIER      reduce using rule 66 (mod -> MOD .)
    LPAREN          reduce using rule 66 (mod -> MOD .)


state 139

    (119) condition -> type comparator . expression
    (120) condition -> type comparator . type
    (27) expression -> . type operation type
    (28) expression -> . expression_paren
    (29) expression -> . expression operation type
    (30) expression -> . expression operation expression
    (31) expression -> . func_call
    (32) expression -> . condition
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (33) expression_paren -> . LPAREN expression RPAREN
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (118) condition -> . expression comparator expression
    (119) condition -> . type comparator expression
    (120) condition -> . type comparator type
    (121) condition -> . expression comparator type
    (122) condition -> . type
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    LPAREN          shift and go to state 69
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 179
    expression                     shift and go to state 180
    expression_paren               shift and go to state 67
    func_call                      shift and go to state 68
    condition                      shift and go to state 99
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 140

    (27) expression -> type operation . type
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 181
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 141

    (33) expression_paren -> LPAREN expression . RPAREN
    (29) expression -> expression . operation type
    (30) expression -> expression . operation expression
    (118) condition -> expression . comparator expression
    (121) condition -> expression . comparator type
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

    RPAREN          shift and go to state 182
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

    operation                      shift and go to state 107
    comparator                     shift and go to state 106
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 142

    (27) expression -> type . operation type
    (119) condition -> type . comparator expression
    (120) condition -> type . comparator type
    (122) condition -> type .
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    RPAREN          reduce using rule 122 (condition -> type .)
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

  ! RANGE           [ reduce using rule 122 (condition -> type .) ]
  ! PLUS            [ reduce using rule 122 (condition -> type .) ]
  ! MINUS           [ reduce using rule 122 (condition -> type .) ]
  ! TIMES           [ reduce using rule 122 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 122 (condition -> type .) ]
  ! DIV             [ reduce using rule 122 (condition -> type .) ]
  ! MOD             [ reduce using rule 122 (condition -> type .) ]
  ! EQ              [ reduce using rule 122 (condition -> type .) ]
  ! NEQ             [ reduce using rule 122 (condition -> type .) ]
  ! LT              [ reduce using rule 122 (condition -> type .) ]
  ! GT              [ reduce using rule 122 (condition -> type .) ]
  ! LTE             [ reduce using rule 122 (condition -> type .) ]
  ! GTE             [ reduce using rule 122 (condition -> type .) ]
  ! AND             [ reduce using rule 122 (condition -> type .) ]
  ! OR              [ reduce using rule 122 (condition -> type .) ]
  ! NOT             [ reduce using rule 122 (condition -> type .) ]

    operation                      shift and go to state 140
    comparator                     shift and go to state 139
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 143

    (105) func_call -> prepare_func_call LPAREN . arg_list RPAREN
    (107) arg_list -> . IDENTIFIER COMMA arg_list
    (108) arg_list -> . IDENTIFIER
    (109) arg_list -> . type COMMA arg_list
    (110) arg_list -> . type
    (111) arg_list -> .
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    IDENTIFIER      shift and go to state 183
    RPAREN          reduce using rule 111 (arg_list -> .)
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    prepare_func_call              shift and go to state 70
    arg_list                       shift and go to state 102
    type                           shift and go to state 184
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 144

    (130) while_loop -> WHILE condition DO . statement
    (131) while_loop -> WHILE condition DO . if_body
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (123) if_body -> . BEGIN statements END
    (134) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (88) procedure_call -> . prepare_func_call
    (89) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (112) cond_if -> . IF condition THEN statement
    (113) cond_if -> . IF condition THEN statement ELSE statement
    (114) cond_if -> . IF condition THEN statement ELSE if_body
    (115) cond_if -> . IF condition THEN if_body
    (116) cond_if -> . IF condition THEN if_body ELSE if_body
    (117) cond_if -> . IF condition THEN if_body ELSE statement
    (130) while_loop -> . WHILE condition DO statement
    (131) while_loop -> . WHILE condition DO if_body
    (126) for_loop -> . FOR assignment to type DO statement
    (127) for_loop -> . FOR assignment to type DO if_body
    (128) for_loop -> . FOR assignment downto type DO statement
    (129) for_loop -> . FOR assignment downto type DO if_body
    (132) repeat_loop -> . REPEAT statements UNTIL condition
    (133) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (106) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    BEGIN           shift and go to state 174
    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    statement                      shift and go to state 185
    if_body                        shift and go to state 186
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 145

    (126) for_loop -> FOR assignment to . type DO statement
    (127) for_loop -> FOR assignment to . type DO if_body
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 187
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 146

    (128) for_loop -> FOR assignment downto . type DO statement
    (129) for_loop -> FOR assignment downto . type DO if_body
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 188
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 147

    (124) to -> TO .

    INTEGER         reduce using rule 124 (to -> TO .)
    REAL            reduce using rule 124 (to -> TO .)
    STRING          reduce using rule 124 (to -> TO .)
    CHAR            reduce using rule 124 (to -> TO .)
    BOOLEAN         reduce using rule 124 (to -> TO .)
    IDENTIFIER      reduce using rule 124 (to -> TO .)


state 148

    (125) downto -> DOWNTO .

    INTEGER         reduce using rule 125 (downto -> DOWNTO .)
    REAL            reduce using rule 125 (downto -> DOWNTO .)
    STRING          reduce using rule 125 (downto -> DOWNTO .)
    CHAR            reduce using rule 125 (downto -> DOWNTO .)
    BOOLEAN         reduce using rule 125 (downto -> DOWNTO .)
    IDENTIFIER      reduce using rule 125 (downto -> DOWNTO .)


state 149

    (132) repeat_loop -> REPEAT statements UNTIL . condition
    (118) condition -> . expression comparator expression
    (119) condition -> . type comparator expression
    (120) condition -> . type comparator type
    (121) condition -> . expression comparator type
    (122) condition -> . type
    (27) expression -> . type operation type
    (28) expression -> . expression_paren
    (29) expression -> . expression operation type
    (30) expression -> . expression operation expression
    (31) expression -> . func_call
    (32) expression -> . condition
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (33) expression_paren -> . LPAREN expression RPAREN
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    LPAREN          shift and go to state 69
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    condition                      shift and go to state 189
    expression                     shift and go to state 65
    type                           shift and go to state 66
    expression_paren               shift and go to state 67
    func_call                      shift and go to state 68
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 150

    (133) readln -> READLN LPAREN type . RPAREN

    RPAREN          shift and go to state 190


state 151

    (12) array_access -> IDENTIFIER LBRACKET type . RBRACKET

    RBRACKET        shift and go to state 191


state 152

    (95) function -> func_header SEMICOLON VAR func_variable_declaration . func_body SEMICOLON
    (104) func_body -> . BEGIN statements END

    BEGIN           shift and go to state 79

    func_body                      shift and go to state 192

state 153

    (102) func_variable_declaration -> identifier_list . COLON type_name SEMICOLON func_variable_declaration
    (103) func_variable_declaration -> identifier_list . COLON type_name SEMICOLON

    COLON           shift and go to state 193


state 154

    (96) function -> func_header SEMICOLON func_body SEMICOLON .

    VAR             reduce using rule 96 (function -> func_header SEMICOLON func_body SEMICOLON .)
    BEGIN           reduce using rule 96 (function -> func_header SEMICOLON func_body SEMICOLON .)
    PROCEDURE       reduce using rule 96 (function -> func_header SEMICOLON func_body SEMICOLON .)
    FUNCTION        reduce using rule 96 (function -> func_header SEMICOLON func_body SEMICOLON .)


state 155

    (104) func_body -> BEGIN statements . END

    END             shift and go to state 194


state 156

    (85) procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body . SEMICOLON

    SEMICOLON       shift and go to state 195


state 157

    (87) procedure_body -> BEGIN . statements END
    (14) statements -> . statement SEMICOLON statements
    (15) statements -> . statement SEMICOLON
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (134) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (88) procedure_call -> . prepare_func_call
    (89) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (112) cond_if -> . IF condition THEN statement
    (113) cond_if -> . IF condition THEN statement ELSE statement
    (114) cond_if -> . IF condition THEN statement ELSE if_body
    (115) cond_if -> . IF condition THEN if_body
    (116) cond_if -> . IF condition THEN if_body ELSE if_body
    (117) cond_if -> . IF condition THEN if_body ELSE statement
    (130) while_loop -> . WHILE condition DO statement
    (131) while_loop -> . WHILE condition DO if_body
    (126) for_loop -> . FOR assignment to type DO statement
    (127) for_loop -> . FOR assignment to type DO if_body
    (128) for_loop -> . FOR assignment downto type DO statement
    (129) for_loop -> . FOR assignment downto type DO if_body
    (132) repeat_loop -> . REPEAT statements UNTIL condition
    (133) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (106) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    statements                     shift and go to state 196
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 158

    (86) procedure -> PROCEDURE IDENTIFIER LPAREN func_args . RPAREN SEMICOLON procedure_body SEMICOLON

    RPAREN          shift and go to state 197


state 159

    (99) func_args -> func_arglist . SEMICOLON func_args
    (100) func_args -> func_arglist .

    SEMICOLON       shift and go to state 198
    RPAREN          reduce using rule 100 (func_args -> func_arglist .)


state 160

    (101) func_arglist -> identifier_list . COLON type_name

    COLON           shift and go to state 199


state 161

    (97) func_header -> FUNCTION IDENTIFIER LPAREN func_args . RPAREN COLON type_name

    RPAREN          shift and go to state 200


state 162

    (98) func_header -> FUNCTION IDENTIFIER LPAREN RPAREN . COLON type_name

    COLON           shift and go to state 201


state 163

    (7) variable_declaration -> identifier_list COLON type_name SEMICOLON . variable_declaration
    (8) variable_declaration -> identifier_list COLON type_name SEMICOLON .
    (7) variable_declaration -> . identifier_list COLON type_name SEMICOLON variable_declaration
    (8) variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    BEGIN           reduce using rule 8 (variable_declaration -> identifier_list COLON type_name SEMICOLON .)
    IDENTIFIER      shift and go to state 17

    identifier_list                shift and go to state 16
    variable_declaration           shift and go to state 202

state 164

    (11) array_type -> ARRAY LBRACKET . type RANGE type RBRACKET OF type_name
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 203
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 165

    (134) writeln -> WRITELN LPAREN writeln_args RPAREN .

    SEMICOLON       reduce using rule 134 (writeln -> WRITELN LPAREN writeln_args RPAREN .)
    ELSE            reduce using rule 134 (writeln -> WRITELN LPAREN writeln_args RPAREN .)


state 166

    (135) writeln_args -> type COMMA . writeln_args
    (135) writeln_args -> . type COMMA writeln_args
    (136) writeln_args -> . type
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 94
    writeln_args                   shift and go to state 204
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 167

    (94) length -> LENGTH LPAREN . type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 205
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 168

    (89) procedure_call -> prepare_func_call LPAREN procedure_arg_list RPAREN .

    SEMICOLON       reduce using rule 89 (procedure_call -> prepare_func_call LPAREN procedure_arg_list RPAREN .)
    ELSE            reduce using rule 89 (procedure_call -> prepare_func_call LPAREN procedure_arg_list RPAREN .)


state 169

    (105) func_call -> prepare_func_call LPAREN arg_list RPAREN .

    ASSIGNMENT      reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    RANGE           reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    EQ              reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    LT              reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    GT              reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    LTE             reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    GTE             reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    AND             reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    OR              reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    NOT             reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    DIVISION        reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    DIV             reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    MOD             reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    THEN            reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    DO              reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    SEMICOLON       reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    TO              reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    DOWNTO          reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    ELSE            reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    RBRACKET        reduce using rule 105 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)


state 170

    (90) procedure_arg_list -> IDENTIFIER COMMA . procedure_arg_list
    (107) arg_list -> IDENTIFIER COMMA . arg_list
    (90) procedure_arg_list -> . IDENTIFIER COMMA procedure_arg_list
    (91) procedure_arg_list -> . IDENTIFIER
    (92) procedure_arg_list -> . type COMMA procedure_arg_list
    (93) procedure_arg_list -> . type
    (107) arg_list -> . IDENTIFIER COMMA arg_list
    (108) arg_list -> . IDENTIFIER
    (109) arg_list -> . type COMMA arg_list
    (110) arg_list -> . type
    (111) arg_list -> .
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    IDENTIFIER      shift and go to state 103
    RPAREN          reduce using rule 111 (arg_list -> .)
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    procedure_arg_list             shift and go to state 206
    arg_list                       shift and go to state 207
    type                           shift and go to state 104
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 171

    (92) procedure_arg_list -> type COMMA . procedure_arg_list
    (109) arg_list -> type COMMA . arg_list
    (90) procedure_arg_list -> . IDENTIFIER COMMA procedure_arg_list
    (91) procedure_arg_list -> . IDENTIFIER
    (92) procedure_arg_list -> . type COMMA procedure_arg_list
    (93) procedure_arg_list -> . type
    (107) arg_list -> . IDENTIFIER COMMA arg_list
    (108) arg_list -> . IDENTIFIER
    (109) arg_list -> . type COMMA arg_list
    (110) arg_list -> . type
    (111) arg_list -> .
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    IDENTIFIER      shift and go to state 103
    RPAREN          reduce using rule 111 (arg_list -> .)
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    type                           shift and go to state 104
    procedure_arg_list             shift and go to state 208
    arg_list                       shift and go to state 209
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 172

    (112) cond_if -> IF condition THEN statement .
    (113) cond_if -> IF condition THEN statement . ELSE statement
    (114) cond_if -> IF condition THEN statement . ELSE if_body

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 112 (cond_if -> IF condition THEN statement .)
    ELSE            shift and go to state 210

  ! ELSE            [ reduce using rule 112 (cond_if -> IF condition THEN statement .) ]


state 173

    (115) cond_if -> IF condition THEN if_body .
    (116) cond_if -> IF condition THEN if_body . ELSE if_body
    (117) cond_if -> IF condition THEN if_body . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 115 (cond_if -> IF condition THEN if_body .)
    ELSE            shift and go to state 211

  ! ELSE            [ reduce using rule 115 (cond_if -> IF condition THEN if_body .) ]


state 174

    (123) if_body -> BEGIN . statements END
    (14) statements -> . statement SEMICOLON statements
    (15) statements -> . statement SEMICOLON
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (134) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (88) procedure_call -> . prepare_func_call
    (89) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (112) cond_if -> . IF condition THEN statement
    (113) cond_if -> . IF condition THEN statement ELSE statement
    (114) cond_if -> . IF condition THEN statement ELSE if_body
    (115) cond_if -> . IF condition THEN if_body
    (116) cond_if -> . IF condition THEN if_body ELSE if_body
    (117) cond_if -> . IF condition THEN if_body ELSE statement
    (130) while_loop -> . WHILE condition DO statement
    (131) while_loop -> . WHILE condition DO if_body
    (126) for_loop -> . FOR assignment to type DO statement
    (127) for_loop -> . FOR assignment to type DO if_body
    (128) for_loop -> . FOR assignment downto type DO statement
    (129) for_loop -> . FOR assignment downto type DO if_body
    (132) repeat_loop -> . REPEAT statements UNTIL condition
    (133) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (106) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    statements                     shift and go to state 212
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 175

    (118) condition -> expression comparator expression .
    (29) expression -> expression . operation type
    (30) expression -> expression . operation expression
    (118) condition -> expression . comparator expression
    (121) condition -> expression . comparator type
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 118 (condition -> expression comparator expression .)
    DO              reduce using rule 118 (condition -> expression comparator expression .)
    SEMICOLON       reduce using rule 118 (condition -> expression comparator expression .)
    TO              reduce using rule 118 (condition -> expression comparator expression .)
    DOWNTO          reduce using rule 118 (condition -> expression comparator expression .)
    ELSE            reduce using rule 118 (condition -> expression comparator expression .)
    RPAREN          reduce using rule 118 (condition -> expression comparator expression .)
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

  ! RANGE           [ reduce using rule 118 (condition -> expression comparator expression .) ]
  ! EQ              [ reduce using rule 118 (condition -> expression comparator expression .) ]
  ! NEQ             [ reduce using rule 118 (condition -> expression comparator expression .) ]
  ! LT              [ reduce using rule 118 (condition -> expression comparator expression .) ]
  ! GT              [ reduce using rule 118 (condition -> expression comparator expression .) ]
  ! LTE             [ reduce using rule 118 (condition -> expression comparator expression .) ]
  ! GTE             [ reduce using rule 118 (condition -> expression comparator expression .) ]
  ! AND             [ reduce using rule 118 (condition -> expression comparator expression .) ]
  ! OR              [ reduce using rule 118 (condition -> expression comparator expression .) ]
  ! NOT             [ reduce using rule 118 (condition -> expression comparator expression .) ]
  ! PLUS            [ reduce using rule 118 (condition -> expression comparator expression .) ]
  ! MINUS           [ reduce using rule 118 (condition -> expression comparator expression .) ]
  ! TIMES           [ reduce using rule 118 (condition -> expression comparator expression .) ]
  ! DIVISION        [ reduce using rule 118 (condition -> expression comparator expression .) ]
  ! DIV             [ reduce using rule 118 (condition -> expression comparator expression .) ]
  ! MOD             [ reduce using rule 118 (condition -> expression comparator expression .) ]

    comparator                     shift and go to state 106
    operation                      shift and go to state 107
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 176

    (121) condition -> expression comparator type .
    (27) expression -> type . operation type
    (119) condition -> type . comparator expression
    (120) condition -> type . comparator type
    (122) condition -> type .
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

  ! reduce/reduce conflict for RANGE resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for PLUS resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for MINUS resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for TIMES resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DIVISION resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DIV resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for MOD resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for EQ resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for NEQ resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for LT resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for GT resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for LTE resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for GTE resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for AND resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for OR resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for NOT resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for THEN resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DO resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for TO resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for ELSE resolved using rule 121 (condition -> expression comparator type .)
  ! reduce/reduce conflict for RPAREN resolved using rule 121 (condition -> expression comparator type .)
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 121 (condition -> expression comparator type .)
    DO              reduce using rule 121 (condition -> expression comparator type .)
    SEMICOLON       reduce using rule 121 (condition -> expression comparator type .)
    TO              reduce using rule 121 (condition -> expression comparator type .)
    DOWNTO          reduce using rule 121 (condition -> expression comparator type .)
    ELSE            reduce using rule 121 (condition -> expression comparator type .)
    RPAREN          reduce using rule 121 (condition -> expression comparator type .)
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

  ! RANGE           [ reduce using rule 121 (condition -> expression comparator type .) ]
  ! EQ              [ reduce using rule 121 (condition -> expression comparator type .) ]
  ! NEQ             [ reduce using rule 121 (condition -> expression comparator type .) ]
  ! LT              [ reduce using rule 121 (condition -> expression comparator type .) ]
  ! GT              [ reduce using rule 121 (condition -> expression comparator type .) ]
  ! LTE             [ reduce using rule 121 (condition -> expression comparator type .) ]
  ! GTE             [ reduce using rule 121 (condition -> expression comparator type .) ]
  ! AND             [ reduce using rule 121 (condition -> expression comparator type .) ]
  ! OR              [ reduce using rule 121 (condition -> expression comparator type .) ]
  ! NOT             [ reduce using rule 121 (condition -> expression comparator type .) ]
  ! PLUS            [ reduce using rule 121 (condition -> expression comparator type .) ]
  ! MINUS           [ reduce using rule 121 (condition -> expression comparator type .) ]
  ! TIMES           [ reduce using rule 121 (condition -> expression comparator type .) ]
  ! DIVISION        [ reduce using rule 121 (condition -> expression comparator type .) ]
  ! DIV             [ reduce using rule 121 (condition -> expression comparator type .) ]
  ! MOD             [ reduce using rule 121 (condition -> expression comparator type .) ]
  ! RANGE           [ reduce using rule 122 (condition -> type .) ]
  ! PLUS            [ reduce using rule 122 (condition -> type .) ]
  ! MINUS           [ reduce using rule 122 (condition -> type .) ]
  ! TIMES           [ reduce using rule 122 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 122 (condition -> type .) ]
  ! DIV             [ reduce using rule 122 (condition -> type .) ]
  ! MOD             [ reduce using rule 122 (condition -> type .) ]
  ! EQ              [ reduce using rule 122 (condition -> type .) ]
  ! NEQ             [ reduce using rule 122 (condition -> type .) ]
  ! LT              [ reduce using rule 122 (condition -> type .) ]
  ! GT              [ reduce using rule 122 (condition -> type .) ]
  ! LTE             [ reduce using rule 122 (condition -> type .) ]
  ! GTE             [ reduce using rule 122 (condition -> type .) ]
  ! AND             [ reduce using rule 122 (condition -> type .) ]
  ! OR              [ reduce using rule 122 (condition -> type .) ]
  ! NOT             [ reduce using rule 122 (condition -> type .) ]
  ! THEN            [ reduce using rule 122 (condition -> type .) ]
  ! DO              [ reduce using rule 122 (condition -> type .) ]
  ! SEMICOLON       [ reduce using rule 122 (condition -> type .) ]
  ! TO              [ reduce using rule 122 (condition -> type .) ]
  ! DOWNTO          [ reduce using rule 122 (condition -> type .) ]
  ! ELSE            [ reduce using rule 122 (condition -> type .) ]
  ! RPAREN          [ reduce using rule 122 (condition -> type .) ]

    comparator                     shift and go to state 139
    operation                      shift and go to state 140
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 177

    (30) expression -> expression operation expression .
    (29) expression -> expression . operation type
    (30) expression -> expression . operation expression
    (118) condition -> expression . comparator expression
    (121) condition -> expression . comparator type
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    SEMICOLON       reduce using rule 30 (expression -> expression operation expression .)
    TO              reduce using rule 30 (expression -> expression operation expression .)
    DOWNTO          reduce using rule 30 (expression -> expression operation expression .)
    ELSE            reduce using rule 30 (expression -> expression operation expression .)
    RPAREN          reduce using rule 30 (expression -> expression operation expression .)
    THEN            reduce using rule 30 (expression -> expression operation expression .)
    DO              reduce using rule 30 (expression -> expression operation expression .)
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

  ! RANGE           [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! EQ              [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! NEQ             [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! LT              [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! GT              [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! LTE             [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! GTE             [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! AND             [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! OR              [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! NOT             [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! PLUS            [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! MINUS           [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! TIMES           [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! DIVISION        [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! DIV             [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! MOD             [ reduce using rule 30 (expression -> expression operation expression .) ]

    operation                      shift and go to state 107
    comparator                     shift and go to state 106
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 178

    (29) expression -> expression operation type .
    (27) expression -> type . operation type
    (119) condition -> type . comparator expression
    (120) condition -> type . comparator type
    (122) condition -> type .
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

  ! reduce/reduce conflict for RANGE resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for PLUS resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for MINUS resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for TIMES resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for DIVISION resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for DIV resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for MOD resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for EQ resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for NEQ resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for LT resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for GT resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for LTE resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for GTE resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for AND resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for OR resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for NOT resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for THEN resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for DO resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for TO resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for ELSE resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for RPAREN resolved using rule 29 (expression -> expression operation type .)
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    SEMICOLON       reduce using rule 29 (expression -> expression operation type .)
    TO              reduce using rule 29 (expression -> expression operation type .)
    DOWNTO          reduce using rule 29 (expression -> expression operation type .)
    ELSE            reduce using rule 29 (expression -> expression operation type .)
    RPAREN          reduce using rule 29 (expression -> expression operation type .)
    THEN            reduce using rule 29 (expression -> expression operation type .)
    DO              reduce using rule 29 (expression -> expression operation type .)
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

  ! RANGE           [ reduce using rule 29 (expression -> expression operation type .) ]
  ! EQ              [ reduce using rule 29 (expression -> expression operation type .) ]
  ! NEQ             [ reduce using rule 29 (expression -> expression operation type .) ]
  ! LT              [ reduce using rule 29 (expression -> expression operation type .) ]
  ! GT              [ reduce using rule 29 (expression -> expression operation type .) ]
  ! LTE             [ reduce using rule 29 (expression -> expression operation type .) ]
  ! GTE             [ reduce using rule 29 (expression -> expression operation type .) ]
  ! AND             [ reduce using rule 29 (expression -> expression operation type .) ]
  ! OR              [ reduce using rule 29 (expression -> expression operation type .) ]
  ! NOT             [ reduce using rule 29 (expression -> expression operation type .) ]
  ! PLUS            [ reduce using rule 29 (expression -> expression operation type .) ]
  ! MINUS           [ reduce using rule 29 (expression -> expression operation type .) ]
  ! TIMES           [ reduce using rule 29 (expression -> expression operation type .) ]
  ! DIVISION        [ reduce using rule 29 (expression -> expression operation type .) ]
  ! DIV             [ reduce using rule 29 (expression -> expression operation type .) ]
  ! MOD             [ reduce using rule 29 (expression -> expression operation type .) ]
  ! RANGE           [ reduce using rule 122 (condition -> type .) ]
  ! PLUS            [ reduce using rule 122 (condition -> type .) ]
  ! MINUS           [ reduce using rule 122 (condition -> type .) ]
  ! TIMES           [ reduce using rule 122 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 122 (condition -> type .) ]
  ! DIV             [ reduce using rule 122 (condition -> type .) ]
  ! MOD             [ reduce using rule 122 (condition -> type .) ]
  ! EQ              [ reduce using rule 122 (condition -> type .) ]
  ! NEQ             [ reduce using rule 122 (condition -> type .) ]
  ! LT              [ reduce using rule 122 (condition -> type .) ]
  ! GT              [ reduce using rule 122 (condition -> type .) ]
  ! LTE             [ reduce using rule 122 (condition -> type .) ]
  ! GTE             [ reduce using rule 122 (condition -> type .) ]
  ! AND             [ reduce using rule 122 (condition -> type .) ]
  ! OR              [ reduce using rule 122 (condition -> type .) ]
  ! NOT             [ reduce using rule 122 (condition -> type .) ]
  ! THEN            [ reduce using rule 122 (condition -> type .) ]
  ! DO              [ reduce using rule 122 (condition -> type .) ]
  ! SEMICOLON       [ reduce using rule 122 (condition -> type .) ]
  ! TO              [ reduce using rule 122 (condition -> type .) ]
  ! DOWNTO          [ reduce using rule 122 (condition -> type .) ]
  ! ELSE            [ reduce using rule 122 (condition -> type .) ]
  ! RPAREN          [ reduce using rule 122 (condition -> type .) ]

    operation                      shift and go to state 140
    comparator                     shift and go to state 139
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 179

    (120) condition -> type comparator type .
    (27) expression -> type . operation type
    (119) condition -> type . comparator expression
    (120) condition -> type . comparator type
    (122) condition -> type .
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

  ! reduce/reduce conflict for RANGE resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for PLUS resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for MINUS resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for TIMES resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for DIVISION resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for DIV resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for MOD resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for EQ resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for NEQ resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for LT resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for GT resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for LTE resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for GTE resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for AND resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for OR resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for NOT resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for THEN resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for DO resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for TO resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for ELSE resolved using rule 120 (condition -> type comparator type .)
  ! reduce/reduce conflict for RPAREN resolved using rule 120 (condition -> type comparator type .)
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 120 (condition -> type comparator type .)
    DO              reduce using rule 120 (condition -> type comparator type .)
    SEMICOLON       reduce using rule 120 (condition -> type comparator type .)
    TO              reduce using rule 120 (condition -> type comparator type .)
    DOWNTO          reduce using rule 120 (condition -> type comparator type .)
    ELSE            reduce using rule 120 (condition -> type comparator type .)
    RPAREN          reduce using rule 120 (condition -> type comparator type .)
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

  ! RANGE           [ reduce using rule 120 (condition -> type comparator type .) ]
  ! EQ              [ reduce using rule 120 (condition -> type comparator type .) ]
  ! NEQ             [ reduce using rule 120 (condition -> type comparator type .) ]
  ! LT              [ reduce using rule 120 (condition -> type comparator type .) ]
  ! GT              [ reduce using rule 120 (condition -> type comparator type .) ]
  ! LTE             [ reduce using rule 120 (condition -> type comparator type .) ]
  ! GTE             [ reduce using rule 120 (condition -> type comparator type .) ]
  ! AND             [ reduce using rule 120 (condition -> type comparator type .) ]
  ! OR              [ reduce using rule 120 (condition -> type comparator type .) ]
  ! NOT             [ reduce using rule 120 (condition -> type comparator type .) ]
  ! PLUS            [ reduce using rule 120 (condition -> type comparator type .) ]
  ! MINUS           [ reduce using rule 120 (condition -> type comparator type .) ]
  ! TIMES           [ reduce using rule 120 (condition -> type comparator type .) ]
  ! DIVISION        [ reduce using rule 120 (condition -> type comparator type .) ]
  ! DIV             [ reduce using rule 120 (condition -> type comparator type .) ]
  ! MOD             [ reduce using rule 120 (condition -> type comparator type .) ]
  ! RANGE           [ reduce using rule 122 (condition -> type .) ]
  ! PLUS            [ reduce using rule 122 (condition -> type .) ]
  ! MINUS           [ reduce using rule 122 (condition -> type .) ]
  ! TIMES           [ reduce using rule 122 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 122 (condition -> type .) ]
  ! DIV             [ reduce using rule 122 (condition -> type .) ]
  ! MOD             [ reduce using rule 122 (condition -> type .) ]
  ! EQ              [ reduce using rule 122 (condition -> type .) ]
  ! NEQ             [ reduce using rule 122 (condition -> type .) ]
  ! LT              [ reduce using rule 122 (condition -> type .) ]
  ! GT              [ reduce using rule 122 (condition -> type .) ]
  ! LTE             [ reduce using rule 122 (condition -> type .) ]
  ! GTE             [ reduce using rule 122 (condition -> type .) ]
  ! AND             [ reduce using rule 122 (condition -> type .) ]
  ! OR              [ reduce using rule 122 (condition -> type .) ]
  ! NOT             [ reduce using rule 122 (condition -> type .) ]
  ! THEN            [ reduce using rule 122 (condition -> type .) ]
  ! DO              [ reduce using rule 122 (condition -> type .) ]
  ! SEMICOLON       [ reduce using rule 122 (condition -> type .) ]
  ! TO              [ reduce using rule 122 (condition -> type .) ]
  ! DOWNTO          [ reduce using rule 122 (condition -> type .) ]
  ! ELSE            [ reduce using rule 122 (condition -> type .) ]
  ! RPAREN          [ reduce using rule 122 (condition -> type .) ]

    comparator                     shift and go to state 139
    operation                      shift and go to state 140
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 180

    (119) condition -> type comparator expression .
    (29) expression -> expression . operation type
    (30) expression -> expression . operation expression
    (118) condition -> expression . comparator expression
    (121) condition -> expression . comparator type
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 119 (condition -> type comparator expression .)
    DO              reduce using rule 119 (condition -> type comparator expression .)
    SEMICOLON       reduce using rule 119 (condition -> type comparator expression .)
    TO              reduce using rule 119 (condition -> type comparator expression .)
    DOWNTO          reduce using rule 119 (condition -> type comparator expression .)
    ELSE            reduce using rule 119 (condition -> type comparator expression .)
    RPAREN          reduce using rule 119 (condition -> type comparator expression .)
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

  ! RANGE           [ reduce using rule 119 (condition -> type comparator expression .) ]
  ! EQ              [ reduce using rule 119 (condition -> type comparator expression .) ]
  ! NEQ             [ reduce using rule 119 (condition -> type comparator expression .) ]
  ! LT              [ reduce using rule 119 (condition -> type comparator expression .) ]
  ! GT              [ reduce using rule 119 (condition -> type comparator expression .) ]
  ! LTE             [ reduce using rule 119 (condition -> type comparator expression .) ]
  ! GTE             [ reduce using rule 119 (condition -> type comparator expression .) ]
  ! AND             [ reduce using rule 119 (condition -> type comparator expression .) ]
  ! OR              [ reduce using rule 119 (condition -> type comparator expression .) ]
  ! NOT             [ reduce using rule 119 (condition -> type comparator expression .) ]
  ! PLUS            [ reduce using rule 119 (condition -> type comparator expression .) ]
  ! MINUS           [ reduce using rule 119 (condition -> type comparator expression .) ]
  ! TIMES           [ reduce using rule 119 (condition -> type comparator expression .) ]
  ! DIVISION        [ reduce using rule 119 (condition -> type comparator expression .) ]
  ! DIV             [ reduce using rule 119 (condition -> type comparator expression .) ]
  ! MOD             [ reduce using rule 119 (condition -> type comparator expression .) ]

    comparator                     shift and go to state 106
    operation                      shift and go to state 107
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 181

    (27) expression -> type operation type .

    RANGE           reduce using rule 27 (expression -> type operation type .)
    EQ              reduce using rule 27 (expression -> type operation type .)
    NEQ             reduce using rule 27 (expression -> type operation type .)
    LT              reduce using rule 27 (expression -> type operation type .)
    GT              reduce using rule 27 (expression -> type operation type .)
    LTE             reduce using rule 27 (expression -> type operation type .)
    GTE             reduce using rule 27 (expression -> type operation type .)
    AND             reduce using rule 27 (expression -> type operation type .)
    OR              reduce using rule 27 (expression -> type operation type .)
    NOT             reduce using rule 27 (expression -> type operation type .)
    PLUS            reduce using rule 27 (expression -> type operation type .)
    MINUS           reduce using rule 27 (expression -> type operation type .)
    TIMES           reduce using rule 27 (expression -> type operation type .)
    DIVISION        reduce using rule 27 (expression -> type operation type .)
    DIV             reduce using rule 27 (expression -> type operation type .)
    MOD             reduce using rule 27 (expression -> type operation type .)
    SEMICOLON       reduce using rule 27 (expression -> type operation type .)
    TO              reduce using rule 27 (expression -> type operation type .)
    DOWNTO          reduce using rule 27 (expression -> type operation type .)
    ELSE            reduce using rule 27 (expression -> type operation type .)
    RPAREN          reduce using rule 27 (expression -> type operation type .)
    THEN            reduce using rule 27 (expression -> type operation type .)
    DO              reduce using rule 27 (expression -> type operation type .)


state 182

    (33) expression_paren -> LPAREN expression RPAREN .

    RANGE           reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    EQ              reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    LT              reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    GT              reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    LTE             reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    GTE             reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    AND             reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    OR              reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    NOT             reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    DIVISION        reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    DIV             reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    MOD             reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    TO              reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    THEN            reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    DO              reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)


state 183

    (107) arg_list -> IDENTIFIER . COMMA arg_list
    (108) arg_list -> IDENTIFIER .
    (60) identifier -> IDENTIFIER .
    (12) array_access -> IDENTIFIER . LBRACKET type RBRACKET
    (106) prepare_func_call -> IDENTIFIER .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 60 (identifier -> IDENTIFIER .)
    COMMA           shift and go to state 213
    RPAREN          reduce using rule 60 (identifier -> IDENTIFIER .)
    LBRACKET        shift and go to state 76
    LPAREN          reduce using rule 106 (prepare_func_call -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 108 (arg_list -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 60 (identifier -> IDENTIFIER .) ]


state 184

    (109) arg_list -> type . COMMA arg_list
    (110) arg_list -> type .

    COMMA           shift and go to state 214
    RPAREN          reduce using rule 110 (arg_list -> type .)


state 185

    (130) while_loop -> WHILE condition DO statement .

    SEMICOLON       reduce using rule 130 (while_loop -> WHILE condition DO statement .)
    ELSE            reduce using rule 130 (while_loop -> WHILE condition DO statement .)


state 186

    (131) while_loop -> WHILE condition DO if_body .

    SEMICOLON       reduce using rule 131 (while_loop -> WHILE condition DO if_body .)
    ELSE            reduce using rule 131 (while_loop -> WHILE condition DO if_body .)


state 187

    (126) for_loop -> FOR assignment to type . DO statement
    (127) for_loop -> FOR assignment to type . DO if_body

    DO              shift and go to state 215


state 188

    (128) for_loop -> FOR assignment downto type . DO statement
    (129) for_loop -> FOR assignment downto type . DO if_body

    DO              shift and go to state 216


state 189

    (132) repeat_loop -> REPEAT statements UNTIL condition .
    (32) expression -> condition .

    SEMICOLON       reduce using rule 132 (repeat_loop -> REPEAT statements UNTIL condition .)
    ELSE            reduce using rule 132 (repeat_loop -> REPEAT statements UNTIL condition .)
    RANGE           reduce using rule 32 (expression -> condition .)
    EQ              reduce using rule 32 (expression -> condition .)
    NEQ             reduce using rule 32 (expression -> condition .)
    LT              reduce using rule 32 (expression -> condition .)
    GT              reduce using rule 32 (expression -> condition .)
    LTE             reduce using rule 32 (expression -> condition .)
    GTE             reduce using rule 32 (expression -> condition .)
    AND             reduce using rule 32 (expression -> condition .)
    OR              reduce using rule 32 (expression -> condition .)
    NOT             reduce using rule 32 (expression -> condition .)
    PLUS            reduce using rule 32 (expression -> condition .)
    MINUS           reduce using rule 32 (expression -> condition .)
    TIMES           reduce using rule 32 (expression -> condition .)
    DIVISION        reduce using rule 32 (expression -> condition .)
    DIV             reduce using rule 32 (expression -> condition .)
    MOD             reduce using rule 32 (expression -> condition .)


state 190

    (133) readln -> READLN LPAREN type RPAREN .

    SEMICOLON       reduce using rule 133 (readln -> READLN LPAREN type RPAREN .)
    ELSE            reduce using rule 133 (readln -> READLN LPAREN type RPAREN .)


state 191

    (12) array_access -> IDENTIFIER LBRACKET type RBRACKET .

    ASSIGNMENT      reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    RANGE           reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    EQ              reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    NEQ             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    LT              reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    GT              reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    LTE             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    GTE             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    AND             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    OR              reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    NOT             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    PLUS            reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    MINUS           reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    TIMES           reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    DIVISION        reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    DIV             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    MOD             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    THEN            reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    DO              reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    COMMA           reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    RPAREN          reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    SEMICOLON       reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    TO              reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    DOWNTO          reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    ELSE            reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    RBRACKET        reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)


state 192

    (95) function -> func_header SEMICOLON VAR func_variable_declaration func_body . SEMICOLON

    SEMICOLON       shift and go to state 217


state 193

    (102) func_variable_declaration -> identifier_list COLON . type_name SEMICOLON func_variable_declaration
    (103) func_variable_declaration -> identifier_list COLON . type_name SEMICOLON
    (41) type_name -> . NINTEGER
    (42) type_name -> . NREAL
    (43) type_name -> . NSTRING
    (44) type_name -> . NCHAR
    (45) type_name -> . NBOOLEAN
    (46) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 84
    NREAL           shift and go to state 85
    NSTRING         shift and go to state 86
    NCHAR           shift and go to state 87
    NBOOLEAN        shift and go to state 88
    ARRAY           shift and go to state 90

    type_name                      shift and go to state 218
    array_type                     shift and go to state 89

state 194

    (104) func_body -> BEGIN statements END .

    SEMICOLON       reduce using rule 104 (func_body -> BEGIN statements END .)


state 195

    (85) procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .

    VAR             reduce using rule 85 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)
    BEGIN           reduce using rule 85 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)
    PROCEDURE       reduce using rule 85 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)
    FUNCTION        reduce using rule 85 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)


state 196

    (87) procedure_body -> BEGIN statements . END

    END             shift and go to state 219


state 197

    (86) procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN . SEMICOLON procedure_body SEMICOLON

    SEMICOLON       shift and go to state 220


state 198

    (99) func_args -> func_arglist SEMICOLON . func_args
    (99) func_args -> . func_arglist SEMICOLON func_args
    (100) func_args -> . func_arglist
    (101) func_arglist -> . identifier_list COLON type_name
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    func_arglist                   shift and go to state 159
    func_args                      shift and go to state 221
    identifier_list                shift and go to state 160

state 199

    (101) func_arglist -> identifier_list COLON . type_name
    (41) type_name -> . NINTEGER
    (42) type_name -> . NREAL
    (43) type_name -> . NSTRING
    (44) type_name -> . NCHAR
    (45) type_name -> . NBOOLEAN
    (46) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 84
    NREAL           shift and go to state 85
    NSTRING         shift and go to state 86
    NCHAR           shift and go to state 87
    NBOOLEAN        shift and go to state 88
    ARRAY           shift and go to state 90

    type_name                      shift and go to state 222
    array_type                     shift and go to state 89

state 200

    (97) func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN . COLON type_name

    COLON           shift and go to state 223


state 201

    (98) func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON . type_name
    (41) type_name -> . NINTEGER
    (42) type_name -> . NREAL
    (43) type_name -> . NSTRING
    (44) type_name -> . NCHAR
    (45) type_name -> . NBOOLEAN
    (46) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 84
    NREAL           shift and go to state 85
    NSTRING         shift and go to state 86
    NCHAR           shift and go to state 87
    NBOOLEAN        shift and go to state 88
    ARRAY           shift and go to state 90

    type_name                      shift and go to state 224
    array_type                     shift and go to state 89

state 202

    (7) variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration .

    BEGIN           reduce using rule 7 (variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration .)


state 203

    (11) array_type -> ARRAY LBRACKET type . RANGE type RBRACKET OF type_name

    RANGE           shift and go to state 225


state 204

    (135) writeln_args -> type COMMA writeln_args .

    RPAREN          reduce using rule 135 (writeln_args -> type COMMA writeln_args .)


state 205

    (94) length -> LENGTH LPAREN type . RPAREN

    RPAREN          shift and go to state 226


state 206

    (90) procedure_arg_list -> IDENTIFIER COMMA procedure_arg_list .

    RPAREN          reduce using rule 90 (procedure_arg_list -> IDENTIFIER COMMA procedure_arg_list .)


state 207

    (107) arg_list -> IDENTIFIER COMMA arg_list .

    RPAREN          reduce using rule 107 (arg_list -> IDENTIFIER COMMA arg_list .)


state 208

    (92) procedure_arg_list -> type COMMA procedure_arg_list .

    RPAREN          reduce using rule 92 (procedure_arg_list -> type COMMA procedure_arg_list .)


state 209

    (109) arg_list -> type COMMA arg_list .

    RPAREN          reduce using rule 109 (arg_list -> type COMMA arg_list .)


state 210

    (113) cond_if -> IF condition THEN statement ELSE . statement
    (114) cond_if -> IF condition THEN statement ELSE . if_body
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (123) if_body -> . BEGIN statements END
    (134) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (88) procedure_call -> . prepare_func_call
    (89) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (112) cond_if -> . IF condition THEN statement
    (113) cond_if -> . IF condition THEN statement ELSE statement
    (114) cond_if -> . IF condition THEN statement ELSE if_body
    (115) cond_if -> . IF condition THEN if_body
    (116) cond_if -> . IF condition THEN if_body ELSE if_body
    (117) cond_if -> . IF condition THEN if_body ELSE statement
    (130) while_loop -> . WHILE condition DO statement
    (131) while_loop -> . WHILE condition DO if_body
    (126) for_loop -> . FOR assignment to type DO statement
    (127) for_loop -> . FOR assignment to type DO if_body
    (128) for_loop -> . FOR assignment downto type DO statement
    (129) for_loop -> . FOR assignment downto type DO if_body
    (132) repeat_loop -> . REPEAT statements UNTIL condition
    (133) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (106) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    BEGIN           shift and go to state 174
    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    statement                      shift and go to state 227
    if_body                        shift and go to state 228
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 211

    (116) cond_if -> IF condition THEN if_body ELSE . if_body
    (117) cond_if -> IF condition THEN if_body ELSE . statement
    (123) if_body -> . BEGIN statements END
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (134) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (88) procedure_call -> . prepare_func_call
    (89) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (112) cond_if -> . IF condition THEN statement
    (113) cond_if -> . IF condition THEN statement ELSE statement
    (114) cond_if -> . IF condition THEN statement ELSE if_body
    (115) cond_if -> . IF condition THEN if_body
    (116) cond_if -> . IF condition THEN if_body ELSE if_body
    (117) cond_if -> . IF condition THEN if_body ELSE statement
    (130) while_loop -> . WHILE condition DO statement
    (131) while_loop -> . WHILE condition DO if_body
    (126) for_loop -> . FOR assignment to type DO statement
    (127) for_loop -> . FOR assignment to type DO if_body
    (128) for_loop -> . FOR assignment downto type DO statement
    (129) for_loop -> . FOR assignment downto type DO if_body
    (132) repeat_loop -> . REPEAT statements UNTIL condition
    (133) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (106) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    BEGIN           shift and go to state 174
    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    if_body                        shift and go to state 229
    statement                      shift and go to state 230
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 212

    (123) if_body -> BEGIN statements . END

    END             shift and go to state 231


state 213

    (107) arg_list -> IDENTIFIER COMMA . arg_list
    (107) arg_list -> . IDENTIFIER COMMA arg_list
    (108) arg_list -> . IDENTIFIER
    (109) arg_list -> . type COMMA arg_list
    (110) arg_list -> . type
    (111) arg_list -> .
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    IDENTIFIER      shift and go to state 183
    RPAREN          reduce using rule 111 (arg_list -> .)
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    arg_list                       shift and go to state 207
    type                           shift and go to state 184
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 214

    (109) arg_list -> type COMMA . arg_list
    (107) arg_list -> . IDENTIFIER COMMA arg_list
    (108) arg_list -> . IDENTIFIER
    (109) arg_list -> . type COMMA arg_list
    (110) arg_list -> . type
    (111) arg_list -> .
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    IDENTIFIER      shift and go to state 183
    RPAREN          reduce using rule 111 (arg_list -> .)
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    type                           shift and go to state 184
    arg_list                       shift and go to state 209
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 215

    (126) for_loop -> FOR assignment to type DO . statement
    (127) for_loop -> FOR assignment to type DO . if_body
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (123) if_body -> . BEGIN statements END
    (134) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (88) procedure_call -> . prepare_func_call
    (89) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (112) cond_if -> . IF condition THEN statement
    (113) cond_if -> . IF condition THEN statement ELSE statement
    (114) cond_if -> . IF condition THEN statement ELSE if_body
    (115) cond_if -> . IF condition THEN if_body
    (116) cond_if -> . IF condition THEN if_body ELSE if_body
    (117) cond_if -> . IF condition THEN if_body ELSE statement
    (130) while_loop -> . WHILE condition DO statement
    (131) while_loop -> . WHILE condition DO if_body
    (126) for_loop -> . FOR assignment to type DO statement
    (127) for_loop -> . FOR assignment to type DO if_body
    (128) for_loop -> . FOR assignment downto type DO statement
    (129) for_loop -> . FOR assignment downto type DO if_body
    (132) repeat_loop -> . REPEAT statements UNTIL condition
    (133) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (106) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    BEGIN           shift and go to state 174
    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    assignment                     shift and go to state 23
    type                           shift and go to state 31
    statement                      shift and go to state 232
    if_body                        shift and go to state 233
    writeln                        shift and go to state 22
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 216

    (128) for_loop -> FOR assignment downto type DO . statement
    (129) for_loop -> FOR assignment downto type DO . if_body
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (123) if_body -> . BEGIN statements END
    (134) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (88) procedure_call -> . prepare_func_call
    (89) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (112) cond_if -> . IF condition THEN statement
    (113) cond_if -> . IF condition THEN statement ELSE statement
    (114) cond_if -> . IF condition THEN statement ELSE if_body
    (115) cond_if -> . IF condition THEN if_body
    (116) cond_if -> . IF condition THEN if_body ELSE if_body
    (117) cond_if -> . IF condition THEN if_body ELSE statement
    (130) while_loop -> . WHILE condition DO statement
    (131) while_loop -> . WHILE condition DO if_body
    (126) for_loop -> . FOR assignment to type DO statement
    (127) for_loop -> . FOR assignment to type DO if_body
    (128) for_loop -> . FOR assignment downto type DO statement
    (129) for_loop -> . FOR assignment downto type DO if_body
    (132) repeat_loop -> . REPEAT statements UNTIL condition
    (133) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (106) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    BEGIN           shift and go to state 174
    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    assignment                     shift and go to state 23
    type                           shift and go to state 31
    statement                      shift and go to state 234
    if_body                        shift and go to state 235
    writeln                        shift and go to state 22
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 217

    (95) function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .

    VAR             reduce using rule 95 (function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .)
    BEGIN           reduce using rule 95 (function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .)
    PROCEDURE       reduce using rule 95 (function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .)
    FUNCTION        reduce using rule 95 (function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .)


state 218

    (102) func_variable_declaration -> identifier_list COLON type_name . SEMICOLON func_variable_declaration
    (103) func_variable_declaration -> identifier_list COLON type_name . SEMICOLON

    SEMICOLON       shift and go to state 236


state 219

    (87) procedure_body -> BEGIN statements END .

    SEMICOLON       reduce using rule 87 (procedure_body -> BEGIN statements END .)


state 220

    (86) procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON . procedure_body SEMICOLON
    (87) procedure_body -> . BEGIN statements END

    BEGIN           shift and go to state 157

    procedure_body                 shift and go to state 237

state 221

    (99) func_args -> func_arglist SEMICOLON func_args .

    RPAREN          reduce using rule 99 (func_args -> func_arglist SEMICOLON func_args .)


state 222

    (101) func_arglist -> identifier_list COLON type_name .

    SEMICOLON       reduce using rule 101 (func_arglist -> identifier_list COLON type_name .)
    RPAREN          reduce using rule 101 (func_arglist -> identifier_list COLON type_name .)


state 223

    (97) func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON . type_name
    (41) type_name -> . NINTEGER
    (42) type_name -> . NREAL
    (43) type_name -> . NSTRING
    (44) type_name -> . NCHAR
    (45) type_name -> . NBOOLEAN
    (46) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 84
    NREAL           shift and go to state 85
    NSTRING         shift and go to state 86
    NCHAR           shift and go to state 87
    NBOOLEAN        shift and go to state 88
    ARRAY           shift and go to state 90

    type_name                      shift and go to state 238
    array_type                     shift and go to state 89

state 224

    (98) func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name .

    SEMICOLON       reduce using rule 98 (func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name .)


state 225

    (11) array_type -> ARRAY LBRACKET type RANGE . type RBRACKET OF type_name
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (105) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (106) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 239
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 70

state 226

    (94) length -> LENGTH LPAREN type RPAREN .

    SEMICOLON       reduce using rule 94 (length -> LENGTH LPAREN type RPAREN .)
    TO              reduce using rule 94 (length -> LENGTH LPAREN type RPAREN .)
    DOWNTO          reduce using rule 94 (length -> LENGTH LPAREN type RPAREN .)
    ELSE            reduce using rule 94 (length -> LENGTH LPAREN type RPAREN .)


state 227

    (113) cond_if -> IF condition THEN statement ELSE statement .

    SEMICOLON       reduce using rule 113 (cond_if -> IF condition THEN statement ELSE statement .)
    ELSE            reduce using rule 113 (cond_if -> IF condition THEN statement ELSE statement .)


state 228

    (114) cond_if -> IF condition THEN statement ELSE if_body .

    SEMICOLON       reduce using rule 114 (cond_if -> IF condition THEN statement ELSE if_body .)
    ELSE            reduce using rule 114 (cond_if -> IF condition THEN statement ELSE if_body .)


state 229

    (116) cond_if -> IF condition THEN if_body ELSE if_body .

    SEMICOLON       reduce using rule 116 (cond_if -> IF condition THEN if_body ELSE if_body .)
    ELSE            reduce using rule 116 (cond_if -> IF condition THEN if_body ELSE if_body .)


state 230

    (117) cond_if -> IF condition THEN if_body ELSE statement .

    SEMICOLON       reduce using rule 117 (cond_if -> IF condition THEN if_body ELSE statement .)
    ELSE            reduce using rule 117 (cond_if -> IF condition THEN if_body ELSE statement .)


state 231

    (123) if_body -> BEGIN statements END .

    ELSE            reduce using rule 123 (if_body -> BEGIN statements END .)
    SEMICOLON       reduce using rule 123 (if_body -> BEGIN statements END .)


state 232

    (126) for_loop -> FOR assignment to type DO statement .

    SEMICOLON       reduce using rule 126 (for_loop -> FOR assignment to type DO statement .)
    ELSE            reduce using rule 126 (for_loop -> FOR assignment to type DO statement .)


state 233

    (127) for_loop -> FOR assignment to type DO if_body .

    SEMICOLON       reduce using rule 127 (for_loop -> FOR assignment to type DO if_body .)
    ELSE            reduce using rule 127 (for_loop -> FOR assignment to type DO if_body .)


state 234

    (128) for_loop -> FOR assignment downto type DO statement .

    SEMICOLON       reduce using rule 128 (for_loop -> FOR assignment downto type DO statement .)
    ELSE            reduce using rule 128 (for_loop -> FOR assignment downto type DO statement .)


state 235

    (129) for_loop -> FOR assignment downto type DO if_body .

    SEMICOLON       reduce using rule 129 (for_loop -> FOR assignment downto type DO if_body .)
    ELSE            reduce using rule 129 (for_loop -> FOR assignment downto type DO if_body .)


state 236

    (102) func_variable_declaration -> identifier_list COLON type_name SEMICOLON . func_variable_declaration
    (103) func_variable_declaration -> identifier_list COLON type_name SEMICOLON .
    (102) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON func_variable_declaration
    (103) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    BEGIN           reduce using rule 103 (func_variable_declaration -> identifier_list COLON type_name SEMICOLON .)
    IDENTIFIER      shift and go to state 17

    identifier_list                shift and go to state 153
    func_variable_declaration      shift and go to state 240

state 237

    (86) procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body . SEMICOLON

    SEMICOLON       shift and go to state 241


state 238

    (97) func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name .

    SEMICOLON       reduce using rule 97 (func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name .)


state 239

    (11) array_type -> ARRAY LBRACKET type RANGE type . RBRACKET OF type_name

    RBRACKET        shift and go to state 242


state 240

    (102) func_variable_declaration -> identifier_list COLON type_name SEMICOLON func_variable_declaration .

    BEGIN           reduce using rule 102 (func_variable_declaration -> identifier_list COLON type_name SEMICOLON func_variable_declaration .)


state 241

    (86) procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON .

    VAR             reduce using rule 86 (procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON .)
    BEGIN           reduce using rule 86 (procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON .)
    PROCEDURE       reduce using rule 86 (procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON .)
    FUNCTION        reduce using rule 86 (procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON .)


state 242

    (11) array_type -> ARRAY LBRACKET type RANGE type RBRACKET . OF type_name

    OF              shift and go to state 243


state 243

    (11) array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF . type_name
    (41) type_name -> . NINTEGER
    (42) type_name -> . NREAL
    (43) type_name -> . NSTRING
    (44) type_name -> . NCHAR
    (45) type_name -> . NBOOLEAN
    (46) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 84
    NREAL           shift and go to state 85
    NSTRING         shift and go to state 86
    NCHAR           shift and go to state 87
    NBOOLEAN        shift and go to state 88
    ARRAY           shift and go to state 90

    type_name                      shift and go to state 244
    array_type                     shift and go to state 89

state 244

    (11) array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .

    SEMICOLON       reduce using rule 11 (array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .)
    RPAREN          reduce using rule 11 (array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RANGE in state 66 resolved as shift
WARNING: shift/reduce conflict for EQ in state 66 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 66 resolved as shift
WARNING: shift/reduce conflict for LT in state 66 resolved as shift
WARNING: shift/reduce conflict for GT in state 66 resolved as shift
WARNING: shift/reduce conflict for LTE in state 66 resolved as shift
WARNING: shift/reduce conflict for GTE in state 66 resolved as shift
WARNING: shift/reduce conflict for AND in state 66 resolved as shift
WARNING: shift/reduce conflict for OR in state 66 resolved as shift
WARNING: shift/reduce conflict for NOT in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 66 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 66 resolved as shift
WARNING: shift/reduce conflict for DIV in state 66 resolved as shift
WARNING: shift/reduce conflict for MOD in state 66 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 95 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 95 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 95 resolved as shift
WARNING: shift/reduce conflict for DIV in state 95 resolved as shift
WARNING: shift/reduce conflict for MOD in state 95 resolved as shift
WARNING: shift/reduce conflict for EQ in state 95 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 95 resolved as shift
WARNING: shift/reduce conflict for LT in state 95 resolved as shift
WARNING: shift/reduce conflict for GT in state 95 resolved as shift
WARNING: shift/reduce conflict for LTE in state 95 resolved as shift
WARNING: shift/reduce conflict for GTE in state 95 resolved as shift
WARNING: shift/reduce conflict for AND in state 95 resolved as shift
WARNING: shift/reduce conflict for OR in state 95 resolved as shift
WARNING: shift/reduce conflict for NOT in state 95 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 103 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 142 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 142 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 142 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 142 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 142 resolved as shift
WARNING: shift/reduce conflict for DIV in state 142 resolved as shift
WARNING: shift/reduce conflict for MOD in state 142 resolved as shift
WARNING: shift/reduce conflict for EQ in state 142 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 142 resolved as shift
WARNING: shift/reduce conflict for LT in state 142 resolved as shift
WARNING: shift/reduce conflict for GT in state 142 resolved as shift
WARNING: shift/reduce conflict for LTE in state 142 resolved as shift
WARNING: shift/reduce conflict for GTE in state 142 resolved as shift
WARNING: shift/reduce conflict for AND in state 142 resolved as shift
WARNING: shift/reduce conflict for OR in state 142 resolved as shift
WARNING: shift/reduce conflict for NOT in state 142 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 172 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 173 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 175 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 175 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 175 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 175 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 175 resolved as shift
WARNING: shift/reduce conflict for DIV in state 175 resolved as shift
WARNING: shift/reduce conflict for MOD in state 175 resolved as shift
WARNING: shift/reduce conflict for EQ in state 175 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 175 resolved as shift
WARNING: shift/reduce conflict for LT in state 175 resolved as shift
WARNING: shift/reduce conflict for GT in state 175 resolved as shift
WARNING: shift/reduce conflict for LTE in state 175 resolved as shift
WARNING: shift/reduce conflict for GTE in state 175 resolved as shift
WARNING: shift/reduce conflict for AND in state 175 resolved as shift
WARNING: shift/reduce conflict for OR in state 175 resolved as shift
WARNING: shift/reduce conflict for NOT in state 175 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 176 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 176 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 176 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 176 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 176 resolved as shift
WARNING: shift/reduce conflict for DIV in state 176 resolved as shift
WARNING: shift/reduce conflict for MOD in state 176 resolved as shift
WARNING: shift/reduce conflict for EQ in state 176 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 176 resolved as shift
WARNING: shift/reduce conflict for LT in state 176 resolved as shift
WARNING: shift/reduce conflict for GT in state 176 resolved as shift
WARNING: shift/reduce conflict for LTE in state 176 resolved as shift
WARNING: shift/reduce conflict for GTE in state 176 resolved as shift
WARNING: shift/reduce conflict for AND in state 176 resolved as shift
WARNING: shift/reduce conflict for OR in state 176 resolved as shift
WARNING: shift/reduce conflict for NOT in state 176 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 177 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 177 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 177 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 177 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 177 resolved as shift
WARNING: shift/reduce conflict for DIV in state 177 resolved as shift
WARNING: shift/reduce conflict for MOD in state 177 resolved as shift
WARNING: shift/reduce conflict for EQ in state 177 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 177 resolved as shift
WARNING: shift/reduce conflict for LT in state 177 resolved as shift
WARNING: shift/reduce conflict for GT in state 177 resolved as shift
WARNING: shift/reduce conflict for LTE in state 177 resolved as shift
WARNING: shift/reduce conflict for GTE in state 177 resolved as shift
WARNING: shift/reduce conflict for AND in state 177 resolved as shift
WARNING: shift/reduce conflict for OR in state 177 resolved as shift
WARNING: shift/reduce conflict for NOT in state 177 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 178 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 178 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 178 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 178 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 178 resolved as shift
WARNING: shift/reduce conflict for DIV in state 178 resolved as shift
WARNING: shift/reduce conflict for MOD in state 178 resolved as shift
WARNING: shift/reduce conflict for EQ in state 178 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 178 resolved as shift
WARNING: shift/reduce conflict for LT in state 178 resolved as shift
WARNING: shift/reduce conflict for GT in state 178 resolved as shift
WARNING: shift/reduce conflict for LTE in state 178 resolved as shift
WARNING: shift/reduce conflict for GTE in state 178 resolved as shift
WARNING: shift/reduce conflict for AND in state 178 resolved as shift
WARNING: shift/reduce conflict for OR in state 178 resolved as shift
WARNING: shift/reduce conflict for NOT in state 178 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 179 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 179 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 179 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 179 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 179 resolved as shift
WARNING: shift/reduce conflict for DIV in state 179 resolved as shift
WARNING: shift/reduce conflict for MOD in state 179 resolved as shift
WARNING: shift/reduce conflict for EQ in state 179 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 179 resolved as shift
WARNING: shift/reduce conflict for LT in state 179 resolved as shift
WARNING: shift/reduce conflict for GT in state 179 resolved as shift
WARNING: shift/reduce conflict for LTE in state 179 resolved as shift
WARNING: shift/reduce conflict for GTE in state 179 resolved as shift
WARNING: shift/reduce conflict for AND in state 179 resolved as shift
WARNING: shift/reduce conflict for OR in state 179 resolved as shift
WARNING: shift/reduce conflict for NOT in state 179 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 180 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 180 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 180 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 180 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 180 resolved as shift
WARNING: shift/reduce conflict for DIV in state 180 resolved as shift
WARNING: shift/reduce conflict for MOD in state 180 resolved as shift
WARNING: shift/reduce conflict for EQ in state 180 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 180 resolved as shift
WARNING: shift/reduce conflict for LT in state 180 resolved as shift
WARNING: shift/reduce conflict for GT in state 180 resolved as shift
WARNING: shift/reduce conflict for LTE in state 180 resolved as shift
WARNING: shift/reduce conflict for GTE in state 180 resolved as shift
WARNING: shift/reduce conflict for AND in state 180 resolved as shift
WARNING: shift/reduce conflict for OR in state 180 resolved as shift
WARNING: shift/reduce conflict for NOT in state 180 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 183 resolved as shift
WARNING: reduce/reduce conflict in state 68 resolved using rule (expression -> func_call)
WARNING: rejected rule (type -> func_call) in state 68
WARNING: reduce/reduce conflict in state 95 resolved using rule (assignment -> type ASSIGNMENT type)
WARNING: rejected rule (condition -> type) in state 95
WARNING: reduce/reduce conflict in state 98 resolved using rule (expression -> func_call)
WARNING: rejected rule (type -> func_call) in state 98
WARNING: reduce/reduce conflict in state 103 resolved using rule (procedure_arg_list -> IDENTIFIER)
WARNING: rejected rule (arg_list -> IDENTIFIER) in state 103
WARNING: reduce/reduce conflict in state 103 resolved using rule (identifier -> IDENTIFIER)
WARNING: rejected rule (procedure_arg_list -> IDENTIFIER) in state 103
WARNING: reduce/reduce conflict in state 104 resolved using rule (procedure_arg_list -> type)
WARNING: rejected rule (arg_list -> type) in state 104
WARNING: reduce/reduce conflict in state 176 resolved using rule (condition -> expression comparator type)
WARNING: rejected rule (condition -> type) in state 176
WARNING: reduce/reduce conflict in state 178 resolved using rule (expression -> expression operation type)
WARNING: rejected rule (condition -> type) in state 178
WARNING: reduce/reduce conflict in state 179 resolved using rule (condition -> type comparator type)
WARNING: rejected rule (condition -> type) in state 179
WARNING: reduce/reduce conflict in state 183 resolved using rule (identifier -> IDENTIFIER)
WARNING: rejected rule (arg_list -> IDENTIFIER) in state 183
WARNING: Rule (arg_list -> IDENTIFIER) is never reduced
WARNING: Rule (procedure_arg_list -> IDENTIFIER) is never reduced
