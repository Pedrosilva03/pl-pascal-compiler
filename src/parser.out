Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> header block DOT
Rule 2     header -> PROGRAM IDENTIFIER SEMICOLON
Rule 3     block -> VAR variable_declaration body
Rule 4     block -> body
Rule 5     block -> function block
Rule 6     block -> procedure block
Rule 7     variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration
Rule 8     variable_declaration -> identifier_list COLON type_name SEMICOLON
Rule 9     identifier_list -> IDENTIFIER COMMA identifier_list
Rule 10    identifier_list -> IDENTIFIER
Rule 11    array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name
Rule 12    array_access -> IDENTIFIER LBRACKET type RBRACKET
Rule 13    body -> BEGIN statements END
Rule 14    statements -> statement SEMICOLON statements
Rule 15    statements -> statement SEMICOLON
Rule 16    statement -> writeln
Rule 17    statement -> assignment
Rule 18    statement -> procedure_call
Rule 19    statement -> cond_if
Rule 20    statement -> while_loop
Rule 21    statement -> for_loop
Rule 22    statement -> repeat_loop
Rule 23    statement -> readln
Rule 24    assignment -> type ASSIGNMENT type
Rule 25    assignment -> type ASSIGNMENT expression
Rule 26    assignment -> type ASSIGNMENT length
Rule 27    expression -> type operation type
Rule 28    expression -> expression_paren
Rule 29    expression -> expression operation type
Rule 30    expression -> expression operation expression
Rule 31    expression -> func_call
Rule 32    expression -> condition
Rule 33    expression_paren -> LPAREN expression RPAREN
Rule 34    operation -> plus
Rule 35    operation -> minus
Rule 36    operation -> times
Rule 37    operation -> division
Rule 38    operation -> div
Rule 39    operation -> mod
Rule 40    operation -> RANGE
Rule 41    type_name -> NINTEGER
Rule 42    type_name -> NREAL
Rule 43    type_name -> NSTRING
Rule 44    type_name -> NCHAR
Rule 45    type_name -> NBOOLEAN
Rule 46    type_name -> array_type
Rule 47    type -> integer
Rule 48    type -> real
Rule 49    type -> string
Rule 50    type -> char
Rule 51    type -> boolean
Rule 52    type -> identifier
Rule 53    type -> func_call
Rule 54    type -> array_access
Rule 55    integer -> INTEGER
Rule 56    real -> REAL
Rule 57    string -> STRING
Rule 58    char -> CHAR
Rule 59    boolean -> BOOLEAN
Rule 60    identifier -> IDENTIFIER
Rule 61    plus -> PLUS
Rule 62    minus -> MINUS
Rule 63    times -> TIMES
Rule 64    division -> DIVISION
Rule 65    div -> DIV
Rule 66    mod -> MOD
Rule 67    comparator -> eq
Rule 68    comparator -> neq
Rule 69    comparator -> lt
Rule 70    comparator -> gt
Rule 71    comparator -> lte
Rule 72    comparator -> gte
Rule 73    comparator -> and
Rule 74    comparator -> or
Rule 75    comparator -> not
Rule 76    eq -> EQ
Rule 77    neq -> NEQ
Rule 78    lt -> LT
Rule 79    gt -> GT
Rule 80    lte -> LTE
Rule 81    gte -> GTE
Rule 82    and -> AND
Rule 83    or -> OR
Rule 84    not -> NOT
Rule 85    procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
Rule 86    procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON
Rule 87    procedure -> PROCEDURE IDENTIFIER SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON
Rule 88    procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON
Rule 89    procedure_variable_declaration -> identifier_list COLON type_name SEMICOLON procedure_variable_declaration
Rule 90    procedure_variable_declaration -> identifier_list COLON type_name SEMICOLON
Rule 91    procedure_body -> BEGIN statements END
Rule 92    procedure_call -> prepare_func_call
Rule 93    procedure_call -> prepare_func_call LPAREN procedure_arg_list RPAREN
Rule 94    procedure_arg_list -> IDENTIFIER COMMA procedure_arg_list
Rule 95    procedure_arg_list -> IDENTIFIER
Rule 96    procedure_arg_list -> type COMMA procedure_arg_list
Rule 97    procedure_arg_list -> type
Rule 98    length -> LENGTH LPAREN type RPAREN
Rule 99    function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON
Rule 100   function -> func_header SEMICOLON func_body SEMICOLON
Rule 101   func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
Rule 102   func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name
Rule 103   func_args -> func_arglist SEMICOLON func_args
Rule 104   func_args -> func_arglist
Rule 105   func_arglist -> identifier_list COLON type_name
Rule 106   func_variable_declaration -> identifier_list COLON type_name SEMICOLON func_variable_declaration
Rule 107   func_variable_declaration -> identifier_list COLON type_name SEMICOLON
Rule 108   func_body -> BEGIN statements END
Rule 109   func_call -> prepare_func_call LPAREN arg_list RPAREN
Rule 110   prepare_func_call -> IDENTIFIER
Rule 111   arg_list -> IDENTIFIER COMMA arg_list
Rule 112   arg_list -> IDENTIFIER
Rule 113   arg_list -> type COMMA arg_list
Rule 114   arg_list -> type
Rule 115   arg_list -> <empty>
Rule 116   cond_if -> IF condition THEN statement
Rule 117   cond_if -> IF condition THEN statement ELSE statement
Rule 118   cond_if -> IF condition THEN statement ELSE if_body
Rule 119   cond_if -> IF condition THEN if_body
Rule 120   cond_if -> IF condition THEN if_body ELSE if_body
Rule 121   cond_if -> IF condition THEN if_body ELSE statement
Rule 122   condition -> expression comparator expression
Rule 123   condition -> type comparator expression
Rule 124   condition -> type comparator type
Rule 125   condition -> expression comparator type
Rule 126   condition -> func_call
Rule 127   condition -> type
Rule 128   if_body -> BEGIN statements END
Rule 129   to -> TO
Rule 130   downto -> DOWNTO
Rule 131   for_loop -> FOR assignment to type DO statement
Rule 132   for_loop -> FOR assignment to type DO if_body
Rule 133   for_loop -> FOR assignment downto type DO statement
Rule 134   for_loop -> FOR assignment downto type DO if_body
Rule 135   while_loop -> WHILE condition DO statement
Rule 136   while_loop -> WHILE condition DO if_body
Rule 137   repeat_loop -> REPEAT statements UNTIL condition
Rule 138   readln -> READLN LPAREN type RPAREN
Rule 139   writeln -> WRITELN LPAREN writeln_args RPAREN
Rule 140   writeln_args -> type COMMA writeln_args
Rule 141   writeln_args -> type

Terminals, with rules where they appear

AND                  : 82
ARRAY                : 11
ASSIGNMENT           : 24 25 26
BEGIN                : 13 91 108 128
BOOLEAN              : 59
CHAR                 : 58
COLON                : 7 8 89 90 101 102 105 106 107
COMMA                : 9 94 96 111 113 140
COMMENT              : 
DIV                  : 65
DIVISION             : 64
DO                   : 131 132 133 134 135 136
DOT                  : 1
DOWNTO               : 130
ELSE                 : 117 118 120 121
END                  : 13 91 108 128
EQ                   : 76
FOR                  : 131 132 133 134
FUNCTION             : 101 102
GT                   : 79
GTE                  : 81
IDENTIFIER           : 2 9 10 12 60 85 86 87 88 94 95 101 102 110 111 112
IF                   : 116 117 118 119 120 121
INTEGER              : 55
LBRACKET             : 11 12
LENGTH               : 98
LPAREN               : 33 86 88 93 98 101 102 109 138 139
LT                   : 78
LTE                  : 80
MINUS                : 62
MOD                  : 66
NBOOLEAN             : 45
NCHAR                : 44
NEQ                  : 77
NINTEGER             : 41
NOT                  : 84
NREAL                : 42
NSTRING              : 43
OF                   : 11
OR                   : 83
PLUS                 : 61
PROCEDURE            : 85 86 87 88
PROGRAM              : 2
RANGE                : 11 40
RBRACKET             : 11 12
READLN               : 138
REAL                 : 56
REPEAT               : 137
RPAREN               : 33 86 88 93 98 101 102 109 138 139
SEMICOLON            : 2 7 8 14 15 85 85 86 86 87 87 88 88 89 90 99 99 100 100 103 106 107
STRING               : 57
THEN                 : 116 117 118 119 120 121
TIMES                : 63
TO                   : 129
UNTIL                : 137
VAR                  : 3 87 88 99
WHILE                : 135 136
WRITELN              : 139
error                : 

Nonterminals, with rules where they appear

and                  : 73
arg_list             : 109 111 113
array_access         : 54
array_type           : 46
assignment           : 17 131 132 133 134
block                : 1 5 6
body                 : 3 4
boolean              : 51
char                 : 50
comparator           : 122 123 124 125
cond_if              : 19
condition            : 32 116 117 118 119 120 121 135 136 137
div                  : 38
division             : 37
downto               : 133 134
eq                   : 67
expression           : 25 29 30 30 33 122 122 123 125
expression_paren     : 28
for_loop             : 21
func_arglist         : 103 104
func_args            : 86 88 101 103
func_body            : 99 100
func_call            : 31 53 126
func_header          : 99 100
func_variable_declaration : 87 88 99 106
function             : 5
gt                   : 70
gte                  : 72
header               : 1
identifier           : 52
identifier_list      : 7 8 9 89 90 105 106 107
if_body              : 118 119 120 120 121 132 134 136
integer              : 47
length               : 26
lt                   : 69
lte                  : 71
minus                : 35
mod                  : 39
neq                  : 68
not                  : 75
operation            : 27 29 30
or                   : 74
plus                 : 34
prepare_func_call    : 92 93 109
procedure            : 6
procedure_arg_list   : 93 94 96
procedure_body       : 85 86 87 88
procedure_call       : 18
procedure_variable_declaration : 89
program              : 0
readln               : 23
real                 : 48
repeat_loop          : 22
statement            : 14 15 116 117 117 118 121 131 133 135
statements           : 13 14 91 108 128 137
string               : 49
times                : 36
to                   : 131 132
type                 : 11 11 12 24 24 25 26 27 27 29 96 97 98 113 114 123 124 124 125 127 131 132 133 134 138 140 141
type_name            : 7 8 11 89 90 101 102 105 106 107
variable_declaration : 3 7
while_loop           : 20
writeln              : 16
writeln_args         : 139 140

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . header block DOT
    (2) header -> . PROGRAM IDENTIFIER SEMICOLON

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    header                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> header . block DOT
    (3) block -> . VAR variable_declaration body
    (4) block -> . body
    (5) block -> . function block
    (6) block -> . procedure block
    (13) body -> . BEGIN statements END
    (99) function -> . func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON
    (100) function -> . func_header SEMICOLON func_body SEMICOLON
    (85) procedure -> . PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
    (86) procedure -> . PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON
    (87) procedure -> . PROCEDURE IDENTIFIER SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON
    (88) procedure -> . PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON
    (101) func_header -> . FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (102) func_header -> . FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name

    VAR             shift and go to state 5
    BEGIN           shift and go to state 9
    PROCEDURE       shift and go to state 11
    FUNCTION        shift and go to state 12

    block                          shift and go to state 4
    body                           shift and go to state 6
    function                       shift and go to state 7
    procedure                      shift and go to state 8
    func_header                    shift and go to state 10

state 3

    (2) header -> PROGRAM . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 13


state 4

    (1) program -> header block . DOT

    DOT             shift and go to state 14


state 5

    (3) block -> VAR . variable_declaration body
    (7) variable_declaration -> . identifier_list COLON type_name SEMICOLON variable_declaration
    (8) variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    variable_declaration           shift and go to state 15
    identifier_list                shift and go to state 16

state 6

    (4) block -> body .

    DOT             reduce using rule 4 (block -> body .)


state 7

    (5) block -> function . block
    (3) block -> . VAR variable_declaration body
    (4) block -> . body
    (5) block -> . function block
    (6) block -> . procedure block
    (13) body -> . BEGIN statements END
    (99) function -> . func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON
    (100) function -> . func_header SEMICOLON func_body SEMICOLON
    (85) procedure -> . PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
    (86) procedure -> . PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON
    (87) procedure -> . PROCEDURE IDENTIFIER SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON
    (88) procedure -> . PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON
    (101) func_header -> . FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (102) func_header -> . FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name

    VAR             shift and go to state 5
    BEGIN           shift and go to state 9
    PROCEDURE       shift and go to state 11
    FUNCTION        shift and go to state 12

    function                       shift and go to state 7
    block                          shift and go to state 18
    body                           shift and go to state 6
    procedure                      shift and go to state 8
    func_header                    shift and go to state 10

state 8

    (6) block -> procedure . block
    (3) block -> . VAR variable_declaration body
    (4) block -> . body
    (5) block -> . function block
    (6) block -> . procedure block
    (13) body -> . BEGIN statements END
    (99) function -> . func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON
    (100) function -> . func_header SEMICOLON func_body SEMICOLON
    (85) procedure -> . PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
    (86) procedure -> . PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON
    (87) procedure -> . PROCEDURE IDENTIFIER SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON
    (88) procedure -> . PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON
    (101) func_header -> . FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (102) func_header -> . FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name

    VAR             shift and go to state 5
    BEGIN           shift and go to state 9
    PROCEDURE       shift and go to state 11
    FUNCTION        shift and go to state 12

    procedure                      shift and go to state 8
    block                          shift and go to state 19
    body                           shift and go to state 6
    function                       shift and go to state 7
    func_header                    shift and go to state 10

state 9

    (13) body -> BEGIN . statements END
    (14) statements -> . statement SEMICOLON statements
    (15) statements -> . statement SEMICOLON
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (139) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (92) procedure_call -> . prepare_func_call
    (93) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (116) cond_if -> . IF condition THEN statement
    (117) cond_if -> . IF condition THEN statement ELSE statement
    (118) cond_if -> . IF condition THEN statement ELSE if_body
    (119) cond_if -> . IF condition THEN if_body
    (120) cond_if -> . IF condition THEN if_body ELSE if_body
    (121) cond_if -> . IF condition THEN if_body ELSE statement
    (135) while_loop -> . WHILE condition DO statement
    (136) while_loop -> . WHILE condition DO if_body
    (131) for_loop -> . FOR assignment to type DO statement
    (132) for_loop -> . FOR assignment to type DO if_body
    (133) for_loop -> . FOR assignment downto type DO statement
    (134) for_loop -> . FOR assignment downto type DO if_body
    (137) repeat_loop -> . REPEAT statements UNTIL condition
    (138) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (110) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    statements                     shift and go to state 20
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 10

    (99) function -> func_header . SEMICOLON VAR func_variable_declaration func_body SEMICOLON
    (100) function -> func_header . SEMICOLON func_body SEMICOLON

    SEMICOLON       shift and go to state 52


state 11

    (85) procedure -> PROCEDURE . IDENTIFIER SEMICOLON procedure_body SEMICOLON
    (86) procedure -> PROCEDURE . IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON
    (87) procedure -> PROCEDURE . IDENTIFIER SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON
    (88) procedure -> PROCEDURE . IDENTIFIER LPAREN func_args RPAREN SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON

    IDENTIFIER      shift and go to state 53


state 12

    (101) func_header -> FUNCTION . IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (102) func_header -> FUNCTION . IDENTIFIER LPAREN RPAREN COLON type_name

    IDENTIFIER      shift and go to state 54


state 13

    (2) header -> PROGRAM IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 55


state 14

    (1) program -> header block DOT .

    $end            reduce using rule 1 (program -> header block DOT .)


state 15

    (3) block -> VAR variable_declaration . body
    (13) body -> . BEGIN statements END

    BEGIN           shift and go to state 9

    body                           shift and go to state 56

state 16

    (7) variable_declaration -> identifier_list . COLON type_name SEMICOLON variable_declaration
    (8) variable_declaration -> identifier_list . COLON type_name SEMICOLON

    COLON           shift and go to state 57


state 17

    (9) identifier_list -> IDENTIFIER . COMMA identifier_list
    (10) identifier_list -> IDENTIFIER .

    COMMA           shift and go to state 58
    COLON           reduce using rule 10 (identifier_list -> IDENTIFIER .)


state 18

    (5) block -> function block .

    DOT             reduce using rule 5 (block -> function block .)


state 19

    (6) block -> procedure block .

    DOT             reduce using rule 6 (block -> procedure block .)


state 20

    (13) body -> BEGIN statements . END

    END             shift and go to state 59


state 21

    (14) statements -> statement . SEMICOLON statements
    (15) statements -> statement . SEMICOLON

    SEMICOLON       shift and go to state 60


state 22

    (16) statement -> writeln .

    SEMICOLON       reduce using rule 16 (statement -> writeln .)
    ELSE            reduce using rule 16 (statement -> writeln .)


state 23

    (17) statement -> assignment .

    SEMICOLON       reduce using rule 17 (statement -> assignment .)
    ELSE            reduce using rule 17 (statement -> assignment .)


state 24

    (18) statement -> procedure_call .

    SEMICOLON       reduce using rule 18 (statement -> procedure_call .)
    ELSE            reduce using rule 18 (statement -> procedure_call .)


state 25

    (19) statement -> cond_if .

    SEMICOLON       reduce using rule 19 (statement -> cond_if .)
    ELSE            reduce using rule 19 (statement -> cond_if .)


state 26

    (20) statement -> while_loop .

    SEMICOLON       reduce using rule 20 (statement -> while_loop .)
    ELSE            reduce using rule 20 (statement -> while_loop .)


state 27

    (21) statement -> for_loop .

    SEMICOLON       reduce using rule 21 (statement -> for_loop .)
    ELSE            reduce using rule 21 (statement -> for_loop .)


state 28

    (22) statement -> repeat_loop .

    SEMICOLON       reduce using rule 22 (statement -> repeat_loop .)
    ELSE            reduce using rule 22 (statement -> repeat_loop .)


state 29

    (23) statement -> readln .

    SEMICOLON       reduce using rule 23 (statement -> readln .)
    ELSE            reduce using rule 23 (statement -> readln .)


state 30

    (139) writeln -> WRITELN . LPAREN writeln_args RPAREN

    LPAREN          shift and go to state 61


state 31

    (24) assignment -> type . ASSIGNMENT type
    (25) assignment -> type . ASSIGNMENT expression
    (26) assignment -> type . ASSIGNMENT length

    ASSIGNMENT      shift and go to state 62


state 32

    (92) procedure_call -> prepare_func_call .
    (93) procedure_call -> prepare_func_call . LPAREN procedure_arg_list RPAREN
    (109) func_call -> prepare_func_call . LPAREN arg_list RPAREN

    SEMICOLON       reduce using rule 92 (procedure_call -> prepare_func_call .)
    ELSE            reduce using rule 92 (procedure_call -> prepare_func_call .)
    LPAREN          shift and go to state 63


state 33

    (116) cond_if -> IF . condition THEN statement
    (117) cond_if -> IF . condition THEN statement ELSE statement
    (118) cond_if -> IF . condition THEN statement ELSE if_body
    (119) cond_if -> IF . condition THEN if_body
    (120) cond_if -> IF . condition THEN if_body ELSE if_body
    (121) cond_if -> IF . condition THEN if_body ELSE statement
    (122) condition -> . expression comparator expression
    (123) condition -> . type comparator expression
    (124) condition -> . type comparator type
    (125) condition -> . expression comparator type
    (126) condition -> . func_call
    (127) condition -> . type
    (27) expression -> . type operation type
    (28) expression -> . expression_paren
    (29) expression -> . expression operation type
    (30) expression -> . expression operation expression
    (31) expression -> . func_call
    (32) expression -> . condition
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (33) expression_paren -> . LPAREN expression RPAREN
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    LPAREN          shift and go to state 70
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    condition                      shift and go to state 64
    expression                     shift and go to state 65
    type                           shift and go to state 66
    func_call                      shift and go to state 67
    expression_paren               shift and go to state 68
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 34

    (135) while_loop -> WHILE . condition DO statement
    (136) while_loop -> WHILE . condition DO if_body
    (122) condition -> . expression comparator expression
    (123) condition -> . type comparator expression
    (124) condition -> . type comparator type
    (125) condition -> . expression comparator type
    (126) condition -> . func_call
    (127) condition -> . type
    (27) expression -> . type operation type
    (28) expression -> . expression_paren
    (29) expression -> . expression operation type
    (30) expression -> . expression operation expression
    (31) expression -> . func_call
    (32) expression -> . condition
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (33) expression_paren -> . LPAREN expression RPAREN
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    LPAREN          shift and go to state 70
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    condition                      shift and go to state 72
    expression                     shift and go to state 65
    type                           shift and go to state 66
    func_call                      shift and go to state 67
    expression_paren               shift and go to state 68
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 35

    (131) for_loop -> FOR . assignment to type DO statement
    (132) for_loop -> FOR . assignment to type DO if_body
    (133) for_loop -> FOR . assignment downto type DO statement
    (134) for_loop -> FOR . assignment downto type DO if_body
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    assignment                     shift and go to state 73
    type                           shift and go to state 31
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 36

    (137) repeat_loop -> REPEAT . statements UNTIL condition
    (14) statements -> . statement SEMICOLON statements
    (15) statements -> . statement SEMICOLON
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (139) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (92) procedure_call -> . prepare_func_call
    (93) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (116) cond_if -> . IF condition THEN statement
    (117) cond_if -> . IF condition THEN statement ELSE statement
    (118) cond_if -> . IF condition THEN statement ELSE if_body
    (119) cond_if -> . IF condition THEN if_body
    (120) cond_if -> . IF condition THEN if_body ELSE if_body
    (121) cond_if -> . IF condition THEN if_body ELSE statement
    (135) while_loop -> . WHILE condition DO statement
    (136) while_loop -> . WHILE condition DO if_body
    (131) for_loop -> . FOR assignment to type DO statement
    (132) for_loop -> . FOR assignment to type DO if_body
    (133) for_loop -> . FOR assignment downto type DO statement
    (134) for_loop -> . FOR assignment downto type DO if_body
    (137) repeat_loop -> . REPEAT statements UNTIL condition
    (138) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (110) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    statements                     shift and go to state 74
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 37

    (138) readln -> READLN . LPAREN type RPAREN

    LPAREN          shift and go to state 75


state 38

    (47) type -> integer .

    ASSIGNMENT      reduce using rule 47 (type -> integer .)
    RANGE           reduce using rule 47 (type -> integer .)
    EQ              reduce using rule 47 (type -> integer .)
    NEQ             reduce using rule 47 (type -> integer .)
    LT              reduce using rule 47 (type -> integer .)
    GT              reduce using rule 47 (type -> integer .)
    LTE             reduce using rule 47 (type -> integer .)
    GTE             reduce using rule 47 (type -> integer .)
    AND             reduce using rule 47 (type -> integer .)
    OR              reduce using rule 47 (type -> integer .)
    NOT             reduce using rule 47 (type -> integer .)
    PLUS            reduce using rule 47 (type -> integer .)
    MINUS           reduce using rule 47 (type -> integer .)
    TIMES           reduce using rule 47 (type -> integer .)
    DIVISION        reduce using rule 47 (type -> integer .)
    DIV             reduce using rule 47 (type -> integer .)
    MOD             reduce using rule 47 (type -> integer .)
    THEN            reduce using rule 47 (type -> integer .)
    DO              reduce using rule 47 (type -> integer .)
    COMMA           reduce using rule 47 (type -> integer .)
    RPAREN          reduce using rule 47 (type -> integer .)
    SEMICOLON       reduce using rule 47 (type -> integer .)
    TO              reduce using rule 47 (type -> integer .)
    DOWNTO          reduce using rule 47 (type -> integer .)
    ELSE            reduce using rule 47 (type -> integer .)
    RBRACKET        reduce using rule 47 (type -> integer .)


state 39

    (48) type -> real .

    ASSIGNMENT      reduce using rule 48 (type -> real .)
    RANGE           reduce using rule 48 (type -> real .)
    EQ              reduce using rule 48 (type -> real .)
    NEQ             reduce using rule 48 (type -> real .)
    LT              reduce using rule 48 (type -> real .)
    GT              reduce using rule 48 (type -> real .)
    LTE             reduce using rule 48 (type -> real .)
    GTE             reduce using rule 48 (type -> real .)
    AND             reduce using rule 48 (type -> real .)
    OR              reduce using rule 48 (type -> real .)
    NOT             reduce using rule 48 (type -> real .)
    PLUS            reduce using rule 48 (type -> real .)
    MINUS           reduce using rule 48 (type -> real .)
    TIMES           reduce using rule 48 (type -> real .)
    DIVISION        reduce using rule 48 (type -> real .)
    DIV             reduce using rule 48 (type -> real .)
    MOD             reduce using rule 48 (type -> real .)
    THEN            reduce using rule 48 (type -> real .)
    DO              reduce using rule 48 (type -> real .)
    COMMA           reduce using rule 48 (type -> real .)
    RPAREN          reduce using rule 48 (type -> real .)
    SEMICOLON       reduce using rule 48 (type -> real .)
    TO              reduce using rule 48 (type -> real .)
    DOWNTO          reduce using rule 48 (type -> real .)
    ELSE            reduce using rule 48 (type -> real .)
    RBRACKET        reduce using rule 48 (type -> real .)


state 40

    (49) type -> string .

    ASSIGNMENT      reduce using rule 49 (type -> string .)
    RANGE           reduce using rule 49 (type -> string .)
    EQ              reduce using rule 49 (type -> string .)
    NEQ             reduce using rule 49 (type -> string .)
    LT              reduce using rule 49 (type -> string .)
    GT              reduce using rule 49 (type -> string .)
    LTE             reduce using rule 49 (type -> string .)
    GTE             reduce using rule 49 (type -> string .)
    AND             reduce using rule 49 (type -> string .)
    OR              reduce using rule 49 (type -> string .)
    NOT             reduce using rule 49 (type -> string .)
    PLUS            reduce using rule 49 (type -> string .)
    MINUS           reduce using rule 49 (type -> string .)
    TIMES           reduce using rule 49 (type -> string .)
    DIVISION        reduce using rule 49 (type -> string .)
    DIV             reduce using rule 49 (type -> string .)
    MOD             reduce using rule 49 (type -> string .)
    THEN            reduce using rule 49 (type -> string .)
    DO              reduce using rule 49 (type -> string .)
    COMMA           reduce using rule 49 (type -> string .)
    RPAREN          reduce using rule 49 (type -> string .)
    SEMICOLON       reduce using rule 49 (type -> string .)
    TO              reduce using rule 49 (type -> string .)
    DOWNTO          reduce using rule 49 (type -> string .)
    ELSE            reduce using rule 49 (type -> string .)
    RBRACKET        reduce using rule 49 (type -> string .)


state 41

    (50) type -> char .

    ASSIGNMENT      reduce using rule 50 (type -> char .)
    RANGE           reduce using rule 50 (type -> char .)
    EQ              reduce using rule 50 (type -> char .)
    NEQ             reduce using rule 50 (type -> char .)
    LT              reduce using rule 50 (type -> char .)
    GT              reduce using rule 50 (type -> char .)
    LTE             reduce using rule 50 (type -> char .)
    GTE             reduce using rule 50 (type -> char .)
    AND             reduce using rule 50 (type -> char .)
    OR              reduce using rule 50 (type -> char .)
    NOT             reduce using rule 50 (type -> char .)
    PLUS            reduce using rule 50 (type -> char .)
    MINUS           reduce using rule 50 (type -> char .)
    TIMES           reduce using rule 50 (type -> char .)
    DIVISION        reduce using rule 50 (type -> char .)
    DIV             reduce using rule 50 (type -> char .)
    MOD             reduce using rule 50 (type -> char .)
    THEN            reduce using rule 50 (type -> char .)
    DO              reduce using rule 50 (type -> char .)
    COMMA           reduce using rule 50 (type -> char .)
    RPAREN          reduce using rule 50 (type -> char .)
    SEMICOLON       reduce using rule 50 (type -> char .)
    TO              reduce using rule 50 (type -> char .)
    DOWNTO          reduce using rule 50 (type -> char .)
    ELSE            reduce using rule 50 (type -> char .)
    RBRACKET        reduce using rule 50 (type -> char .)


state 42

    (51) type -> boolean .

    ASSIGNMENT      reduce using rule 51 (type -> boolean .)
    RANGE           reduce using rule 51 (type -> boolean .)
    EQ              reduce using rule 51 (type -> boolean .)
    NEQ             reduce using rule 51 (type -> boolean .)
    LT              reduce using rule 51 (type -> boolean .)
    GT              reduce using rule 51 (type -> boolean .)
    LTE             reduce using rule 51 (type -> boolean .)
    GTE             reduce using rule 51 (type -> boolean .)
    AND             reduce using rule 51 (type -> boolean .)
    OR              reduce using rule 51 (type -> boolean .)
    NOT             reduce using rule 51 (type -> boolean .)
    PLUS            reduce using rule 51 (type -> boolean .)
    MINUS           reduce using rule 51 (type -> boolean .)
    TIMES           reduce using rule 51 (type -> boolean .)
    DIVISION        reduce using rule 51 (type -> boolean .)
    DIV             reduce using rule 51 (type -> boolean .)
    MOD             reduce using rule 51 (type -> boolean .)
    THEN            reduce using rule 51 (type -> boolean .)
    DO              reduce using rule 51 (type -> boolean .)
    COMMA           reduce using rule 51 (type -> boolean .)
    RPAREN          reduce using rule 51 (type -> boolean .)
    SEMICOLON       reduce using rule 51 (type -> boolean .)
    TO              reduce using rule 51 (type -> boolean .)
    DOWNTO          reduce using rule 51 (type -> boolean .)
    ELSE            reduce using rule 51 (type -> boolean .)
    RBRACKET        reduce using rule 51 (type -> boolean .)


state 43

    (52) type -> identifier .

    ASSIGNMENT      reduce using rule 52 (type -> identifier .)
    RANGE           reduce using rule 52 (type -> identifier .)
    EQ              reduce using rule 52 (type -> identifier .)
    NEQ             reduce using rule 52 (type -> identifier .)
    LT              reduce using rule 52 (type -> identifier .)
    GT              reduce using rule 52 (type -> identifier .)
    LTE             reduce using rule 52 (type -> identifier .)
    GTE             reduce using rule 52 (type -> identifier .)
    AND             reduce using rule 52 (type -> identifier .)
    OR              reduce using rule 52 (type -> identifier .)
    NOT             reduce using rule 52 (type -> identifier .)
    PLUS            reduce using rule 52 (type -> identifier .)
    MINUS           reduce using rule 52 (type -> identifier .)
    TIMES           reduce using rule 52 (type -> identifier .)
    DIVISION        reduce using rule 52 (type -> identifier .)
    DIV             reduce using rule 52 (type -> identifier .)
    MOD             reduce using rule 52 (type -> identifier .)
    THEN            reduce using rule 52 (type -> identifier .)
    DO              reduce using rule 52 (type -> identifier .)
    COMMA           reduce using rule 52 (type -> identifier .)
    RPAREN          reduce using rule 52 (type -> identifier .)
    SEMICOLON       reduce using rule 52 (type -> identifier .)
    TO              reduce using rule 52 (type -> identifier .)
    DOWNTO          reduce using rule 52 (type -> identifier .)
    ELSE            reduce using rule 52 (type -> identifier .)
    RBRACKET        reduce using rule 52 (type -> identifier .)


state 44

    (53) type -> func_call .

    ASSIGNMENT      reduce using rule 53 (type -> func_call .)
    COMMA           reduce using rule 53 (type -> func_call .)
    RPAREN          reduce using rule 53 (type -> func_call .)
    RBRACKET        reduce using rule 53 (type -> func_call .)
    RANGE           reduce using rule 53 (type -> func_call .)
    EQ              reduce using rule 53 (type -> func_call .)
    NEQ             reduce using rule 53 (type -> func_call .)
    LT              reduce using rule 53 (type -> func_call .)
    GT              reduce using rule 53 (type -> func_call .)
    LTE             reduce using rule 53 (type -> func_call .)
    GTE             reduce using rule 53 (type -> func_call .)
    AND             reduce using rule 53 (type -> func_call .)
    OR              reduce using rule 53 (type -> func_call .)
    NOT             reduce using rule 53 (type -> func_call .)
    PLUS            reduce using rule 53 (type -> func_call .)
    MINUS           reduce using rule 53 (type -> func_call .)
    TIMES           reduce using rule 53 (type -> func_call .)
    DIVISION        reduce using rule 53 (type -> func_call .)
    DIV             reduce using rule 53 (type -> func_call .)
    MOD             reduce using rule 53 (type -> func_call .)
    SEMICOLON       reduce using rule 53 (type -> func_call .)
    TO              reduce using rule 53 (type -> func_call .)
    DOWNTO          reduce using rule 53 (type -> func_call .)
    ELSE            reduce using rule 53 (type -> func_call .)
    THEN            reduce using rule 53 (type -> func_call .)
    DO              reduce using rule 53 (type -> func_call .)


state 45

    (54) type -> array_access .

    ASSIGNMENT      reduce using rule 54 (type -> array_access .)
    RANGE           reduce using rule 54 (type -> array_access .)
    EQ              reduce using rule 54 (type -> array_access .)
    NEQ             reduce using rule 54 (type -> array_access .)
    LT              reduce using rule 54 (type -> array_access .)
    GT              reduce using rule 54 (type -> array_access .)
    LTE             reduce using rule 54 (type -> array_access .)
    GTE             reduce using rule 54 (type -> array_access .)
    AND             reduce using rule 54 (type -> array_access .)
    OR              reduce using rule 54 (type -> array_access .)
    NOT             reduce using rule 54 (type -> array_access .)
    PLUS            reduce using rule 54 (type -> array_access .)
    MINUS           reduce using rule 54 (type -> array_access .)
    TIMES           reduce using rule 54 (type -> array_access .)
    DIVISION        reduce using rule 54 (type -> array_access .)
    DIV             reduce using rule 54 (type -> array_access .)
    MOD             reduce using rule 54 (type -> array_access .)
    THEN            reduce using rule 54 (type -> array_access .)
    DO              reduce using rule 54 (type -> array_access .)
    COMMA           reduce using rule 54 (type -> array_access .)
    RPAREN          reduce using rule 54 (type -> array_access .)
    SEMICOLON       reduce using rule 54 (type -> array_access .)
    TO              reduce using rule 54 (type -> array_access .)
    DOWNTO          reduce using rule 54 (type -> array_access .)
    ELSE            reduce using rule 54 (type -> array_access .)
    RBRACKET        reduce using rule 54 (type -> array_access .)


state 46

    (110) prepare_func_call -> IDENTIFIER .
    (60) identifier -> IDENTIFIER .
    (12) array_access -> IDENTIFIER . LBRACKET type RBRACKET

    LPAREN          reduce using rule 110 (prepare_func_call -> IDENTIFIER .)
    SEMICOLON       reduce using rule 110 (prepare_func_call -> IDENTIFIER .)
    ELSE            reduce using rule 110 (prepare_func_call -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 60 (identifier -> IDENTIFIER .)
    LBRACKET        shift and go to state 76


state 47

    (55) integer -> INTEGER .

    ASSIGNMENT      reduce using rule 55 (integer -> INTEGER .)
    RANGE           reduce using rule 55 (integer -> INTEGER .)
    EQ              reduce using rule 55 (integer -> INTEGER .)
    NEQ             reduce using rule 55 (integer -> INTEGER .)
    LT              reduce using rule 55 (integer -> INTEGER .)
    GT              reduce using rule 55 (integer -> INTEGER .)
    LTE             reduce using rule 55 (integer -> INTEGER .)
    GTE             reduce using rule 55 (integer -> INTEGER .)
    AND             reduce using rule 55 (integer -> INTEGER .)
    OR              reduce using rule 55 (integer -> INTEGER .)
    NOT             reduce using rule 55 (integer -> INTEGER .)
    PLUS            reduce using rule 55 (integer -> INTEGER .)
    MINUS           reduce using rule 55 (integer -> INTEGER .)
    TIMES           reduce using rule 55 (integer -> INTEGER .)
    DIVISION        reduce using rule 55 (integer -> INTEGER .)
    DIV             reduce using rule 55 (integer -> INTEGER .)
    MOD             reduce using rule 55 (integer -> INTEGER .)
    THEN            reduce using rule 55 (integer -> INTEGER .)
    DO              reduce using rule 55 (integer -> INTEGER .)
    COMMA           reduce using rule 55 (integer -> INTEGER .)
    RPAREN          reduce using rule 55 (integer -> INTEGER .)
    SEMICOLON       reduce using rule 55 (integer -> INTEGER .)
    TO              reduce using rule 55 (integer -> INTEGER .)
    DOWNTO          reduce using rule 55 (integer -> INTEGER .)
    ELSE            reduce using rule 55 (integer -> INTEGER .)
    RBRACKET        reduce using rule 55 (integer -> INTEGER .)


state 48

    (56) real -> REAL .

    ASSIGNMENT      reduce using rule 56 (real -> REAL .)
    RANGE           reduce using rule 56 (real -> REAL .)
    EQ              reduce using rule 56 (real -> REAL .)
    NEQ             reduce using rule 56 (real -> REAL .)
    LT              reduce using rule 56 (real -> REAL .)
    GT              reduce using rule 56 (real -> REAL .)
    LTE             reduce using rule 56 (real -> REAL .)
    GTE             reduce using rule 56 (real -> REAL .)
    AND             reduce using rule 56 (real -> REAL .)
    OR              reduce using rule 56 (real -> REAL .)
    NOT             reduce using rule 56 (real -> REAL .)
    PLUS            reduce using rule 56 (real -> REAL .)
    MINUS           reduce using rule 56 (real -> REAL .)
    TIMES           reduce using rule 56 (real -> REAL .)
    DIVISION        reduce using rule 56 (real -> REAL .)
    DIV             reduce using rule 56 (real -> REAL .)
    MOD             reduce using rule 56 (real -> REAL .)
    THEN            reduce using rule 56 (real -> REAL .)
    DO              reduce using rule 56 (real -> REAL .)
    COMMA           reduce using rule 56 (real -> REAL .)
    RPAREN          reduce using rule 56 (real -> REAL .)
    SEMICOLON       reduce using rule 56 (real -> REAL .)
    TO              reduce using rule 56 (real -> REAL .)
    DOWNTO          reduce using rule 56 (real -> REAL .)
    ELSE            reduce using rule 56 (real -> REAL .)
    RBRACKET        reduce using rule 56 (real -> REAL .)


state 49

    (57) string -> STRING .

    ASSIGNMENT      reduce using rule 57 (string -> STRING .)
    RANGE           reduce using rule 57 (string -> STRING .)
    EQ              reduce using rule 57 (string -> STRING .)
    NEQ             reduce using rule 57 (string -> STRING .)
    LT              reduce using rule 57 (string -> STRING .)
    GT              reduce using rule 57 (string -> STRING .)
    LTE             reduce using rule 57 (string -> STRING .)
    GTE             reduce using rule 57 (string -> STRING .)
    AND             reduce using rule 57 (string -> STRING .)
    OR              reduce using rule 57 (string -> STRING .)
    NOT             reduce using rule 57 (string -> STRING .)
    PLUS            reduce using rule 57 (string -> STRING .)
    MINUS           reduce using rule 57 (string -> STRING .)
    TIMES           reduce using rule 57 (string -> STRING .)
    DIVISION        reduce using rule 57 (string -> STRING .)
    DIV             reduce using rule 57 (string -> STRING .)
    MOD             reduce using rule 57 (string -> STRING .)
    THEN            reduce using rule 57 (string -> STRING .)
    DO              reduce using rule 57 (string -> STRING .)
    COMMA           reduce using rule 57 (string -> STRING .)
    RPAREN          reduce using rule 57 (string -> STRING .)
    SEMICOLON       reduce using rule 57 (string -> STRING .)
    TO              reduce using rule 57 (string -> STRING .)
    DOWNTO          reduce using rule 57 (string -> STRING .)
    ELSE            reduce using rule 57 (string -> STRING .)
    RBRACKET        reduce using rule 57 (string -> STRING .)


state 50

    (58) char -> CHAR .

    ASSIGNMENT      reduce using rule 58 (char -> CHAR .)
    RANGE           reduce using rule 58 (char -> CHAR .)
    EQ              reduce using rule 58 (char -> CHAR .)
    NEQ             reduce using rule 58 (char -> CHAR .)
    LT              reduce using rule 58 (char -> CHAR .)
    GT              reduce using rule 58 (char -> CHAR .)
    LTE             reduce using rule 58 (char -> CHAR .)
    GTE             reduce using rule 58 (char -> CHAR .)
    AND             reduce using rule 58 (char -> CHAR .)
    OR              reduce using rule 58 (char -> CHAR .)
    NOT             reduce using rule 58 (char -> CHAR .)
    PLUS            reduce using rule 58 (char -> CHAR .)
    MINUS           reduce using rule 58 (char -> CHAR .)
    TIMES           reduce using rule 58 (char -> CHAR .)
    DIVISION        reduce using rule 58 (char -> CHAR .)
    DIV             reduce using rule 58 (char -> CHAR .)
    MOD             reduce using rule 58 (char -> CHAR .)
    THEN            reduce using rule 58 (char -> CHAR .)
    DO              reduce using rule 58 (char -> CHAR .)
    COMMA           reduce using rule 58 (char -> CHAR .)
    RPAREN          reduce using rule 58 (char -> CHAR .)
    SEMICOLON       reduce using rule 58 (char -> CHAR .)
    TO              reduce using rule 58 (char -> CHAR .)
    DOWNTO          reduce using rule 58 (char -> CHAR .)
    ELSE            reduce using rule 58 (char -> CHAR .)
    RBRACKET        reduce using rule 58 (char -> CHAR .)


state 51

    (59) boolean -> BOOLEAN .

    ASSIGNMENT      reduce using rule 59 (boolean -> BOOLEAN .)
    RANGE           reduce using rule 59 (boolean -> BOOLEAN .)
    EQ              reduce using rule 59 (boolean -> BOOLEAN .)
    NEQ             reduce using rule 59 (boolean -> BOOLEAN .)
    LT              reduce using rule 59 (boolean -> BOOLEAN .)
    GT              reduce using rule 59 (boolean -> BOOLEAN .)
    LTE             reduce using rule 59 (boolean -> BOOLEAN .)
    GTE             reduce using rule 59 (boolean -> BOOLEAN .)
    AND             reduce using rule 59 (boolean -> BOOLEAN .)
    OR              reduce using rule 59 (boolean -> BOOLEAN .)
    NOT             reduce using rule 59 (boolean -> BOOLEAN .)
    PLUS            reduce using rule 59 (boolean -> BOOLEAN .)
    MINUS           reduce using rule 59 (boolean -> BOOLEAN .)
    TIMES           reduce using rule 59 (boolean -> BOOLEAN .)
    DIVISION        reduce using rule 59 (boolean -> BOOLEAN .)
    DIV             reduce using rule 59 (boolean -> BOOLEAN .)
    MOD             reduce using rule 59 (boolean -> BOOLEAN .)
    THEN            reduce using rule 59 (boolean -> BOOLEAN .)
    DO              reduce using rule 59 (boolean -> BOOLEAN .)
    COMMA           reduce using rule 59 (boolean -> BOOLEAN .)
    RPAREN          reduce using rule 59 (boolean -> BOOLEAN .)
    SEMICOLON       reduce using rule 59 (boolean -> BOOLEAN .)
    TO              reduce using rule 59 (boolean -> BOOLEAN .)
    DOWNTO          reduce using rule 59 (boolean -> BOOLEAN .)
    ELSE            reduce using rule 59 (boolean -> BOOLEAN .)
    RBRACKET        reduce using rule 59 (boolean -> BOOLEAN .)


state 52

    (99) function -> func_header SEMICOLON . VAR func_variable_declaration func_body SEMICOLON
    (100) function -> func_header SEMICOLON . func_body SEMICOLON
    (108) func_body -> . BEGIN statements END

    VAR             shift and go to state 77
    BEGIN           shift and go to state 79

    func_body                      shift and go to state 78

state 53

    (85) procedure -> PROCEDURE IDENTIFIER . SEMICOLON procedure_body SEMICOLON
    (86) procedure -> PROCEDURE IDENTIFIER . LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON
    (87) procedure -> PROCEDURE IDENTIFIER . SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON
    (88) procedure -> PROCEDURE IDENTIFIER . LPAREN func_args RPAREN SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON

    SEMICOLON       shift and go to state 80
    LPAREN          shift and go to state 81


state 54

    (101) func_header -> FUNCTION IDENTIFIER . LPAREN func_args RPAREN COLON type_name
    (102) func_header -> FUNCTION IDENTIFIER . LPAREN RPAREN COLON type_name

    LPAREN          shift and go to state 82


state 55

    (2) header -> PROGRAM IDENTIFIER SEMICOLON .

    VAR             reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)
    BEGIN           reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)
    PROCEDURE       reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)


state 56

    (3) block -> VAR variable_declaration body .

    DOT             reduce using rule 3 (block -> VAR variable_declaration body .)


state 57

    (7) variable_declaration -> identifier_list COLON . type_name SEMICOLON variable_declaration
    (8) variable_declaration -> identifier_list COLON . type_name SEMICOLON
    (41) type_name -> . NINTEGER
    (42) type_name -> . NREAL
    (43) type_name -> . NSTRING
    (44) type_name -> . NCHAR
    (45) type_name -> . NBOOLEAN
    (46) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 84
    NREAL           shift and go to state 85
    NSTRING         shift and go to state 86
    NCHAR           shift and go to state 87
    NBOOLEAN        shift and go to state 88
    ARRAY           shift and go to state 90

    type_name                      shift and go to state 83
    array_type                     shift and go to state 89

state 58

    (9) identifier_list -> IDENTIFIER COMMA . identifier_list
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    identifier_list                shift and go to state 91

state 59

    (13) body -> BEGIN statements END .

    DOT             reduce using rule 13 (body -> BEGIN statements END .)


state 60

    (14) statements -> statement SEMICOLON . statements
    (15) statements -> statement SEMICOLON .
    (14) statements -> . statement SEMICOLON statements
    (15) statements -> . statement SEMICOLON
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (139) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (92) procedure_call -> . prepare_func_call
    (93) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (116) cond_if -> . IF condition THEN statement
    (117) cond_if -> . IF condition THEN statement ELSE statement
    (118) cond_if -> . IF condition THEN statement ELSE if_body
    (119) cond_if -> . IF condition THEN if_body
    (120) cond_if -> . IF condition THEN if_body ELSE if_body
    (121) cond_if -> . IF condition THEN if_body ELSE statement
    (135) while_loop -> . WHILE condition DO statement
    (136) while_loop -> . WHILE condition DO if_body
    (131) for_loop -> . FOR assignment to type DO statement
    (132) for_loop -> . FOR assignment to type DO if_body
    (133) for_loop -> . FOR assignment downto type DO statement
    (134) for_loop -> . FOR assignment downto type DO if_body
    (137) repeat_loop -> . REPEAT statements UNTIL condition
    (138) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (110) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    END             reduce using rule 15 (statements -> statement SEMICOLON .)
    UNTIL           reduce using rule 15 (statements -> statement SEMICOLON .)
    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    statement                      shift and go to state 21
    statements                     shift and go to state 92
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 61

    (139) writeln -> WRITELN LPAREN . writeln_args RPAREN
    (140) writeln_args -> . type COMMA writeln_args
    (141) writeln_args -> . type
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    writeln_args                   shift and go to state 93
    type                           shift and go to state 94
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 62

    (24) assignment -> type ASSIGNMENT . type
    (25) assignment -> type ASSIGNMENT . expression
    (26) assignment -> type ASSIGNMENT . length
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (27) expression -> . type operation type
    (28) expression -> . expression_paren
    (29) expression -> . expression operation type
    (30) expression -> . expression operation expression
    (31) expression -> . func_call
    (32) expression -> . condition
    (98) length -> . LENGTH LPAREN type RPAREN
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (33) expression_paren -> . LPAREN expression RPAREN
    (122) condition -> . expression comparator expression
    (123) condition -> . type comparator expression
    (124) condition -> . type comparator type
    (125) condition -> . expression comparator type
    (126) condition -> . func_call
    (127) condition -> . type
    (110) prepare_func_call -> . IDENTIFIER

    LENGTH          shift and go to state 100
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 70

    type                           shift and go to state 95
    expression                     shift and go to state 96
    length                         shift and go to state 97
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 98
    array_access                   shift and go to state 45
    expression_paren               shift and go to state 68
    condition                      shift and go to state 99
    prepare_func_call              shift and go to state 69

state 63

    (93) procedure_call -> prepare_func_call LPAREN . procedure_arg_list RPAREN
    (109) func_call -> prepare_func_call LPAREN . arg_list RPAREN
    (94) procedure_arg_list -> . IDENTIFIER COMMA procedure_arg_list
    (95) procedure_arg_list -> . IDENTIFIER
    (96) procedure_arg_list -> . type COMMA procedure_arg_list
    (97) procedure_arg_list -> . type
    (111) arg_list -> . IDENTIFIER COMMA arg_list
    (112) arg_list -> . IDENTIFIER
    (113) arg_list -> . type COMMA arg_list
    (114) arg_list -> . type
    (115) arg_list -> .
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    IDENTIFIER      shift and go to state 103
    RPAREN          reduce using rule 115 (arg_list -> .)
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    prepare_func_call              shift and go to state 69
    procedure_arg_list             shift and go to state 101
    arg_list                       shift and go to state 102
    type                           shift and go to state 104
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 64

    (116) cond_if -> IF condition . THEN statement
    (117) cond_if -> IF condition . THEN statement ELSE statement
    (118) cond_if -> IF condition . THEN statement ELSE if_body
    (119) cond_if -> IF condition . THEN if_body
    (120) cond_if -> IF condition . THEN if_body ELSE if_body
    (121) cond_if -> IF condition . THEN if_body ELSE statement
    (32) expression -> condition .

    THEN            shift and go to state 105
    RANGE           reduce using rule 32 (expression -> condition .)
    EQ              reduce using rule 32 (expression -> condition .)
    NEQ             reduce using rule 32 (expression -> condition .)
    LT              reduce using rule 32 (expression -> condition .)
    GT              reduce using rule 32 (expression -> condition .)
    LTE             reduce using rule 32 (expression -> condition .)
    GTE             reduce using rule 32 (expression -> condition .)
    AND             reduce using rule 32 (expression -> condition .)
    OR              reduce using rule 32 (expression -> condition .)
    NOT             reduce using rule 32 (expression -> condition .)
    PLUS            reduce using rule 32 (expression -> condition .)
    MINUS           reduce using rule 32 (expression -> condition .)
    TIMES           reduce using rule 32 (expression -> condition .)
    DIVISION        reduce using rule 32 (expression -> condition .)
    DIV             reduce using rule 32 (expression -> condition .)
    MOD             reduce using rule 32 (expression -> condition .)


state 65

    (122) condition -> expression . comparator expression
    (125) condition -> expression . comparator type
    (29) expression -> expression . operation type
    (30) expression -> expression . operation expression
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD

    RANGE           shift and go to state 123
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138

    comparator                     shift and go to state 106
    operation                      shift and go to state 107
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122

state 66

    (123) condition -> type . comparator expression
    (124) condition -> type . comparator type
    (127) condition -> type .
    (27) expression -> type . operation type
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    THEN            reduce using rule 127 (condition -> type .)
    DO              reduce using rule 127 (condition -> type .)
    SEMICOLON       reduce using rule 127 (condition -> type .)
    ELSE            reduce using rule 127 (condition -> type .)
    RANGE           shift and go to state 123
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138

  ! RANGE           [ reduce using rule 127 (condition -> type .) ]
  ! EQ              [ reduce using rule 127 (condition -> type .) ]
  ! NEQ             [ reduce using rule 127 (condition -> type .) ]
  ! LT              [ reduce using rule 127 (condition -> type .) ]
  ! GT              [ reduce using rule 127 (condition -> type .) ]
  ! LTE             [ reduce using rule 127 (condition -> type .) ]
  ! GTE             [ reduce using rule 127 (condition -> type .) ]
  ! AND             [ reduce using rule 127 (condition -> type .) ]
  ! OR              [ reduce using rule 127 (condition -> type .) ]
  ! NOT             [ reduce using rule 127 (condition -> type .) ]
  ! PLUS            [ reduce using rule 127 (condition -> type .) ]
  ! MINUS           [ reduce using rule 127 (condition -> type .) ]
  ! TIMES           [ reduce using rule 127 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 127 (condition -> type .) ]
  ! DIV             [ reduce using rule 127 (condition -> type .) ]
  ! MOD             [ reduce using rule 127 (condition -> type .) ]

    comparator                     shift and go to state 139
    operation                      shift and go to state 140
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122

state 67

    (126) condition -> func_call .
    (31) expression -> func_call .
    (53) type -> func_call .

  ! reduce/reduce conflict for RANGE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for EQ resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for NEQ resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for LTE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for GTE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for AND resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for OR resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for NOT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DIVISION resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DIV resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for MOD resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for RANGE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for EQ resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for NEQ resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for LTE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for GTE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for AND resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for OR resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for NOT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DIVISION resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DIV resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for MOD resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for THEN resolved using rule 53 (type -> func_call .)
  ! reduce/reduce conflict for DO resolved using rule 53 (type -> func_call .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 53 (type -> func_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 53 (type -> func_call .)
    RANGE           reduce using rule 31 (expression -> func_call .)
    EQ              reduce using rule 31 (expression -> func_call .)
    NEQ             reduce using rule 31 (expression -> func_call .)
    LT              reduce using rule 31 (expression -> func_call .)
    GT              reduce using rule 31 (expression -> func_call .)
    LTE             reduce using rule 31 (expression -> func_call .)
    GTE             reduce using rule 31 (expression -> func_call .)
    AND             reduce using rule 31 (expression -> func_call .)
    OR              reduce using rule 31 (expression -> func_call .)
    NOT             reduce using rule 31 (expression -> func_call .)
    PLUS            reduce using rule 31 (expression -> func_call .)
    MINUS           reduce using rule 31 (expression -> func_call .)
    TIMES           reduce using rule 31 (expression -> func_call .)
    DIVISION        reduce using rule 31 (expression -> func_call .)
    DIV             reduce using rule 31 (expression -> func_call .)
    MOD             reduce using rule 31 (expression -> func_call .)
    THEN            reduce using rule 53 (type -> func_call .)
    DO              reduce using rule 53 (type -> func_call .)
    SEMICOLON       reduce using rule 53 (type -> func_call .)
    ELSE            reduce using rule 53 (type -> func_call .)

  ! THEN            [ reduce using rule 126 (condition -> func_call .) ]
  ! RANGE           [ reduce using rule 126 (condition -> func_call .) ]
  ! EQ              [ reduce using rule 126 (condition -> func_call .) ]
  ! NEQ             [ reduce using rule 126 (condition -> func_call .) ]
  ! LT              [ reduce using rule 126 (condition -> func_call .) ]
  ! GT              [ reduce using rule 126 (condition -> func_call .) ]
  ! LTE             [ reduce using rule 126 (condition -> func_call .) ]
  ! GTE             [ reduce using rule 126 (condition -> func_call .) ]
  ! AND             [ reduce using rule 126 (condition -> func_call .) ]
  ! OR              [ reduce using rule 126 (condition -> func_call .) ]
  ! NOT             [ reduce using rule 126 (condition -> func_call .) ]
  ! PLUS            [ reduce using rule 126 (condition -> func_call .) ]
  ! MINUS           [ reduce using rule 126 (condition -> func_call .) ]
  ! TIMES           [ reduce using rule 126 (condition -> func_call .) ]
  ! DIVISION        [ reduce using rule 126 (condition -> func_call .) ]
  ! DIV             [ reduce using rule 126 (condition -> func_call .) ]
  ! MOD             [ reduce using rule 126 (condition -> func_call .) ]
  ! DO              [ reduce using rule 126 (condition -> func_call .) ]
  ! SEMICOLON       [ reduce using rule 126 (condition -> func_call .) ]
  ! ELSE            [ reduce using rule 126 (condition -> func_call .) ]
  ! RANGE           [ reduce using rule 53 (type -> func_call .) ]
  ! EQ              [ reduce using rule 53 (type -> func_call .) ]
  ! NEQ             [ reduce using rule 53 (type -> func_call .) ]
  ! LT              [ reduce using rule 53 (type -> func_call .) ]
  ! GT              [ reduce using rule 53 (type -> func_call .) ]
  ! LTE             [ reduce using rule 53 (type -> func_call .) ]
  ! GTE             [ reduce using rule 53 (type -> func_call .) ]
  ! AND             [ reduce using rule 53 (type -> func_call .) ]
  ! OR              [ reduce using rule 53 (type -> func_call .) ]
  ! NOT             [ reduce using rule 53 (type -> func_call .) ]
  ! PLUS            [ reduce using rule 53 (type -> func_call .) ]
  ! MINUS           [ reduce using rule 53 (type -> func_call .) ]
  ! TIMES           [ reduce using rule 53 (type -> func_call .) ]
  ! DIVISION        [ reduce using rule 53 (type -> func_call .) ]
  ! DIV             [ reduce using rule 53 (type -> func_call .) ]
  ! MOD             [ reduce using rule 53 (type -> func_call .) ]


state 68

    (28) expression -> expression_paren .

    RANGE           reduce using rule 28 (expression -> expression_paren .)
    EQ              reduce using rule 28 (expression -> expression_paren .)
    NEQ             reduce using rule 28 (expression -> expression_paren .)
    LT              reduce using rule 28 (expression -> expression_paren .)
    GT              reduce using rule 28 (expression -> expression_paren .)
    LTE             reduce using rule 28 (expression -> expression_paren .)
    GTE             reduce using rule 28 (expression -> expression_paren .)
    AND             reduce using rule 28 (expression -> expression_paren .)
    OR              reduce using rule 28 (expression -> expression_paren .)
    NOT             reduce using rule 28 (expression -> expression_paren .)
    PLUS            reduce using rule 28 (expression -> expression_paren .)
    MINUS           reduce using rule 28 (expression -> expression_paren .)
    TIMES           reduce using rule 28 (expression -> expression_paren .)
    DIVISION        reduce using rule 28 (expression -> expression_paren .)
    DIV             reduce using rule 28 (expression -> expression_paren .)
    MOD             reduce using rule 28 (expression -> expression_paren .)
    SEMICOLON       reduce using rule 28 (expression -> expression_paren .)
    TO              reduce using rule 28 (expression -> expression_paren .)
    DOWNTO          reduce using rule 28 (expression -> expression_paren .)
    ELSE            reduce using rule 28 (expression -> expression_paren .)
    RPAREN          reduce using rule 28 (expression -> expression_paren .)
    THEN            reduce using rule 28 (expression -> expression_paren .)
    DO              reduce using rule 28 (expression -> expression_paren .)


state 69

    (109) func_call -> prepare_func_call . LPAREN arg_list RPAREN

    LPAREN          shift and go to state 141


state 70

    (33) expression_paren -> LPAREN . expression RPAREN
    (27) expression -> . type operation type
    (28) expression -> . expression_paren
    (29) expression -> . expression operation type
    (30) expression -> . expression operation expression
    (31) expression -> . func_call
    (32) expression -> . condition
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (33) expression_paren -> . LPAREN expression RPAREN
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (122) condition -> . expression comparator expression
    (123) condition -> . type comparator expression
    (124) condition -> . type comparator type
    (125) condition -> . expression comparator type
    (126) condition -> . func_call
    (127) condition -> . type
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    LPAREN          shift and go to state 70
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    expression                     shift and go to state 142
    type                           shift and go to state 143
    expression_paren               shift and go to state 68
    func_call                      shift and go to state 144
    condition                      shift and go to state 99
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 71

    (60) identifier -> IDENTIFIER .
    (12) array_access -> IDENTIFIER . LBRACKET type RBRACKET
    (110) prepare_func_call -> IDENTIFIER .

    RANGE           reduce using rule 60 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 60 (identifier -> IDENTIFIER .)
    NEQ             reduce using rule 60 (identifier -> IDENTIFIER .)
    LT              reduce using rule 60 (identifier -> IDENTIFIER .)
    GT              reduce using rule 60 (identifier -> IDENTIFIER .)
    LTE             reduce using rule 60 (identifier -> IDENTIFIER .)
    GTE             reduce using rule 60 (identifier -> IDENTIFIER .)
    AND             reduce using rule 60 (identifier -> IDENTIFIER .)
    OR              reduce using rule 60 (identifier -> IDENTIFIER .)
    NOT             reduce using rule 60 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 60 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 60 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 60 (identifier -> IDENTIFIER .)
    DIVISION        reduce using rule 60 (identifier -> IDENTIFIER .)
    DIV             reduce using rule 60 (identifier -> IDENTIFIER .)
    MOD             reduce using rule 60 (identifier -> IDENTIFIER .)
    THEN            reduce using rule 60 (identifier -> IDENTIFIER .)
    DO              reduce using rule 60 (identifier -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 60 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 60 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 60 (identifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 60 (identifier -> IDENTIFIER .)
    TO              reduce using rule 60 (identifier -> IDENTIFIER .)
    DOWNTO          reduce using rule 60 (identifier -> IDENTIFIER .)
    ELSE            reduce using rule 60 (identifier -> IDENTIFIER .)
    RBRACKET        reduce using rule 60 (identifier -> IDENTIFIER .)
    LBRACKET        shift and go to state 76
    LPAREN          reduce using rule 110 (prepare_func_call -> IDENTIFIER .)


state 72

    (135) while_loop -> WHILE condition . DO statement
    (136) while_loop -> WHILE condition . DO if_body
    (32) expression -> condition .

    DO              shift and go to state 145
    RANGE           reduce using rule 32 (expression -> condition .)
    EQ              reduce using rule 32 (expression -> condition .)
    NEQ             reduce using rule 32 (expression -> condition .)
    LT              reduce using rule 32 (expression -> condition .)
    GT              reduce using rule 32 (expression -> condition .)
    LTE             reduce using rule 32 (expression -> condition .)
    GTE             reduce using rule 32 (expression -> condition .)
    AND             reduce using rule 32 (expression -> condition .)
    OR              reduce using rule 32 (expression -> condition .)
    NOT             reduce using rule 32 (expression -> condition .)
    PLUS            reduce using rule 32 (expression -> condition .)
    MINUS           reduce using rule 32 (expression -> condition .)
    TIMES           reduce using rule 32 (expression -> condition .)
    DIVISION        reduce using rule 32 (expression -> condition .)
    DIV             reduce using rule 32 (expression -> condition .)
    MOD             reduce using rule 32 (expression -> condition .)


state 73

    (131) for_loop -> FOR assignment . to type DO statement
    (132) for_loop -> FOR assignment . to type DO if_body
    (133) for_loop -> FOR assignment . downto type DO statement
    (134) for_loop -> FOR assignment . downto type DO if_body
    (129) to -> . TO
    (130) downto -> . DOWNTO

    TO              shift and go to state 148
    DOWNTO          shift and go to state 149

    to                             shift and go to state 146
    downto                         shift and go to state 147

state 74

    (137) repeat_loop -> REPEAT statements . UNTIL condition

    UNTIL           shift and go to state 150


state 75

    (138) readln -> READLN LPAREN . type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 151
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 76

    (12) array_access -> IDENTIFIER LBRACKET . type RBRACKET
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 152
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 77

    (99) function -> func_header SEMICOLON VAR . func_variable_declaration func_body SEMICOLON
    (106) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON func_variable_declaration
    (107) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    func_variable_declaration      shift and go to state 153
    identifier_list                shift and go to state 154

state 78

    (100) function -> func_header SEMICOLON func_body . SEMICOLON

    SEMICOLON       shift and go to state 155


state 79

    (108) func_body -> BEGIN . statements END
    (14) statements -> . statement SEMICOLON statements
    (15) statements -> . statement SEMICOLON
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (139) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (92) procedure_call -> . prepare_func_call
    (93) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (116) cond_if -> . IF condition THEN statement
    (117) cond_if -> . IF condition THEN statement ELSE statement
    (118) cond_if -> . IF condition THEN statement ELSE if_body
    (119) cond_if -> . IF condition THEN if_body
    (120) cond_if -> . IF condition THEN if_body ELSE if_body
    (121) cond_if -> . IF condition THEN if_body ELSE statement
    (135) while_loop -> . WHILE condition DO statement
    (136) while_loop -> . WHILE condition DO if_body
    (131) for_loop -> . FOR assignment to type DO statement
    (132) for_loop -> . FOR assignment to type DO if_body
    (133) for_loop -> . FOR assignment downto type DO statement
    (134) for_loop -> . FOR assignment downto type DO if_body
    (137) repeat_loop -> . REPEAT statements UNTIL condition
    (138) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (110) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    statements                     shift and go to state 156
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 80

    (85) procedure -> PROCEDURE IDENTIFIER SEMICOLON . procedure_body SEMICOLON
    (87) procedure -> PROCEDURE IDENTIFIER SEMICOLON . VAR func_variable_declaration procedure_body SEMICOLON
    (91) procedure_body -> . BEGIN statements END

    VAR             shift and go to state 158
    BEGIN           shift and go to state 159

    procedure_body                 shift and go to state 157

state 81

    (86) procedure -> PROCEDURE IDENTIFIER LPAREN . func_args RPAREN SEMICOLON procedure_body SEMICOLON
    (88) procedure -> PROCEDURE IDENTIFIER LPAREN . func_args RPAREN SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON
    (103) func_args -> . func_arglist SEMICOLON func_args
    (104) func_args -> . func_arglist
    (105) func_arglist -> . identifier_list COLON type_name
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    func_args                      shift and go to state 160
    func_arglist                   shift and go to state 161
    identifier_list                shift and go to state 162

state 82

    (101) func_header -> FUNCTION IDENTIFIER LPAREN . func_args RPAREN COLON type_name
    (102) func_header -> FUNCTION IDENTIFIER LPAREN . RPAREN COLON type_name
    (103) func_args -> . func_arglist SEMICOLON func_args
    (104) func_args -> . func_arglist
    (105) func_arglist -> . identifier_list COLON type_name
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    RPAREN          shift and go to state 164
    IDENTIFIER      shift and go to state 17

    func_args                      shift and go to state 163
    func_arglist                   shift and go to state 161
    identifier_list                shift and go to state 162

state 83

    (7) variable_declaration -> identifier_list COLON type_name . SEMICOLON variable_declaration
    (8) variable_declaration -> identifier_list COLON type_name . SEMICOLON

    SEMICOLON       shift and go to state 165


state 84

    (41) type_name -> NINTEGER .

    SEMICOLON       reduce using rule 41 (type_name -> NINTEGER .)
    RPAREN          reduce using rule 41 (type_name -> NINTEGER .)


state 85

    (42) type_name -> NREAL .

    SEMICOLON       reduce using rule 42 (type_name -> NREAL .)
    RPAREN          reduce using rule 42 (type_name -> NREAL .)


state 86

    (43) type_name -> NSTRING .

    SEMICOLON       reduce using rule 43 (type_name -> NSTRING .)
    RPAREN          reduce using rule 43 (type_name -> NSTRING .)


state 87

    (44) type_name -> NCHAR .

    SEMICOLON       reduce using rule 44 (type_name -> NCHAR .)
    RPAREN          reduce using rule 44 (type_name -> NCHAR .)


state 88

    (45) type_name -> NBOOLEAN .

    SEMICOLON       reduce using rule 45 (type_name -> NBOOLEAN .)
    RPAREN          reduce using rule 45 (type_name -> NBOOLEAN .)


state 89

    (46) type_name -> array_type .

    SEMICOLON       reduce using rule 46 (type_name -> array_type .)
    RPAREN          reduce using rule 46 (type_name -> array_type .)


state 90

    (11) array_type -> ARRAY . LBRACKET type RANGE type RBRACKET OF type_name

    LBRACKET        shift and go to state 166


state 91

    (9) identifier_list -> IDENTIFIER COMMA identifier_list .

    COLON           reduce using rule 9 (identifier_list -> IDENTIFIER COMMA identifier_list .)


state 92

    (14) statements -> statement SEMICOLON statements .

    END             reduce using rule 14 (statements -> statement SEMICOLON statements .)
    UNTIL           reduce using rule 14 (statements -> statement SEMICOLON statements .)


state 93

    (139) writeln -> WRITELN LPAREN writeln_args . RPAREN

    RPAREN          shift and go to state 167


state 94

    (140) writeln_args -> type . COMMA writeln_args
    (141) writeln_args -> type .

    COMMA           shift and go to state 168
    RPAREN          reduce using rule 141 (writeln_args -> type .)


state 95

    (24) assignment -> type ASSIGNMENT type .
    (27) expression -> type . operation type
    (123) condition -> type . comparator expression
    (124) condition -> type . comparator type
    (127) condition -> type .
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

  ! reduce/reduce conflict for SEMICOLON resolved using rule 24 (assignment -> type ASSIGNMENT type .)
  ! reduce/reduce conflict for TO resolved using rule 24 (assignment -> type ASSIGNMENT type .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 24 (assignment -> type ASSIGNMENT type .)
  ! reduce/reduce conflict for ELSE resolved using rule 24 (assignment -> type ASSIGNMENT type .)
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    SEMICOLON       reduce using rule 24 (assignment -> type ASSIGNMENT type .)
    TO              reduce using rule 24 (assignment -> type ASSIGNMENT type .)
    DOWNTO          reduce using rule 24 (assignment -> type ASSIGNMENT type .)
    ELSE            reduce using rule 24 (assignment -> type ASSIGNMENT type .)
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

  ! RANGE           [ reduce using rule 127 (condition -> type .) ]
  ! PLUS            [ reduce using rule 127 (condition -> type .) ]
  ! MINUS           [ reduce using rule 127 (condition -> type .) ]
  ! TIMES           [ reduce using rule 127 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 127 (condition -> type .) ]
  ! DIV             [ reduce using rule 127 (condition -> type .) ]
  ! MOD             [ reduce using rule 127 (condition -> type .) ]
  ! EQ              [ reduce using rule 127 (condition -> type .) ]
  ! NEQ             [ reduce using rule 127 (condition -> type .) ]
  ! LT              [ reduce using rule 127 (condition -> type .) ]
  ! GT              [ reduce using rule 127 (condition -> type .) ]
  ! LTE             [ reduce using rule 127 (condition -> type .) ]
  ! GTE             [ reduce using rule 127 (condition -> type .) ]
  ! AND             [ reduce using rule 127 (condition -> type .) ]
  ! OR              [ reduce using rule 127 (condition -> type .) ]
  ! NOT             [ reduce using rule 127 (condition -> type .) ]
  ! SEMICOLON       [ reduce using rule 127 (condition -> type .) ]
  ! TO              [ reduce using rule 127 (condition -> type .) ]
  ! DOWNTO          [ reduce using rule 127 (condition -> type .) ]
  ! ELSE            [ reduce using rule 127 (condition -> type .) ]

    operation                      shift and go to state 140
    comparator                     shift and go to state 139
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 96

    (25) assignment -> type ASSIGNMENT expression .
    (29) expression -> expression . operation type
    (30) expression -> expression . operation expression
    (122) condition -> expression . comparator expression
    (125) condition -> expression . comparator type
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

    SEMICOLON       reduce using rule 25 (assignment -> type ASSIGNMENT expression .)
    TO              reduce using rule 25 (assignment -> type ASSIGNMENT expression .)
    DOWNTO          reduce using rule 25 (assignment -> type ASSIGNMENT expression .)
    ELSE            reduce using rule 25 (assignment -> type ASSIGNMENT expression .)
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

    operation                      shift and go to state 107
    comparator                     shift and go to state 106
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 97

    (26) assignment -> type ASSIGNMENT length .

    SEMICOLON       reduce using rule 26 (assignment -> type ASSIGNMENT length .)
    TO              reduce using rule 26 (assignment -> type ASSIGNMENT length .)
    DOWNTO          reduce using rule 26 (assignment -> type ASSIGNMENT length .)
    ELSE            reduce using rule 26 (assignment -> type ASSIGNMENT length .)


state 98

    (53) type -> func_call .
    (31) expression -> func_call .
    (126) condition -> func_call .

  ! reduce/reduce conflict for RANGE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DIVISION resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DIV resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for MOD resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for EQ resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for NEQ resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for LTE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for GTE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for AND resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for OR resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for NOT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for TO resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for THEN resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DO resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for RANGE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DIVISION resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DIV resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for MOD resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for EQ resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for NEQ resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for LTE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for GTE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for AND resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for OR resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for NOT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for TO resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for THEN resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DO resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 31 (expression -> func_call .)
    RANGE           reduce using rule 31 (expression -> func_call .)
    PLUS            reduce using rule 31 (expression -> func_call .)
    MINUS           reduce using rule 31 (expression -> func_call .)
    TIMES           reduce using rule 31 (expression -> func_call .)
    DIVISION        reduce using rule 31 (expression -> func_call .)
    DIV             reduce using rule 31 (expression -> func_call .)
    MOD             reduce using rule 31 (expression -> func_call .)
    EQ              reduce using rule 31 (expression -> func_call .)
    NEQ             reduce using rule 31 (expression -> func_call .)
    LT              reduce using rule 31 (expression -> func_call .)
    GT              reduce using rule 31 (expression -> func_call .)
    LTE             reduce using rule 31 (expression -> func_call .)
    GTE             reduce using rule 31 (expression -> func_call .)
    AND             reduce using rule 31 (expression -> func_call .)
    OR              reduce using rule 31 (expression -> func_call .)
    NOT             reduce using rule 31 (expression -> func_call .)
    SEMICOLON       reduce using rule 31 (expression -> func_call .)
    TO              reduce using rule 31 (expression -> func_call .)
    DOWNTO          reduce using rule 31 (expression -> func_call .)
    ELSE            reduce using rule 31 (expression -> func_call .)
    THEN            reduce using rule 31 (expression -> func_call .)
    DO              reduce using rule 31 (expression -> func_call .)
    RPAREN          reduce using rule 31 (expression -> func_call .)

  ! RANGE           [ reduce using rule 53 (type -> func_call .) ]
  ! PLUS            [ reduce using rule 53 (type -> func_call .) ]
  ! MINUS           [ reduce using rule 53 (type -> func_call .) ]
  ! TIMES           [ reduce using rule 53 (type -> func_call .) ]
  ! DIVISION        [ reduce using rule 53 (type -> func_call .) ]
  ! DIV             [ reduce using rule 53 (type -> func_call .) ]
  ! MOD             [ reduce using rule 53 (type -> func_call .) ]
  ! EQ              [ reduce using rule 53 (type -> func_call .) ]
  ! NEQ             [ reduce using rule 53 (type -> func_call .) ]
  ! LT              [ reduce using rule 53 (type -> func_call .) ]
  ! GT              [ reduce using rule 53 (type -> func_call .) ]
  ! LTE             [ reduce using rule 53 (type -> func_call .) ]
  ! GTE             [ reduce using rule 53 (type -> func_call .) ]
  ! AND             [ reduce using rule 53 (type -> func_call .) ]
  ! OR              [ reduce using rule 53 (type -> func_call .) ]
  ! NOT             [ reduce using rule 53 (type -> func_call .) ]
  ! SEMICOLON       [ reduce using rule 53 (type -> func_call .) ]
  ! TO              [ reduce using rule 53 (type -> func_call .) ]
  ! DOWNTO          [ reduce using rule 53 (type -> func_call .) ]
  ! ELSE            [ reduce using rule 53 (type -> func_call .) ]
  ! RPAREN          [ reduce using rule 53 (type -> func_call .) ]
  ! THEN            [ reduce using rule 53 (type -> func_call .) ]
  ! DO              [ reduce using rule 53 (type -> func_call .) ]
  ! RANGE           [ reduce using rule 126 (condition -> func_call .) ]
  ! PLUS            [ reduce using rule 126 (condition -> func_call .) ]
  ! MINUS           [ reduce using rule 126 (condition -> func_call .) ]
  ! TIMES           [ reduce using rule 126 (condition -> func_call .) ]
  ! DIVISION        [ reduce using rule 126 (condition -> func_call .) ]
  ! DIV             [ reduce using rule 126 (condition -> func_call .) ]
  ! MOD             [ reduce using rule 126 (condition -> func_call .) ]
  ! EQ              [ reduce using rule 126 (condition -> func_call .) ]
  ! NEQ             [ reduce using rule 126 (condition -> func_call .) ]
  ! LT              [ reduce using rule 126 (condition -> func_call .) ]
  ! GT              [ reduce using rule 126 (condition -> func_call .) ]
  ! LTE             [ reduce using rule 126 (condition -> func_call .) ]
  ! GTE             [ reduce using rule 126 (condition -> func_call .) ]
  ! AND             [ reduce using rule 126 (condition -> func_call .) ]
  ! OR              [ reduce using rule 126 (condition -> func_call .) ]
  ! NOT             [ reduce using rule 126 (condition -> func_call .) ]
  ! SEMICOLON       [ reduce using rule 126 (condition -> func_call .) ]
  ! TO              [ reduce using rule 126 (condition -> func_call .) ]
  ! DOWNTO          [ reduce using rule 126 (condition -> func_call .) ]
  ! ELSE            [ reduce using rule 126 (condition -> func_call .) ]
  ! THEN            [ reduce using rule 126 (condition -> func_call .) ]
  ! DO              [ reduce using rule 126 (condition -> func_call .) ]
  ! RPAREN          [ reduce using rule 126 (condition -> func_call .) ]


state 99

    (32) expression -> condition .

    RANGE           reduce using rule 32 (expression -> condition .)
    PLUS            reduce using rule 32 (expression -> condition .)
    MINUS           reduce using rule 32 (expression -> condition .)
    TIMES           reduce using rule 32 (expression -> condition .)
    DIVISION        reduce using rule 32 (expression -> condition .)
    DIV             reduce using rule 32 (expression -> condition .)
    MOD             reduce using rule 32 (expression -> condition .)
    EQ              reduce using rule 32 (expression -> condition .)
    NEQ             reduce using rule 32 (expression -> condition .)
    LT              reduce using rule 32 (expression -> condition .)
    GT              reduce using rule 32 (expression -> condition .)
    LTE             reduce using rule 32 (expression -> condition .)
    GTE             reduce using rule 32 (expression -> condition .)
    AND             reduce using rule 32 (expression -> condition .)
    OR              reduce using rule 32 (expression -> condition .)
    NOT             reduce using rule 32 (expression -> condition .)
    SEMICOLON       reduce using rule 32 (expression -> condition .)
    TO              reduce using rule 32 (expression -> condition .)
    DOWNTO          reduce using rule 32 (expression -> condition .)
    ELSE            reduce using rule 32 (expression -> condition .)
    RPAREN          reduce using rule 32 (expression -> condition .)
    THEN            reduce using rule 32 (expression -> condition .)
    DO              reduce using rule 32 (expression -> condition .)


state 100

    (98) length -> LENGTH . LPAREN type RPAREN

    LPAREN          shift and go to state 169


state 101

    (93) procedure_call -> prepare_func_call LPAREN procedure_arg_list . RPAREN

    RPAREN          shift and go to state 170


state 102

    (109) func_call -> prepare_func_call LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 171


state 103

    (94) procedure_arg_list -> IDENTIFIER . COMMA procedure_arg_list
    (95) procedure_arg_list -> IDENTIFIER .
    (111) arg_list -> IDENTIFIER . COMMA arg_list
    (112) arg_list -> IDENTIFIER .
    (60) identifier -> IDENTIFIER .
    (12) array_access -> IDENTIFIER . LBRACKET type RBRACKET
    (110) prepare_func_call -> IDENTIFIER .

  ! reduce/reduce conflict for RPAREN resolved using rule 95 (procedure_arg_list -> IDENTIFIER .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 60 (identifier -> IDENTIFIER .)
    COMMA           shift and go to state 172
    RPAREN          reduce using rule 60 (identifier -> IDENTIFIER .)
    LBRACKET        shift and go to state 76
    LPAREN          reduce using rule 110 (prepare_func_call -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 95 (procedure_arg_list -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 112 (arg_list -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 60 (identifier -> IDENTIFIER .) ]


state 104

    (96) procedure_arg_list -> type . COMMA procedure_arg_list
    (97) procedure_arg_list -> type .
    (113) arg_list -> type . COMMA arg_list
    (114) arg_list -> type .

  ! reduce/reduce conflict for RPAREN resolved using rule 97 (procedure_arg_list -> type .)
    COMMA           shift and go to state 173
    RPAREN          reduce using rule 97 (procedure_arg_list -> type .)

  ! RPAREN          [ reduce using rule 114 (arg_list -> type .) ]


state 105

    (116) cond_if -> IF condition THEN . statement
    (117) cond_if -> IF condition THEN . statement ELSE statement
    (118) cond_if -> IF condition THEN . statement ELSE if_body
    (119) cond_if -> IF condition THEN . if_body
    (120) cond_if -> IF condition THEN . if_body ELSE if_body
    (121) cond_if -> IF condition THEN . if_body ELSE statement
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (128) if_body -> . BEGIN statements END
    (139) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (92) procedure_call -> . prepare_func_call
    (93) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (116) cond_if -> . IF condition THEN statement
    (117) cond_if -> . IF condition THEN statement ELSE statement
    (118) cond_if -> . IF condition THEN statement ELSE if_body
    (119) cond_if -> . IF condition THEN if_body
    (120) cond_if -> . IF condition THEN if_body ELSE if_body
    (121) cond_if -> . IF condition THEN if_body ELSE statement
    (135) while_loop -> . WHILE condition DO statement
    (136) while_loop -> . WHILE condition DO if_body
    (131) for_loop -> . FOR assignment to type DO statement
    (132) for_loop -> . FOR assignment to type DO if_body
    (133) for_loop -> . FOR assignment downto type DO statement
    (134) for_loop -> . FOR assignment downto type DO if_body
    (137) repeat_loop -> . REPEAT statements UNTIL condition
    (138) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (110) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    BEGIN           shift and go to state 176
    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    statement                      shift and go to state 174
    if_body                        shift and go to state 175
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 106

    (122) condition -> expression comparator . expression
    (125) condition -> expression comparator . type
    (27) expression -> . type operation type
    (28) expression -> . expression_paren
    (29) expression -> . expression operation type
    (30) expression -> . expression operation expression
    (31) expression -> . func_call
    (32) expression -> . condition
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (33) expression_paren -> . LPAREN expression RPAREN
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (122) condition -> . expression comparator expression
    (123) condition -> . type comparator expression
    (124) condition -> . type comparator type
    (125) condition -> . expression comparator type
    (126) condition -> . func_call
    (127) condition -> . type
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    LPAREN          shift and go to state 70
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    expression                     shift and go to state 177
    type                           shift and go to state 178
    expression_paren               shift and go to state 68
    func_call                      shift and go to state 144
    condition                      shift and go to state 99
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 107

    (29) expression -> expression operation . type
    (30) expression -> expression operation . expression
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (27) expression -> . type operation type
    (28) expression -> . expression_paren
    (29) expression -> . expression operation type
    (30) expression -> . expression operation expression
    (31) expression -> . func_call
    (32) expression -> . condition
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (33) expression_paren -> . LPAREN expression RPAREN
    (122) condition -> . expression comparator expression
    (123) condition -> . type comparator expression
    (124) condition -> . type comparator type
    (125) condition -> . expression comparator type
    (126) condition -> . func_call
    (127) condition -> . type
    (110) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71
    LPAREN          shift and go to state 70

    expression                     shift and go to state 179
    type                           shift and go to state 180
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 98
    array_access                   shift and go to state 45
    expression_paren               shift and go to state 68
    condition                      shift and go to state 99
    prepare_func_call              shift and go to state 69

state 108

    (67) comparator -> eq .

    LPAREN          reduce using rule 67 (comparator -> eq .)
    INTEGER         reduce using rule 67 (comparator -> eq .)
    REAL            reduce using rule 67 (comparator -> eq .)
    STRING          reduce using rule 67 (comparator -> eq .)
    CHAR            reduce using rule 67 (comparator -> eq .)
    BOOLEAN         reduce using rule 67 (comparator -> eq .)
    IDENTIFIER      reduce using rule 67 (comparator -> eq .)


state 109

    (68) comparator -> neq .

    LPAREN          reduce using rule 68 (comparator -> neq .)
    INTEGER         reduce using rule 68 (comparator -> neq .)
    REAL            reduce using rule 68 (comparator -> neq .)
    STRING          reduce using rule 68 (comparator -> neq .)
    CHAR            reduce using rule 68 (comparator -> neq .)
    BOOLEAN         reduce using rule 68 (comparator -> neq .)
    IDENTIFIER      reduce using rule 68 (comparator -> neq .)


state 110

    (69) comparator -> lt .

    LPAREN          reduce using rule 69 (comparator -> lt .)
    INTEGER         reduce using rule 69 (comparator -> lt .)
    REAL            reduce using rule 69 (comparator -> lt .)
    STRING          reduce using rule 69 (comparator -> lt .)
    CHAR            reduce using rule 69 (comparator -> lt .)
    BOOLEAN         reduce using rule 69 (comparator -> lt .)
    IDENTIFIER      reduce using rule 69 (comparator -> lt .)


state 111

    (70) comparator -> gt .

    LPAREN          reduce using rule 70 (comparator -> gt .)
    INTEGER         reduce using rule 70 (comparator -> gt .)
    REAL            reduce using rule 70 (comparator -> gt .)
    STRING          reduce using rule 70 (comparator -> gt .)
    CHAR            reduce using rule 70 (comparator -> gt .)
    BOOLEAN         reduce using rule 70 (comparator -> gt .)
    IDENTIFIER      reduce using rule 70 (comparator -> gt .)


state 112

    (71) comparator -> lte .

    LPAREN          reduce using rule 71 (comparator -> lte .)
    INTEGER         reduce using rule 71 (comparator -> lte .)
    REAL            reduce using rule 71 (comparator -> lte .)
    STRING          reduce using rule 71 (comparator -> lte .)
    CHAR            reduce using rule 71 (comparator -> lte .)
    BOOLEAN         reduce using rule 71 (comparator -> lte .)
    IDENTIFIER      reduce using rule 71 (comparator -> lte .)


state 113

    (72) comparator -> gte .

    LPAREN          reduce using rule 72 (comparator -> gte .)
    INTEGER         reduce using rule 72 (comparator -> gte .)
    REAL            reduce using rule 72 (comparator -> gte .)
    STRING          reduce using rule 72 (comparator -> gte .)
    CHAR            reduce using rule 72 (comparator -> gte .)
    BOOLEAN         reduce using rule 72 (comparator -> gte .)
    IDENTIFIER      reduce using rule 72 (comparator -> gte .)


state 114

    (73) comparator -> and .

    LPAREN          reduce using rule 73 (comparator -> and .)
    INTEGER         reduce using rule 73 (comparator -> and .)
    REAL            reduce using rule 73 (comparator -> and .)
    STRING          reduce using rule 73 (comparator -> and .)
    CHAR            reduce using rule 73 (comparator -> and .)
    BOOLEAN         reduce using rule 73 (comparator -> and .)
    IDENTIFIER      reduce using rule 73 (comparator -> and .)


state 115

    (74) comparator -> or .

    LPAREN          reduce using rule 74 (comparator -> or .)
    INTEGER         reduce using rule 74 (comparator -> or .)
    REAL            reduce using rule 74 (comparator -> or .)
    STRING          reduce using rule 74 (comparator -> or .)
    CHAR            reduce using rule 74 (comparator -> or .)
    BOOLEAN         reduce using rule 74 (comparator -> or .)
    IDENTIFIER      reduce using rule 74 (comparator -> or .)


state 116

    (75) comparator -> not .

    LPAREN          reduce using rule 75 (comparator -> not .)
    INTEGER         reduce using rule 75 (comparator -> not .)
    REAL            reduce using rule 75 (comparator -> not .)
    STRING          reduce using rule 75 (comparator -> not .)
    CHAR            reduce using rule 75 (comparator -> not .)
    BOOLEAN         reduce using rule 75 (comparator -> not .)
    IDENTIFIER      reduce using rule 75 (comparator -> not .)


state 117

    (34) operation -> plus .

    INTEGER         reduce using rule 34 (operation -> plus .)
    REAL            reduce using rule 34 (operation -> plus .)
    STRING          reduce using rule 34 (operation -> plus .)
    CHAR            reduce using rule 34 (operation -> plus .)
    BOOLEAN         reduce using rule 34 (operation -> plus .)
    IDENTIFIER      reduce using rule 34 (operation -> plus .)
    LPAREN          reduce using rule 34 (operation -> plus .)


state 118

    (35) operation -> minus .

    INTEGER         reduce using rule 35 (operation -> minus .)
    REAL            reduce using rule 35 (operation -> minus .)
    STRING          reduce using rule 35 (operation -> minus .)
    CHAR            reduce using rule 35 (operation -> minus .)
    BOOLEAN         reduce using rule 35 (operation -> minus .)
    IDENTIFIER      reduce using rule 35 (operation -> minus .)
    LPAREN          reduce using rule 35 (operation -> minus .)


state 119

    (36) operation -> times .

    INTEGER         reduce using rule 36 (operation -> times .)
    REAL            reduce using rule 36 (operation -> times .)
    STRING          reduce using rule 36 (operation -> times .)
    CHAR            reduce using rule 36 (operation -> times .)
    BOOLEAN         reduce using rule 36 (operation -> times .)
    IDENTIFIER      reduce using rule 36 (operation -> times .)
    LPAREN          reduce using rule 36 (operation -> times .)


state 120

    (37) operation -> division .

    INTEGER         reduce using rule 37 (operation -> division .)
    REAL            reduce using rule 37 (operation -> division .)
    STRING          reduce using rule 37 (operation -> division .)
    CHAR            reduce using rule 37 (operation -> division .)
    BOOLEAN         reduce using rule 37 (operation -> division .)
    IDENTIFIER      reduce using rule 37 (operation -> division .)
    LPAREN          reduce using rule 37 (operation -> division .)


state 121

    (38) operation -> div .

    INTEGER         reduce using rule 38 (operation -> div .)
    REAL            reduce using rule 38 (operation -> div .)
    STRING          reduce using rule 38 (operation -> div .)
    CHAR            reduce using rule 38 (operation -> div .)
    BOOLEAN         reduce using rule 38 (operation -> div .)
    IDENTIFIER      reduce using rule 38 (operation -> div .)
    LPAREN          reduce using rule 38 (operation -> div .)


state 122

    (39) operation -> mod .

    INTEGER         reduce using rule 39 (operation -> mod .)
    REAL            reduce using rule 39 (operation -> mod .)
    STRING          reduce using rule 39 (operation -> mod .)
    CHAR            reduce using rule 39 (operation -> mod .)
    BOOLEAN         reduce using rule 39 (operation -> mod .)
    IDENTIFIER      reduce using rule 39 (operation -> mod .)
    LPAREN          reduce using rule 39 (operation -> mod .)


state 123

    (40) operation -> RANGE .

    INTEGER         reduce using rule 40 (operation -> RANGE .)
    REAL            reduce using rule 40 (operation -> RANGE .)
    STRING          reduce using rule 40 (operation -> RANGE .)
    CHAR            reduce using rule 40 (operation -> RANGE .)
    BOOLEAN         reduce using rule 40 (operation -> RANGE .)
    IDENTIFIER      reduce using rule 40 (operation -> RANGE .)
    LPAREN          reduce using rule 40 (operation -> RANGE .)


state 124

    (76) eq -> EQ .

    LPAREN          reduce using rule 76 (eq -> EQ .)
    INTEGER         reduce using rule 76 (eq -> EQ .)
    REAL            reduce using rule 76 (eq -> EQ .)
    STRING          reduce using rule 76 (eq -> EQ .)
    CHAR            reduce using rule 76 (eq -> EQ .)
    BOOLEAN         reduce using rule 76 (eq -> EQ .)
    IDENTIFIER      reduce using rule 76 (eq -> EQ .)


state 125

    (77) neq -> NEQ .

    LPAREN          reduce using rule 77 (neq -> NEQ .)
    INTEGER         reduce using rule 77 (neq -> NEQ .)
    REAL            reduce using rule 77 (neq -> NEQ .)
    STRING          reduce using rule 77 (neq -> NEQ .)
    CHAR            reduce using rule 77 (neq -> NEQ .)
    BOOLEAN         reduce using rule 77 (neq -> NEQ .)
    IDENTIFIER      reduce using rule 77 (neq -> NEQ .)


state 126

    (78) lt -> LT .

    LPAREN          reduce using rule 78 (lt -> LT .)
    INTEGER         reduce using rule 78 (lt -> LT .)
    REAL            reduce using rule 78 (lt -> LT .)
    STRING          reduce using rule 78 (lt -> LT .)
    CHAR            reduce using rule 78 (lt -> LT .)
    BOOLEAN         reduce using rule 78 (lt -> LT .)
    IDENTIFIER      reduce using rule 78 (lt -> LT .)


state 127

    (79) gt -> GT .

    LPAREN          reduce using rule 79 (gt -> GT .)
    INTEGER         reduce using rule 79 (gt -> GT .)
    REAL            reduce using rule 79 (gt -> GT .)
    STRING          reduce using rule 79 (gt -> GT .)
    CHAR            reduce using rule 79 (gt -> GT .)
    BOOLEAN         reduce using rule 79 (gt -> GT .)
    IDENTIFIER      reduce using rule 79 (gt -> GT .)


state 128

    (80) lte -> LTE .

    LPAREN          reduce using rule 80 (lte -> LTE .)
    INTEGER         reduce using rule 80 (lte -> LTE .)
    REAL            reduce using rule 80 (lte -> LTE .)
    STRING          reduce using rule 80 (lte -> LTE .)
    CHAR            reduce using rule 80 (lte -> LTE .)
    BOOLEAN         reduce using rule 80 (lte -> LTE .)
    IDENTIFIER      reduce using rule 80 (lte -> LTE .)


state 129

    (81) gte -> GTE .

    LPAREN          reduce using rule 81 (gte -> GTE .)
    INTEGER         reduce using rule 81 (gte -> GTE .)
    REAL            reduce using rule 81 (gte -> GTE .)
    STRING          reduce using rule 81 (gte -> GTE .)
    CHAR            reduce using rule 81 (gte -> GTE .)
    BOOLEAN         reduce using rule 81 (gte -> GTE .)
    IDENTIFIER      reduce using rule 81 (gte -> GTE .)


state 130

    (82) and -> AND .

    LPAREN          reduce using rule 82 (and -> AND .)
    INTEGER         reduce using rule 82 (and -> AND .)
    REAL            reduce using rule 82 (and -> AND .)
    STRING          reduce using rule 82 (and -> AND .)
    CHAR            reduce using rule 82 (and -> AND .)
    BOOLEAN         reduce using rule 82 (and -> AND .)
    IDENTIFIER      reduce using rule 82 (and -> AND .)


state 131

    (83) or -> OR .

    LPAREN          reduce using rule 83 (or -> OR .)
    INTEGER         reduce using rule 83 (or -> OR .)
    REAL            reduce using rule 83 (or -> OR .)
    STRING          reduce using rule 83 (or -> OR .)
    CHAR            reduce using rule 83 (or -> OR .)
    BOOLEAN         reduce using rule 83 (or -> OR .)
    IDENTIFIER      reduce using rule 83 (or -> OR .)


state 132

    (84) not -> NOT .

    LPAREN          reduce using rule 84 (not -> NOT .)
    INTEGER         reduce using rule 84 (not -> NOT .)
    REAL            reduce using rule 84 (not -> NOT .)
    STRING          reduce using rule 84 (not -> NOT .)
    CHAR            reduce using rule 84 (not -> NOT .)
    BOOLEAN         reduce using rule 84 (not -> NOT .)
    IDENTIFIER      reduce using rule 84 (not -> NOT .)


state 133

    (61) plus -> PLUS .

    INTEGER         reduce using rule 61 (plus -> PLUS .)
    REAL            reduce using rule 61 (plus -> PLUS .)
    STRING          reduce using rule 61 (plus -> PLUS .)
    CHAR            reduce using rule 61 (plus -> PLUS .)
    BOOLEAN         reduce using rule 61 (plus -> PLUS .)
    IDENTIFIER      reduce using rule 61 (plus -> PLUS .)
    LPAREN          reduce using rule 61 (plus -> PLUS .)


state 134

    (62) minus -> MINUS .

    INTEGER         reduce using rule 62 (minus -> MINUS .)
    REAL            reduce using rule 62 (minus -> MINUS .)
    STRING          reduce using rule 62 (minus -> MINUS .)
    CHAR            reduce using rule 62 (minus -> MINUS .)
    BOOLEAN         reduce using rule 62 (minus -> MINUS .)
    IDENTIFIER      reduce using rule 62 (minus -> MINUS .)
    LPAREN          reduce using rule 62 (minus -> MINUS .)


state 135

    (63) times -> TIMES .

    INTEGER         reduce using rule 63 (times -> TIMES .)
    REAL            reduce using rule 63 (times -> TIMES .)
    STRING          reduce using rule 63 (times -> TIMES .)
    CHAR            reduce using rule 63 (times -> TIMES .)
    BOOLEAN         reduce using rule 63 (times -> TIMES .)
    IDENTIFIER      reduce using rule 63 (times -> TIMES .)
    LPAREN          reduce using rule 63 (times -> TIMES .)


state 136

    (64) division -> DIVISION .

    INTEGER         reduce using rule 64 (division -> DIVISION .)
    REAL            reduce using rule 64 (division -> DIVISION .)
    STRING          reduce using rule 64 (division -> DIVISION .)
    CHAR            reduce using rule 64 (division -> DIVISION .)
    BOOLEAN         reduce using rule 64 (division -> DIVISION .)
    IDENTIFIER      reduce using rule 64 (division -> DIVISION .)
    LPAREN          reduce using rule 64 (division -> DIVISION .)


state 137

    (65) div -> DIV .

    INTEGER         reduce using rule 65 (div -> DIV .)
    REAL            reduce using rule 65 (div -> DIV .)
    STRING          reduce using rule 65 (div -> DIV .)
    CHAR            reduce using rule 65 (div -> DIV .)
    BOOLEAN         reduce using rule 65 (div -> DIV .)
    IDENTIFIER      reduce using rule 65 (div -> DIV .)
    LPAREN          reduce using rule 65 (div -> DIV .)


state 138

    (66) mod -> MOD .

    INTEGER         reduce using rule 66 (mod -> MOD .)
    REAL            reduce using rule 66 (mod -> MOD .)
    STRING          reduce using rule 66 (mod -> MOD .)
    CHAR            reduce using rule 66 (mod -> MOD .)
    BOOLEAN         reduce using rule 66 (mod -> MOD .)
    IDENTIFIER      reduce using rule 66 (mod -> MOD .)
    LPAREN          reduce using rule 66 (mod -> MOD .)


state 139

    (123) condition -> type comparator . expression
    (124) condition -> type comparator . type
    (27) expression -> . type operation type
    (28) expression -> . expression_paren
    (29) expression -> . expression operation type
    (30) expression -> . expression operation expression
    (31) expression -> . func_call
    (32) expression -> . condition
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (33) expression_paren -> . LPAREN expression RPAREN
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (122) condition -> . expression comparator expression
    (123) condition -> . type comparator expression
    (124) condition -> . type comparator type
    (125) condition -> . expression comparator type
    (126) condition -> . func_call
    (127) condition -> . type
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    LPAREN          shift and go to state 70
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 181
    expression                     shift and go to state 182
    expression_paren               shift and go to state 68
    func_call                      shift and go to state 144
    condition                      shift and go to state 99
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 140

    (27) expression -> type operation . type
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 183
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 141

    (109) func_call -> prepare_func_call LPAREN . arg_list RPAREN
    (111) arg_list -> . IDENTIFIER COMMA arg_list
    (112) arg_list -> . IDENTIFIER
    (113) arg_list -> . type COMMA arg_list
    (114) arg_list -> . type
    (115) arg_list -> .
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    IDENTIFIER      shift and go to state 184
    RPAREN          reduce using rule 115 (arg_list -> .)
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    prepare_func_call              shift and go to state 69
    arg_list                       shift and go to state 102
    type                           shift and go to state 185
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 142

    (33) expression_paren -> LPAREN expression . RPAREN
    (29) expression -> expression . operation type
    (30) expression -> expression . operation expression
    (122) condition -> expression . comparator expression
    (125) condition -> expression . comparator type
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

    RPAREN          shift and go to state 186
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

    operation                      shift and go to state 107
    comparator                     shift and go to state 106
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 143

    (27) expression -> type . operation type
    (123) condition -> type . comparator expression
    (124) condition -> type . comparator type
    (127) condition -> type .
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    RPAREN          reduce using rule 127 (condition -> type .)
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

  ! RANGE           [ reduce using rule 127 (condition -> type .) ]
  ! PLUS            [ reduce using rule 127 (condition -> type .) ]
  ! MINUS           [ reduce using rule 127 (condition -> type .) ]
  ! TIMES           [ reduce using rule 127 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 127 (condition -> type .) ]
  ! DIV             [ reduce using rule 127 (condition -> type .) ]
  ! MOD             [ reduce using rule 127 (condition -> type .) ]
  ! EQ              [ reduce using rule 127 (condition -> type .) ]
  ! NEQ             [ reduce using rule 127 (condition -> type .) ]
  ! LT              [ reduce using rule 127 (condition -> type .) ]
  ! GT              [ reduce using rule 127 (condition -> type .) ]
  ! LTE             [ reduce using rule 127 (condition -> type .) ]
  ! GTE             [ reduce using rule 127 (condition -> type .) ]
  ! AND             [ reduce using rule 127 (condition -> type .) ]
  ! OR              [ reduce using rule 127 (condition -> type .) ]
  ! NOT             [ reduce using rule 127 (condition -> type .) ]

    operation                      shift and go to state 140
    comparator                     shift and go to state 139
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 144

    (31) expression -> func_call .
    (53) type -> func_call .
    (126) condition -> func_call .

  ! reduce/reduce conflict for RANGE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DIVISION resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DIV resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for MOD resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for EQ resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for NEQ resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for LTE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for GTE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for AND resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for OR resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for NOT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for THEN resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DO resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for TO resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for RANGE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DIVISION resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DIV resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for MOD resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for EQ resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for NEQ resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for LTE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for GTE resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for AND resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for OR resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for NOT resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for THEN resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DO resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for TO resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 31 (expression -> func_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 31 (expression -> func_call .)
    RPAREN          reduce using rule 31 (expression -> func_call .)
    RANGE           reduce using rule 31 (expression -> func_call .)
    PLUS            reduce using rule 31 (expression -> func_call .)
    MINUS           reduce using rule 31 (expression -> func_call .)
    TIMES           reduce using rule 31 (expression -> func_call .)
    DIVISION        reduce using rule 31 (expression -> func_call .)
    DIV             reduce using rule 31 (expression -> func_call .)
    MOD             reduce using rule 31 (expression -> func_call .)
    EQ              reduce using rule 31 (expression -> func_call .)
    NEQ             reduce using rule 31 (expression -> func_call .)
    LT              reduce using rule 31 (expression -> func_call .)
    GT              reduce using rule 31 (expression -> func_call .)
    LTE             reduce using rule 31 (expression -> func_call .)
    GTE             reduce using rule 31 (expression -> func_call .)
    AND             reduce using rule 31 (expression -> func_call .)
    OR              reduce using rule 31 (expression -> func_call .)
    NOT             reduce using rule 31 (expression -> func_call .)
    THEN            reduce using rule 31 (expression -> func_call .)
    DO              reduce using rule 31 (expression -> func_call .)
    SEMICOLON       reduce using rule 31 (expression -> func_call .)
    TO              reduce using rule 31 (expression -> func_call .)
    DOWNTO          reduce using rule 31 (expression -> func_call .)
    ELSE            reduce using rule 31 (expression -> func_call .)

  ! RANGE           [ reduce using rule 53 (type -> func_call .) ]
  ! PLUS            [ reduce using rule 53 (type -> func_call .) ]
  ! MINUS           [ reduce using rule 53 (type -> func_call .) ]
  ! TIMES           [ reduce using rule 53 (type -> func_call .) ]
  ! DIVISION        [ reduce using rule 53 (type -> func_call .) ]
  ! DIV             [ reduce using rule 53 (type -> func_call .) ]
  ! MOD             [ reduce using rule 53 (type -> func_call .) ]
  ! EQ              [ reduce using rule 53 (type -> func_call .) ]
  ! NEQ             [ reduce using rule 53 (type -> func_call .) ]
  ! LT              [ reduce using rule 53 (type -> func_call .) ]
  ! GT              [ reduce using rule 53 (type -> func_call .) ]
  ! LTE             [ reduce using rule 53 (type -> func_call .) ]
  ! GTE             [ reduce using rule 53 (type -> func_call .) ]
  ! AND             [ reduce using rule 53 (type -> func_call .) ]
  ! OR              [ reduce using rule 53 (type -> func_call .) ]
  ! NOT             [ reduce using rule 53 (type -> func_call .) ]
  ! RPAREN          [ reduce using rule 53 (type -> func_call .) ]
  ! THEN            [ reduce using rule 53 (type -> func_call .) ]
  ! DO              [ reduce using rule 53 (type -> func_call .) ]
  ! SEMICOLON       [ reduce using rule 53 (type -> func_call .) ]
  ! TO              [ reduce using rule 53 (type -> func_call .) ]
  ! DOWNTO          [ reduce using rule 53 (type -> func_call .) ]
  ! ELSE            [ reduce using rule 53 (type -> func_call .) ]
  ! RPAREN          [ reduce using rule 126 (condition -> func_call .) ]
  ! RANGE           [ reduce using rule 126 (condition -> func_call .) ]
  ! PLUS            [ reduce using rule 126 (condition -> func_call .) ]
  ! MINUS           [ reduce using rule 126 (condition -> func_call .) ]
  ! TIMES           [ reduce using rule 126 (condition -> func_call .) ]
  ! DIVISION        [ reduce using rule 126 (condition -> func_call .) ]
  ! DIV             [ reduce using rule 126 (condition -> func_call .) ]
  ! MOD             [ reduce using rule 126 (condition -> func_call .) ]
  ! EQ              [ reduce using rule 126 (condition -> func_call .) ]
  ! NEQ             [ reduce using rule 126 (condition -> func_call .) ]
  ! LT              [ reduce using rule 126 (condition -> func_call .) ]
  ! GT              [ reduce using rule 126 (condition -> func_call .) ]
  ! LTE             [ reduce using rule 126 (condition -> func_call .) ]
  ! GTE             [ reduce using rule 126 (condition -> func_call .) ]
  ! AND             [ reduce using rule 126 (condition -> func_call .) ]
  ! OR              [ reduce using rule 126 (condition -> func_call .) ]
  ! NOT             [ reduce using rule 126 (condition -> func_call .) ]
  ! THEN            [ reduce using rule 126 (condition -> func_call .) ]
  ! DO              [ reduce using rule 126 (condition -> func_call .) ]
  ! SEMICOLON       [ reduce using rule 126 (condition -> func_call .) ]
  ! TO              [ reduce using rule 126 (condition -> func_call .) ]
  ! DOWNTO          [ reduce using rule 126 (condition -> func_call .) ]
  ! ELSE            [ reduce using rule 126 (condition -> func_call .) ]


state 145

    (135) while_loop -> WHILE condition DO . statement
    (136) while_loop -> WHILE condition DO . if_body
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (128) if_body -> . BEGIN statements END
    (139) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (92) procedure_call -> . prepare_func_call
    (93) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (116) cond_if -> . IF condition THEN statement
    (117) cond_if -> . IF condition THEN statement ELSE statement
    (118) cond_if -> . IF condition THEN statement ELSE if_body
    (119) cond_if -> . IF condition THEN if_body
    (120) cond_if -> . IF condition THEN if_body ELSE if_body
    (121) cond_if -> . IF condition THEN if_body ELSE statement
    (135) while_loop -> . WHILE condition DO statement
    (136) while_loop -> . WHILE condition DO if_body
    (131) for_loop -> . FOR assignment to type DO statement
    (132) for_loop -> . FOR assignment to type DO if_body
    (133) for_loop -> . FOR assignment downto type DO statement
    (134) for_loop -> . FOR assignment downto type DO if_body
    (137) repeat_loop -> . REPEAT statements UNTIL condition
    (138) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (110) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    BEGIN           shift and go to state 176
    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    statement                      shift and go to state 187
    if_body                        shift and go to state 188
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 146

    (131) for_loop -> FOR assignment to . type DO statement
    (132) for_loop -> FOR assignment to . type DO if_body
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 189
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 147

    (133) for_loop -> FOR assignment downto . type DO statement
    (134) for_loop -> FOR assignment downto . type DO if_body
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 190
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 148

    (129) to -> TO .

    INTEGER         reduce using rule 129 (to -> TO .)
    REAL            reduce using rule 129 (to -> TO .)
    STRING          reduce using rule 129 (to -> TO .)
    CHAR            reduce using rule 129 (to -> TO .)
    BOOLEAN         reduce using rule 129 (to -> TO .)
    IDENTIFIER      reduce using rule 129 (to -> TO .)


state 149

    (130) downto -> DOWNTO .

    INTEGER         reduce using rule 130 (downto -> DOWNTO .)
    REAL            reduce using rule 130 (downto -> DOWNTO .)
    STRING          reduce using rule 130 (downto -> DOWNTO .)
    CHAR            reduce using rule 130 (downto -> DOWNTO .)
    BOOLEAN         reduce using rule 130 (downto -> DOWNTO .)
    IDENTIFIER      reduce using rule 130 (downto -> DOWNTO .)


state 150

    (137) repeat_loop -> REPEAT statements UNTIL . condition
    (122) condition -> . expression comparator expression
    (123) condition -> . type comparator expression
    (124) condition -> . type comparator type
    (125) condition -> . expression comparator type
    (126) condition -> . func_call
    (127) condition -> . type
    (27) expression -> . type operation type
    (28) expression -> . expression_paren
    (29) expression -> . expression operation type
    (30) expression -> . expression operation expression
    (31) expression -> . func_call
    (32) expression -> . condition
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (33) expression_paren -> . LPAREN expression RPAREN
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    LPAREN          shift and go to state 70
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    condition                      shift and go to state 191
    expression                     shift and go to state 65
    type                           shift and go to state 66
    func_call                      shift and go to state 67
    expression_paren               shift and go to state 68
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 151

    (138) readln -> READLN LPAREN type . RPAREN

    RPAREN          shift and go to state 192


state 152

    (12) array_access -> IDENTIFIER LBRACKET type . RBRACKET

    RBRACKET        shift and go to state 193


state 153

    (99) function -> func_header SEMICOLON VAR func_variable_declaration . func_body SEMICOLON
    (108) func_body -> . BEGIN statements END

    BEGIN           shift and go to state 79

    func_body                      shift and go to state 194

state 154

    (106) func_variable_declaration -> identifier_list . COLON type_name SEMICOLON func_variable_declaration
    (107) func_variable_declaration -> identifier_list . COLON type_name SEMICOLON

    COLON           shift and go to state 195


state 155

    (100) function -> func_header SEMICOLON func_body SEMICOLON .

    VAR             reduce using rule 100 (function -> func_header SEMICOLON func_body SEMICOLON .)
    BEGIN           reduce using rule 100 (function -> func_header SEMICOLON func_body SEMICOLON .)
    PROCEDURE       reduce using rule 100 (function -> func_header SEMICOLON func_body SEMICOLON .)
    FUNCTION        reduce using rule 100 (function -> func_header SEMICOLON func_body SEMICOLON .)


state 156

    (108) func_body -> BEGIN statements . END

    END             shift and go to state 196


state 157

    (85) procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body . SEMICOLON

    SEMICOLON       shift and go to state 197


state 158

    (87) procedure -> PROCEDURE IDENTIFIER SEMICOLON VAR . func_variable_declaration procedure_body SEMICOLON
    (106) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON func_variable_declaration
    (107) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    func_variable_declaration      shift and go to state 198
    identifier_list                shift and go to state 154

state 159

    (91) procedure_body -> BEGIN . statements END
    (14) statements -> . statement SEMICOLON statements
    (15) statements -> . statement SEMICOLON
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (139) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (92) procedure_call -> . prepare_func_call
    (93) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (116) cond_if -> . IF condition THEN statement
    (117) cond_if -> . IF condition THEN statement ELSE statement
    (118) cond_if -> . IF condition THEN statement ELSE if_body
    (119) cond_if -> . IF condition THEN if_body
    (120) cond_if -> . IF condition THEN if_body ELSE if_body
    (121) cond_if -> . IF condition THEN if_body ELSE statement
    (135) while_loop -> . WHILE condition DO statement
    (136) while_loop -> . WHILE condition DO if_body
    (131) for_loop -> . FOR assignment to type DO statement
    (132) for_loop -> . FOR assignment to type DO if_body
    (133) for_loop -> . FOR assignment downto type DO statement
    (134) for_loop -> . FOR assignment downto type DO if_body
    (137) repeat_loop -> . REPEAT statements UNTIL condition
    (138) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (110) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    statements                     shift and go to state 199
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 160

    (86) procedure -> PROCEDURE IDENTIFIER LPAREN func_args . RPAREN SEMICOLON procedure_body SEMICOLON
    (88) procedure -> PROCEDURE IDENTIFIER LPAREN func_args . RPAREN SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON

    RPAREN          shift and go to state 200


state 161

    (103) func_args -> func_arglist . SEMICOLON func_args
    (104) func_args -> func_arglist .

    SEMICOLON       shift and go to state 201
    RPAREN          reduce using rule 104 (func_args -> func_arglist .)


state 162

    (105) func_arglist -> identifier_list . COLON type_name

    COLON           shift and go to state 202


state 163

    (101) func_header -> FUNCTION IDENTIFIER LPAREN func_args . RPAREN COLON type_name

    RPAREN          shift and go to state 203


state 164

    (102) func_header -> FUNCTION IDENTIFIER LPAREN RPAREN . COLON type_name

    COLON           shift and go to state 204


state 165

    (7) variable_declaration -> identifier_list COLON type_name SEMICOLON . variable_declaration
    (8) variable_declaration -> identifier_list COLON type_name SEMICOLON .
    (7) variable_declaration -> . identifier_list COLON type_name SEMICOLON variable_declaration
    (8) variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    BEGIN           reduce using rule 8 (variable_declaration -> identifier_list COLON type_name SEMICOLON .)
    IDENTIFIER      shift and go to state 17

    identifier_list                shift and go to state 16
    variable_declaration           shift and go to state 205

state 166

    (11) array_type -> ARRAY LBRACKET . type RANGE type RBRACKET OF type_name
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 206
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 167

    (139) writeln -> WRITELN LPAREN writeln_args RPAREN .

    SEMICOLON       reduce using rule 139 (writeln -> WRITELN LPAREN writeln_args RPAREN .)
    ELSE            reduce using rule 139 (writeln -> WRITELN LPAREN writeln_args RPAREN .)


state 168

    (140) writeln_args -> type COMMA . writeln_args
    (140) writeln_args -> . type COMMA writeln_args
    (141) writeln_args -> . type
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 94
    writeln_args                   shift and go to state 207
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 169

    (98) length -> LENGTH LPAREN . type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 208
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 170

    (93) procedure_call -> prepare_func_call LPAREN procedure_arg_list RPAREN .

    SEMICOLON       reduce using rule 93 (procedure_call -> prepare_func_call LPAREN procedure_arg_list RPAREN .)
    ELSE            reduce using rule 93 (procedure_call -> prepare_func_call LPAREN procedure_arg_list RPAREN .)


state 171

    (109) func_call -> prepare_func_call LPAREN arg_list RPAREN .

    ASSIGNMENT      reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    THEN            reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    RANGE           reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    EQ              reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    LT              reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    GT              reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    LTE             reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    GTE             reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    AND             reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    OR              reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    NOT             reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    DIVISION        reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    DIV             reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    MOD             reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    DO              reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    SEMICOLON       reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    TO              reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    DOWNTO          reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    ELSE            reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)
    RBRACKET        reduce using rule 109 (func_call -> prepare_func_call LPAREN arg_list RPAREN .)


state 172

    (94) procedure_arg_list -> IDENTIFIER COMMA . procedure_arg_list
    (111) arg_list -> IDENTIFIER COMMA . arg_list
    (94) procedure_arg_list -> . IDENTIFIER COMMA procedure_arg_list
    (95) procedure_arg_list -> . IDENTIFIER
    (96) procedure_arg_list -> . type COMMA procedure_arg_list
    (97) procedure_arg_list -> . type
    (111) arg_list -> . IDENTIFIER COMMA arg_list
    (112) arg_list -> . IDENTIFIER
    (113) arg_list -> . type COMMA arg_list
    (114) arg_list -> . type
    (115) arg_list -> .
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    IDENTIFIER      shift and go to state 103
    RPAREN          reduce using rule 115 (arg_list -> .)
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    procedure_arg_list             shift and go to state 209
    arg_list                       shift and go to state 210
    type                           shift and go to state 104
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 173

    (96) procedure_arg_list -> type COMMA . procedure_arg_list
    (113) arg_list -> type COMMA . arg_list
    (94) procedure_arg_list -> . IDENTIFIER COMMA procedure_arg_list
    (95) procedure_arg_list -> . IDENTIFIER
    (96) procedure_arg_list -> . type COMMA procedure_arg_list
    (97) procedure_arg_list -> . type
    (111) arg_list -> . IDENTIFIER COMMA arg_list
    (112) arg_list -> . IDENTIFIER
    (113) arg_list -> . type COMMA arg_list
    (114) arg_list -> . type
    (115) arg_list -> .
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    IDENTIFIER      shift and go to state 103
    RPAREN          reduce using rule 115 (arg_list -> .)
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    type                           shift and go to state 104
    procedure_arg_list             shift and go to state 211
    arg_list                       shift and go to state 212
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 174

    (116) cond_if -> IF condition THEN statement .
    (117) cond_if -> IF condition THEN statement . ELSE statement
    (118) cond_if -> IF condition THEN statement . ELSE if_body

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 116 (cond_if -> IF condition THEN statement .)
    ELSE            shift and go to state 213

  ! ELSE            [ reduce using rule 116 (cond_if -> IF condition THEN statement .) ]


state 175

    (119) cond_if -> IF condition THEN if_body .
    (120) cond_if -> IF condition THEN if_body . ELSE if_body
    (121) cond_if -> IF condition THEN if_body . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 119 (cond_if -> IF condition THEN if_body .)
    ELSE            shift and go to state 214

  ! ELSE            [ reduce using rule 119 (cond_if -> IF condition THEN if_body .) ]


state 176

    (128) if_body -> BEGIN . statements END
    (14) statements -> . statement SEMICOLON statements
    (15) statements -> . statement SEMICOLON
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (139) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (92) procedure_call -> . prepare_func_call
    (93) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (116) cond_if -> . IF condition THEN statement
    (117) cond_if -> . IF condition THEN statement ELSE statement
    (118) cond_if -> . IF condition THEN statement ELSE if_body
    (119) cond_if -> . IF condition THEN if_body
    (120) cond_if -> . IF condition THEN if_body ELSE if_body
    (121) cond_if -> . IF condition THEN if_body ELSE statement
    (135) while_loop -> . WHILE condition DO statement
    (136) while_loop -> . WHILE condition DO if_body
    (131) for_loop -> . FOR assignment to type DO statement
    (132) for_loop -> . FOR assignment to type DO if_body
    (133) for_loop -> . FOR assignment downto type DO statement
    (134) for_loop -> . FOR assignment downto type DO if_body
    (137) repeat_loop -> . REPEAT statements UNTIL condition
    (138) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (110) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    statements                     shift and go to state 215
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 177

    (122) condition -> expression comparator expression .
    (29) expression -> expression . operation type
    (30) expression -> expression . operation expression
    (122) condition -> expression . comparator expression
    (125) condition -> expression . comparator type
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 122 (condition -> expression comparator expression .)
    DO              reduce using rule 122 (condition -> expression comparator expression .)
    SEMICOLON       reduce using rule 122 (condition -> expression comparator expression .)
    TO              reduce using rule 122 (condition -> expression comparator expression .)
    DOWNTO          reduce using rule 122 (condition -> expression comparator expression .)
    ELSE            reduce using rule 122 (condition -> expression comparator expression .)
    RPAREN          reduce using rule 122 (condition -> expression comparator expression .)
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

  ! RANGE           [ reduce using rule 122 (condition -> expression comparator expression .) ]
  ! EQ              [ reduce using rule 122 (condition -> expression comparator expression .) ]
  ! NEQ             [ reduce using rule 122 (condition -> expression comparator expression .) ]
  ! LT              [ reduce using rule 122 (condition -> expression comparator expression .) ]
  ! GT              [ reduce using rule 122 (condition -> expression comparator expression .) ]
  ! LTE             [ reduce using rule 122 (condition -> expression comparator expression .) ]
  ! GTE             [ reduce using rule 122 (condition -> expression comparator expression .) ]
  ! AND             [ reduce using rule 122 (condition -> expression comparator expression .) ]
  ! OR              [ reduce using rule 122 (condition -> expression comparator expression .) ]
  ! NOT             [ reduce using rule 122 (condition -> expression comparator expression .) ]
  ! PLUS            [ reduce using rule 122 (condition -> expression comparator expression .) ]
  ! MINUS           [ reduce using rule 122 (condition -> expression comparator expression .) ]
  ! TIMES           [ reduce using rule 122 (condition -> expression comparator expression .) ]
  ! DIVISION        [ reduce using rule 122 (condition -> expression comparator expression .) ]
  ! DIV             [ reduce using rule 122 (condition -> expression comparator expression .) ]
  ! MOD             [ reduce using rule 122 (condition -> expression comparator expression .) ]

    comparator                     shift and go to state 106
    operation                      shift and go to state 107
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 178

    (125) condition -> expression comparator type .
    (27) expression -> type . operation type
    (123) condition -> type . comparator expression
    (124) condition -> type . comparator type
    (127) condition -> type .
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

  ! reduce/reduce conflict for RANGE resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for PLUS resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for MINUS resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for TIMES resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DIVISION resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DIV resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for MOD resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for EQ resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for NEQ resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for LT resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for GT resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for LTE resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for GTE resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for AND resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for OR resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for NOT resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for THEN resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DO resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for TO resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for ELSE resolved using rule 125 (condition -> expression comparator type .)
  ! reduce/reduce conflict for RPAREN resolved using rule 125 (condition -> expression comparator type .)
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 125 (condition -> expression comparator type .)
    DO              reduce using rule 125 (condition -> expression comparator type .)
    SEMICOLON       reduce using rule 125 (condition -> expression comparator type .)
    TO              reduce using rule 125 (condition -> expression comparator type .)
    DOWNTO          reduce using rule 125 (condition -> expression comparator type .)
    ELSE            reduce using rule 125 (condition -> expression comparator type .)
    RPAREN          reduce using rule 125 (condition -> expression comparator type .)
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

  ! RANGE           [ reduce using rule 125 (condition -> expression comparator type .) ]
  ! EQ              [ reduce using rule 125 (condition -> expression comparator type .) ]
  ! NEQ             [ reduce using rule 125 (condition -> expression comparator type .) ]
  ! LT              [ reduce using rule 125 (condition -> expression comparator type .) ]
  ! GT              [ reduce using rule 125 (condition -> expression comparator type .) ]
  ! LTE             [ reduce using rule 125 (condition -> expression comparator type .) ]
  ! GTE             [ reduce using rule 125 (condition -> expression comparator type .) ]
  ! AND             [ reduce using rule 125 (condition -> expression comparator type .) ]
  ! OR              [ reduce using rule 125 (condition -> expression comparator type .) ]
  ! NOT             [ reduce using rule 125 (condition -> expression comparator type .) ]
  ! PLUS            [ reduce using rule 125 (condition -> expression comparator type .) ]
  ! MINUS           [ reduce using rule 125 (condition -> expression comparator type .) ]
  ! TIMES           [ reduce using rule 125 (condition -> expression comparator type .) ]
  ! DIVISION        [ reduce using rule 125 (condition -> expression comparator type .) ]
  ! DIV             [ reduce using rule 125 (condition -> expression comparator type .) ]
  ! MOD             [ reduce using rule 125 (condition -> expression comparator type .) ]
  ! RANGE           [ reduce using rule 127 (condition -> type .) ]
  ! PLUS            [ reduce using rule 127 (condition -> type .) ]
  ! MINUS           [ reduce using rule 127 (condition -> type .) ]
  ! TIMES           [ reduce using rule 127 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 127 (condition -> type .) ]
  ! DIV             [ reduce using rule 127 (condition -> type .) ]
  ! MOD             [ reduce using rule 127 (condition -> type .) ]
  ! EQ              [ reduce using rule 127 (condition -> type .) ]
  ! NEQ             [ reduce using rule 127 (condition -> type .) ]
  ! LT              [ reduce using rule 127 (condition -> type .) ]
  ! GT              [ reduce using rule 127 (condition -> type .) ]
  ! LTE             [ reduce using rule 127 (condition -> type .) ]
  ! GTE             [ reduce using rule 127 (condition -> type .) ]
  ! AND             [ reduce using rule 127 (condition -> type .) ]
  ! OR              [ reduce using rule 127 (condition -> type .) ]
  ! NOT             [ reduce using rule 127 (condition -> type .) ]
  ! THEN            [ reduce using rule 127 (condition -> type .) ]
  ! DO              [ reduce using rule 127 (condition -> type .) ]
  ! SEMICOLON       [ reduce using rule 127 (condition -> type .) ]
  ! TO              [ reduce using rule 127 (condition -> type .) ]
  ! DOWNTO          [ reduce using rule 127 (condition -> type .) ]
  ! ELSE            [ reduce using rule 127 (condition -> type .) ]
  ! RPAREN          [ reduce using rule 127 (condition -> type .) ]

    comparator                     shift and go to state 139
    operation                      shift and go to state 140
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 179

    (30) expression -> expression operation expression .
    (29) expression -> expression . operation type
    (30) expression -> expression . operation expression
    (122) condition -> expression . comparator expression
    (125) condition -> expression . comparator type
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    SEMICOLON       reduce using rule 30 (expression -> expression operation expression .)
    TO              reduce using rule 30 (expression -> expression operation expression .)
    DOWNTO          reduce using rule 30 (expression -> expression operation expression .)
    ELSE            reduce using rule 30 (expression -> expression operation expression .)
    RPAREN          reduce using rule 30 (expression -> expression operation expression .)
    THEN            reduce using rule 30 (expression -> expression operation expression .)
    DO              reduce using rule 30 (expression -> expression operation expression .)
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

  ! RANGE           [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! EQ              [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! NEQ             [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! LT              [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! GT              [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! LTE             [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! GTE             [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! AND             [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! OR              [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! NOT             [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! PLUS            [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! MINUS           [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! TIMES           [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! DIVISION        [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! DIV             [ reduce using rule 30 (expression -> expression operation expression .) ]
  ! MOD             [ reduce using rule 30 (expression -> expression operation expression .) ]

    operation                      shift and go to state 107
    comparator                     shift and go to state 106
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 180

    (29) expression -> expression operation type .
    (27) expression -> type . operation type
    (123) condition -> type . comparator expression
    (124) condition -> type . comparator type
    (127) condition -> type .
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

  ! reduce/reduce conflict for RANGE resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for PLUS resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for MINUS resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for TIMES resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for DIVISION resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for DIV resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for MOD resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for EQ resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for NEQ resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for LT resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for GT resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for LTE resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for GTE resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for AND resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for OR resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for NOT resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for THEN resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for DO resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for TO resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for ELSE resolved using rule 29 (expression -> expression operation type .)
  ! reduce/reduce conflict for RPAREN resolved using rule 29 (expression -> expression operation type .)
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    SEMICOLON       reduce using rule 29 (expression -> expression operation type .)
    TO              reduce using rule 29 (expression -> expression operation type .)
    DOWNTO          reduce using rule 29 (expression -> expression operation type .)
    ELSE            reduce using rule 29 (expression -> expression operation type .)
    RPAREN          reduce using rule 29 (expression -> expression operation type .)
    THEN            reduce using rule 29 (expression -> expression operation type .)
    DO              reduce using rule 29 (expression -> expression operation type .)
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

  ! RANGE           [ reduce using rule 29 (expression -> expression operation type .) ]
  ! EQ              [ reduce using rule 29 (expression -> expression operation type .) ]
  ! NEQ             [ reduce using rule 29 (expression -> expression operation type .) ]
  ! LT              [ reduce using rule 29 (expression -> expression operation type .) ]
  ! GT              [ reduce using rule 29 (expression -> expression operation type .) ]
  ! LTE             [ reduce using rule 29 (expression -> expression operation type .) ]
  ! GTE             [ reduce using rule 29 (expression -> expression operation type .) ]
  ! AND             [ reduce using rule 29 (expression -> expression operation type .) ]
  ! OR              [ reduce using rule 29 (expression -> expression operation type .) ]
  ! NOT             [ reduce using rule 29 (expression -> expression operation type .) ]
  ! PLUS            [ reduce using rule 29 (expression -> expression operation type .) ]
  ! MINUS           [ reduce using rule 29 (expression -> expression operation type .) ]
  ! TIMES           [ reduce using rule 29 (expression -> expression operation type .) ]
  ! DIVISION        [ reduce using rule 29 (expression -> expression operation type .) ]
  ! DIV             [ reduce using rule 29 (expression -> expression operation type .) ]
  ! MOD             [ reduce using rule 29 (expression -> expression operation type .) ]
  ! RANGE           [ reduce using rule 127 (condition -> type .) ]
  ! PLUS            [ reduce using rule 127 (condition -> type .) ]
  ! MINUS           [ reduce using rule 127 (condition -> type .) ]
  ! TIMES           [ reduce using rule 127 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 127 (condition -> type .) ]
  ! DIV             [ reduce using rule 127 (condition -> type .) ]
  ! MOD             [ reduce using rule 127 (condition -> type .) ]
  ! EQ              [ reduce using rule 127 (condition -> type .) ]
  ! NEQ             [ reduce using rule 127 (condition -> type .) ]
  ! LT              [ reduce using rule 127 (condition -> type .) ]
  ! GT              [ reduce using rule 127 (condition -> type .) ]
  ! LTE             [ reduce using rule 127 (condition -> type .) ]
  ! GTE             [ reduce using rule 127 (condition -> type .) ]
  ! AND             [ reduce using rule 127 (condition -> type .) ]
  ! OR              [ reduce using rule 127 (condition -> type .) ]
  ! NOT             [ reduce using rule 127 (condition -> type .) ]
  ! THEN            [ reduce using rule 127 (condition -> type .) ]
  ! DO              [ reduce using rule 127 (condition -> type .) ]
  ! SEMICOLON       [ reduce using rule 127 (condition -> type .) ]
  ! TO              [ reduce using rule 127 (condition -> type .) ]
  ! DOWNTO          [ reduce using rule 127 (condition -> type .) ]
  ! ELSE            [ reduce using rule 127 (condition -> type .) ]
  ! RPAREN          [ reduce using rule 127 (condition -> type .) ]

    operation                      shift and go to state 140
    comparator                     shift and go to state 139
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 181

    (124) condition -> type comparator type .
    (27) expression -> type . operation type
    (123) condition -> type . comparator expression
    (124) condition -> type . comparator type
    (127) condition -> type .
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

  ! reduce/reduce conflict for RANGE resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for PLUS resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for MINUS resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for TIMES resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for DIVISION resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for DIV resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for MOD resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for EQ resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for NEQ resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for LT resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for GT resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for LTE resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for GTE resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for AND resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for OR resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for NOT resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for THEN resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for DO resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for TO resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for ELSE resolved using rule 124 (condition -> type comparator type .)
  ! reduce/reduce conflict for RPAREN resolved using rule 124 (condition -> type comparator type .)
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 124 (condition -> type comparator type .)
    DO              reduce using rule 124 (condition -> type comparator type .)
    SEMICOLON       reduce using rule 124 (condition -> type comparator type .)
    TO              reduce using rule 124 (condition -> type comparator type .)
    DOWNTO          reduce using rule 124 (condition -> type comparator type .)
    ELSE            reduce using rule 124 (condition -> type comparator type .)
    RPAREN          reduce using rule 124 (condition -> type comparator type .)
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

  ! RANGE           [ reduce using rule 124 (condition -> type comparator type .) ]
  ! EQ              [ reduce using rule 124 (condition -> type comparator type .) ]
  ! NEQ             [ reduce using rule 124 (condition -> type comparator type .) ]
  ! LT              [ reduce using rule 124 (condition -> type comparator type .) ]
  ! GT              [ reduce using rule 124 (condition -> type comparator type .) ]
  ! LTE             [ reduce using rule 124 (condition -> type comparator type .) ]
  ! GTE             [ reduce using rule 124 (condition -> type comparator type .) ]
  ! AND             [ reduce using rule 124 (condition -> type comparator type .) ]
  ! OR              [ reduce using rule 124 (condition -> type comparator type .) ]
  ! NOT             [ reduce using rule 124 (condition -> type comparator type .) ]
  ! PLUS            [ reduce using rule 124 (condition -> type comparator type .) ]
  ! MINUS           [ reduce using rule 124 (condition -> type comparator type .) ]
  ! TIMES           [ reduce using rule 124 (condition -> type comparator type .) ]
  ! DIVISION        [ reduce using rule 124 (condition -> type comparator type .) ]
  ! DIV             [ reduce using rule 124 (condition -> type comparator type .) ]
  ! MOD             [ reduce using rule 124 (condition -> type comparator type .) ]
  ! RANGE           [ reduce using rule 127 (condition -> type .) ]
  ! PLUS            [ reduce using rule 127 (condition -> type .) ]
  ! MINUS           [ reduce using rule 127 (condition -> type .) ]
  ! TIMES           [ reduce using rule 127 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 127 (condition -> type .) ]
  ! DIV             [ reduce using rule 127 (condition -> type .) ]
  ! MOD             [ reduce using rule 127 (condition -> type .) ]
  ! EQ              [ reduce using rule 127 (condition -> type .) ]
  ! NEQ             [ reduce using rule 127 (condition -> type .) ]
  ! LT              [ reduce using rule 127 (condition -> type .) ]
  ! GT              [ reduce using rule 127 (condition -> type .) ]
  ! LTE             [ reduce using rule 127 (condition -> type .) ]
  ! GTE             [ reduce using rule 127 (condition -> type .) ]
  ! AND             [ reduce using rule 127 (condition -> type .) ]
  ! OR              [ reduce using rule 127 (condition -> type .) ]
  ! NOT             [ reduce using rule 127 (condition -> type .) ]
  ! THEN            [ reduce using rule 127 (condition -> type .) ]
  ! DO              [ reduce using rule 127 (condition -> type .) ]
  ! SEMICOLON       [ reduce using rule 127 (condition -> type .) ]
  ! TO              [ reduce using rule 127 (condition -> type .) ]
  ! DOWNTO          [ reduce using rule 127 (condition -> type .) ]
  ! ELSE            [ reduce using rule 127 (condition -> type .) ]
  ! RPAREN          [ reduce using rule 127 (condition -> type .) ]

    comparator                     shift and go to state 139
    operation                      shift and go to state 140
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 182

    (123) condition -> type comparator expression .
    (29) expression -> expression . operation type
    (30) expression -> expression . operation expression
    (122) condition -> expression . comparator expression
    (125) condition -> expression . comparator type
    (34) operation -> . plus
    (35) operation -> . minus
    (36) operation -> . times
    (37) operation -> . division
    (38) operation -> . div
    (39) operation -> . mod
    (40) operation -> . RANGE
    (67) comparator -> . eq
    (68) comparator -> . neq
    (69) comparator -> . lt
    (70) comparator -> . gt
    (71) comparator -> . lte
    (72) comparator -> . gte
    (73) comparator -> . and
    (74) comparator -> . or
    (75) comparator -> . not
    (61) plus -> . PLUS
    (62) minus -> . MINUS
    (63) times -> . TIMES
    (64) division -> . DIVISION
    (65) div -> . DIV
    (66) mod -> . MOD
    (76) eq -> . EQ
    (77) neq -> . NEQ
    (78) lt -> . LT
    (79) gt -> . GT
    (80) lte -> . LTE
    (81) gte -> . GTE
    (82) and -> . AND
    (83) or -> . OR
    (84) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 123 (condition -> type comparator expression .)
    DO              reduce using rule 123 (condition -> type comparator expression .)
    SEMICOLON       reduce using rule 123 (condition -> type comparator expression .)
    TO              reduce using rule 123 (condition -> type comparator expression .)
    DOWNTO          reduce using rule 123 (condition -> type comparator expression .)
    ELSE            reduce using rule 123 (condition -> type comparator expression .)
    RPAREN          reduce using rule 123 (condition -> type comparator expression .)
    RANGE           shift and go to state 123
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    TIMES           shift and go to state 135
    DIVISION        shift and go to state 136
    DIV             shift and go to state 137
    MOD             shift and go to state 138
    EQ              shift and go to state 124
    NEQ             shift and go to state 125
    LT              shift and go to state 126
    GT              shift and go to state 127
    LTE             shift and go to state 128
    GTE             shift and go to state 129
    AND             shift and go to state 130
    OR              shift and go to state 131
    NOT             shift and go to state 132

  ! RANGE           [ reduce using rule 123 (condition -> type comparator expression .) ]
  ! EQ              [ reduce using rule 123 (condition -> type comparator expression .) ]
  ! NEQ             [ reduce using rule 123 (condition -> type comparator expression .) ]
  ! LT              [ reduce using rule 123 (condition -> type comparator expression .) ]
  ! GT              [ reduce using rule 123 (condition -> type comparator expression .) ]
  ! LTE             [ reduce using rule 123 (condition -> type comparator expression .) ]
  ! GTE             [ reduce using rule 123 (condition -> type comparator expression .) ]
  ! AND             [ reduce using rule 123 (condition -> type comparator expression .) ]
  ! OR              [ reduce using rule 123 (condition -> type comparator expression .) ]
  ! NOT             [ reduce using rule 123 (condition -> type comparator expression .) ]
  ! PLUS            [ reduce using rule 123 (condition -> type comparator expression .) ]
  ! MINUS           [ reduce using rule 123 (condition -> type comparator expression .) ]
  ! TIMES           [ reduce using rule 123 (condition -> type comparator expression .) ]
  ! DIVISION        [ reduce using rule 123 (condition -> type comparator expression .) ]
  ! DIV             [ reduce using rule 123 (condition -> type comparator expression .) ]
  ! MOD             [ reduce using rule 123 (condition -> type comparator expression .) ]

    comparator                     shift and go to state 106
    operation                      shift and go to state 107
    plus                           shift and go to state 117
    minus                          shift and go to state 118
    times                          shift and go to state 119
    division                       shift and go to state 120
    div                            shift and go to state 121
    mod                            shift and go to state 122
    eq                             shift and go to state 108
    neq                            shift and go to state 109
    lt                             shift and go to state 110
    gt                             shift and go to state 111
    lte                            shift and go to state 112
    gte                            shift and go to state 113
    and                            shift and go to state 114
    or                             shift and go to state 115
    not                            shift and go to state 116

state 183

    (27) expression -> type operation type .

    RANGE           reduce using rule 27 (expression -> type operation type .)
    EQ              reduce using rule 27 (expression -> type operation type .)
    NEQ             reduce using rule 27 (expression -> type operation type .)
    LT              reduce using rule 27 (expression -> type operation type .)
    GT              reduce using rule 27 (expression -> type operation type .)
    LTE             reduce using rule 27 (expression -> type operation type .)
    GTE             reduce using rule 27 (expression -> type operation type .)
    AND             reduce using rule 27 (expression -> type operation type .)
    OR              reduce using rule 27 (expression -> type operation type .)
    NOT             reduce using rule 27 (expression -> type operation type .)
    PLUS            reduce using rule 27 (expression -> type operation type .)
    MINUS           reduce using rule 27 (expression -> type operation type .)
    TIMES           reduce using rule 27 (expression -> type operation type .)
    DIVISION        reduce using rule 27 (expression -> type operation type .)
    DIV             reduce using rule 27 (expression -> type operation type .)
    MOD             reduce using rule 27 (expression -> type operation type .)
    SEMICOLON       reduce using rule 27 (expression -> type operation type .)
    TO              reduce using rule 27 (expression -> type operation type .)
    DOWNTO          reduce using rule 27 (expression -> type operation type .)
    ELSE            reduce using rule 27 (expression -> type operation type .)
    RPAREN          reduce using rule 27 (expression -> type operation type .)
    THEN            reduce using rule 27 (expression -> type operation type .)
    DO              reduce using rule 27 (expression -> type operation type .)


state 184

    (111) arg_list -> IDENTIFIER . COMMA arg_list
    (112) arg_list -> IDENTIFIER .
    (60) identifier -> IDENTIFIER .
    (12) array_access -> IDENTIFIER . LBRACKET type RBRACKET
    (110) prepare_func_call -> IDENTIFIER .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 60 (identifier -> IDENTIFIER .)
    COMMA           shift and go to state 216
    RPAREN          reduce using rule 60 (identifier -> IDENTIFIER .)
    LBRACKET        shift and go to state 76
    LPAREN          reduce using rule 110 (prepare_func_call -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 112 (arg_list -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 60 (identifier -> IDENTIFIER .) ]


state 185

    (113) arg_list -> type . COMMA arg_list
    (114) arg_list -> type .

    COMMA           shift and go to state 217
    RPAREN          reduce using rule 114 (arg_list -> type .)


state 186

    (33) expression_paren -> LPAREN expression RPAREN .

    RANGE           reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    EQ              reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    LT              reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    GT              reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    LTE             reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    GTE             reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    AND             reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    OR              reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    NOT             reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    DIVISION        reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    DIV             reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    MOD             reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    TO              reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    THEN            reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)
    DO              reduce using rule 33 (expression_paren -> LPAREN expression RPAREN .)


state 187

    (135) while_loop -> WHILE condition DO statement .

    SEMICOLON       reduce using rule 135 (while_loop -> WHILE condition DO statement .)
    ELSE            reduce using rule 135 (while_loop -> WHILE condition DO statement .)


state 188

    (136) while_loop -> WHILE condition DO if_body .

    SEMICOLON       reduce using rule 136 (while_loop -> WHILE condition DO if_body .)
    ELSE            reduce using rule 136 (while_loop -> WHILE condition DO if_body .)


state 189

    (131) for_loop -> FOR assignment to type . DO statement
    (132) for_loop -> FOR assignment to type . DO if_body

    DO              shift and go to state 218


state 190

    (133) for_loop -> FOR assignment downto type . DO statement
    (134) for_loop -> FOR assignment downto type . DO if_body

    DO              shift and go to state 219


state 191

    (137) repeat_loop -> REPEAT statements UNTIL condition .
    (32) expression -> condition .

    SEMICOLON       reduce using rule 137 (repeat_loop -> REPEAT statements UNTIL condition .)
    ELSE            reduce using rule 137 (repeat_loop -> REPEAT statements UNTIL condition .)
    RANGE           reduce using rule 32 (expression -> condition .)
    EQ              reduce using rule 32 (expression -> condition .)
    NEQ             reduce using rule 32 (expression -> condition .)
    LT              reduce using rule 32 (expression -> condition .)
    GT              reduce using rule 32 (expression -> condition .)
    LTE             reduce using rule 32 (expression -> condition .)
    GTE             reduce using rule 32 (expression -> condition .)
    AND             reduce using rule 32 (expression -> condition .)
    OR              reduce using rule 32 (expression -> condition .)
    NOT             reduce using rule 32 (expression -> condition .)
    PLUS            reduce using rule 32 (expression -> condition .)
    MINUS           reduce using rule 32 (expression -> condition .)
    TIMES           reduce using rule 32 (expression -> condition .)
    DIVISION        reduce using rule 32 (expression -> condition .)
    DIV             reduce using rule 32 (expression -> condition .)
    MOD             reduce using rule 32 (expression -> condition .)


state 192

    (138) readln -> READLN LPAREN type RPAREN .

    SEMICOLON       reduce using rule 138 (readln -> READLN LPAREN type RPAREN .)
    ELSE            reduce using rule 138 (readln -> READLN LPAREN type RPAREN .)


state 193

    (12) array_access -> IDENTIFIER LBRACKET type RBRACKET .

    ASSIGNMENT      reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    RANGE           reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    EQ              reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    NEQ             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    LT              reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    GT              reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    LTE             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    GTE             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    AND             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    OR              reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    NOT             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    PLUS            reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    MINUS           reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    TIMES           reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    DIVISION        reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    DIV             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    MOD             reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    THEN            reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    DO              reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    COMMA           reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    RPAREN          reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    SEMICOLON       reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    TO              reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    DOWNTO          reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    ELSE            reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)
    RBRACKET        reduce using rule 12 (array_access -> IDENTIFIER LBRACKET type RBRACKET .)


state 194

    (99) function -> func_header SEMICOLON VAR func_variable_declaration func_body . SEMICOLON

    SEMICOLON       shift and go to state 220


state 195

    (106) func_variable_declaration -> identifier_list COLON . type_name SEMICOLON func_variable_declaration
    (107) func_variable_declaration -> identifier_list COLON . type_name SEMICOLON
    (41) type_name -> . NINTEGER
    (42) type_name -> . NREAL
    (43) type_name -> . NSTRING
    (44) type_name -> . NCHAR
    (45) type_name -> . NBOOLEAN
    (46) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 84
    NREAL           shift and go to state 85
    NSTRING         shift and go to state 86
    NCHAR           shift and go to state 87
    NBOOLEAN        shift and go to state 88
    ARRAY           shift and go to state 90

    type_name                      shift and go to state 221
    array_type                     shift and go to state 89

state 196

    (108) func_body -> BEGIN statements END .

    SEMICOLON       reduce using rule 108 (func_body -> BEGIN statements END .)


state 197

    (85) procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .

    VAR             reduce using rule 85 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)
    BEGIN           reduce using rule 85 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)
    PROCEDURE       reduce using rule 85 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)
    FUNCTION        reduce using rule 85 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)


state 198

    (87) procedure -> PROCEDURE IDENTIFIER SEMICOLON VAR func_variable_declaration . procedure_body SEMICOLON
    (91) procedure_body -> . BEGIN statements END

    BEGIN           shift and go to state 159

    procedure_body                 shift and go to state 222

state 199

    (91) procedure_body -> BEGIN statements . END

    END             shift and go to state 223


state 200

    (86) procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN . SEMICOLON procedure_body SEMICOLON
    (88) procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN . SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON

    SEMICOLON       shift and go to state 224


state 201

    (103) func_args -> func_arglist SEMICOLON . func_args
    (103) func_args -> . func_arglist SEMICOLON func_args
    (104) func_args -> . func_arglist
    (105) func_arglist -> . identifier_list COLON type_name
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    func_arglist                   shift and go to state 161
    func_args                      shift and go to state 225
    identifier_list                shift and go to state 162

state 202

    (105) func_arglist -> identifier_list COLON . type_name
    (41) type_name -> . NINTEGER
    (42) type_name -> . NREAL
    (43) type_name -> . NSTRING
    (44) type_name -> . NCHAR
    (45) type_name -> . NBOOLEAN
    (46) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 84
    NREAL           shift and go to state 85
    NSTRING         shift and go to state 86
    NCHAR           shift and go to state 87
    NBOOLEAN        shift and go to state 88
    ARRAY           shift and go to state 90

    type_name                      shift and go to state 226
    array_type                     shift and go to state 89

state 203

    (101) func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN . COLON type_name

    COLON           shift and go to state 227


state 204

    (102) func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON . type_name
    (41) type_name -> . NINTEGER
    (42) type_name -> . NREAL
    (43) type_name -> . NSTRING
    (44) type_name -> . NCHAR
    (45) type_name -> . NBOOLEAN
    (46) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 84
    NREAL           shift and go to state 85
    NSTRING         shift and go to state 86
    NCHAR           shift and go to state 87
    NBOOLEAN        shift and go to state 88
    ARRAY           shift and go to state 90

    type_name                      shift and go to state 228
    array_type                     shift and go to state 89

state 205

    (7) variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration .

    BEGIN           reduce using rule 7 (variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration .)


state 206

    (11) array_type -> ARRAY LBRACKET type . RANGE type RBRACKET OF type_name

    RANGE           shift and go to state 229


state 207

    (140) writeln_args -> type COMMA writeln_args .

    RPAREN          reduce using rule 140 (writeln_args -> type COMMA writeln_args .)


state 208

    (98) length -> LENGTH LPAREN type . RPAREN

    RPAREN          shift and go to state 230


state 209

    (94) procedure_arg_list -> IDENTIFIER COMMA procedure_arg_list .

    RPAREN          reduce using rule 94 (procedure_arg_list -> IDENTIFIER COMMA procedure_arg_list .)


state 210

    (111) arg_list -> IDENTIFIER COMMA arg_list .

    RPAREN          reduce using rule 111 (arg_list -> IDENTIFIER COMMA arg_list .)


state 211

    (96) procedure_arg_list -> type COMMA procedure_arg_list .

    RPAREN          reduce using rule 96 (procedure_arg_list -> type COMMA procedure_arg_list .)


state 212

    (113) arg_list -> type COMMA arg_list .

    RPAREN          reduce using rule 113 (arg_list -> type COMMA arg_list .)


state 213

    (117) cond_if -> IF condition THEN statement ELSE . statement
    (118) cond_if -> IF condition THEN statement ELSE . if_body
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (128) if_body -> . BEGIN statements END
    (139) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (92) procedure_call -> . prepare_func_call
    (93) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (116) cond_if -> . IF condition THEN statement
    (117) cond_if -> . IF condition THEN statement ELSE statement
    (118) cond_if -> . IF condition THEN statement ELSE if_body
    (119) cond_if -> . IF condition THEN if_body
    (120) cond_if -> . IF condition THEN if_body ELSE if_body
    (121) cond_if -> . IF condition THEN if_body ELSE statement
    (135) while_loop -> . WHILE condition DO statement
    (136) while_loop -> . WHILE condition DO if_body
    (131) for_loop -> . FOR assignment to type DO statement
    (132) for_loop -> . FOR assignment to type DO if_body
    (133) for_loop -> . FOR assignment downto type DO statement
    (134) for_loop -> . FOR assignment downto type DO if_body
    (137) repeat_loop -> . REPEAT statements UNTIL condition
    (138) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (110) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    BEGIN           shift and go to state 176
    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    statement                      shift and go to state 231
    if_body                        shift and go to state 232
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 214

    (120) cond_if -> IF condition THEN if_body ELSE . if_body
    (121) cond_if -> IF condition THEN if_body ELSE . statement
    (128) if_body -> . BEGIN statements END
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (139) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (92) procedure_call -> . prepare_func_call
    (93) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (116) cond_if -> . IF condition THEN statement
    (117) cond_if -> . IF condition THEN statement ELSE statement
    (118) cond_if -> . IF condition THEN statement ELSE if_body
    (119) cond_if -> . IF condition THEN if_body
    (120) cond_if -> . IF condition THEN if_body ELSE if_body
    (121) cond_if -> . IF condition THEN if_body ELSE statement
    (135) while_loop -> . WHILE condition DO statement
    (136) while_loop -> . WHILE condition DO if_body
    (131) for_loop -> . FOR assignment to type DO statement
    (132) for_loop -> . FOR assignment to type DO if_body
    (133) for_loop -> . FOR assignment downto type DO statement
    (134) for_loop -> . FOR assignment downto type DO if_body
    (137) repeat_loop -> . REPEAT statements UNTIL condition
    (138) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (110) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    BEGIN           shift and go to state 176
    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    if_body                        shift and go to state 233
    statement                      shift and go to state 234
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    type                           shift and go to state 31
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 215

    (128) if_body -> BEGIN statements . END

    END             shift and go to state 235


state 216

    (111) arg_list -> IDENTIFIER COMMA . arg_list
    (111) arg_list -> . IDENTIFIER COMMA arg_list
    (112) arg_list -> . IDENTIFIER
    (113) arg_list -> . type COMMA arg_list
    (114) arg_list -> . type
    (115) arg_list -> .
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    IDENTIFIER      shift and go to state 184
    RPAREN          reduce using rule 115 (arg_list -> .)
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    arg_list                       shift and go to state 210
    type                           shift and go to state 185
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 217

    (113) arg_list -> type COMMA . arg_list
    (111) arg_list -> . IDENTIFIER COMMA arg_list
    (112) arg_list -> . IDENTIFIER
    (113) arg_list -> . type COMMA arg_list
    (114) arg_list -> . type
    (115) arg_list -> .
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    IDENTIFIER      shift and go to state 184
    RPAREN          reduce using rule 115 (arg_list -> .)
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    type                           shift and go to state 185
    arg_list                       shift and go to state 212
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 218

    (131) for_loop -> FOR assignment to type DO . statement
    (132) for_loop -> FOR assignment to type DO . if_body
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (128) if_body -> . BEGIN statements END
    (139) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (92) procedure_call -> . prepare_func_call
    (93) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (116) cond_if -> . IF condition THEN statement
    (117) cond_if -> . IF condition THEN statement ELSE statement
    (118) cond_if -> . IF condition THEN statement ELSE if_body
    (119) cond_if -> . IF condition THEN if_body
    (120) cond_if -> . IF condition THEN if_body ELSE if_body
    (121) cond_if -> . IF condition THEN if_body ELSE statement
    (135) while_loop -> . WHILE condition DO statement
    (136) while_loop -> . WHILE condition DO if_body
    (131) for_loop -> . FOR assignment to type DO statement
    (132) for_loop -> . FOR assignment to type DO if_body
    (133) for_loop -> . FOR assignment downto type DO statement
    (134) for_loop -> . FOR assignment downto type DO if_body
    (137) repeat_loop -> . REPEAT statements UNTIL condition
    (138) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (110) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    BEGIN           shift and go to state 176
    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    assignment                     shift and go to state 23
    type                           shift and go to state 31
    statement                      shift and go to state 236
    if_body                        shift and go to state 237
    writeln                        shift and go to state 22
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 219

    (133) for_loop -> FOR assignment downto type DO . statement
    (134) for_loop -> FOR assignment downto type DO . if_body
    (16) statement -> . writeln
    (17) statement -> . assignment
    (18) statement -> . procedure_call
    (19) statement -> . cond_if
    (20) statement -> . while_loop
    (21) statement -> . for_loop
    (22) statement -> . repeat_loop
    (23) statement -> . readln
    (128) if_body -> . BEGIN statements END
    (139) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (24) assignment -> . type ASSIGNMENT type
    (25) assignment -> . type ASSIGNMENT expression
    (26) assignment -> . type ASSIGNMENT length
    (92) procedure_call -> . prepare_func_call
    (93) procedure_call -> . prepare_func_call LPAREN procedure_arg_list RPAREN
    (116) cond_if -> . IF condition THEN statement
    (117) cond_if -> . IF condition THEN statement ELSE statement
    (118) cond_if -> . IF condition THEN statement ELSE if_body
    (119) cond_if -> . IF condition THEN if_body
    (120) cond_if -> . IF condition THEN if_body ELSE if_body
    (121) cond_if -> . IF condition THEN if_body ELSE statement
    (135) while_loop -> . WHILE condition DO statement
    (136) while_loop -> . WHILE condition DO if_body
    (131) for_loop -> . FOR assignment to type DO statement
    (132) for_loop -> . FOR assignment to type DO if_body
    (133) for_loop -> . FOR assignment downto type DO statement
    (134) for_loop -> . FOR assignment downto type DO if_body
    (137) repeat_loop -> . REPEAT statements UNTIL condition
    (138) readln -> . READLN LPAREN type RPAREN
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (110) prepare_func_call -> . IDENTIFIER
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET

    BEGIN           shift and go to state 176
    WRITELN         shift and go to state 30
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    READLN          shift and go to state 37
    IDENTIFIER      shift and go to state 46
    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51

    assignment                     shift and go to state 23
    type                           shift and go to state 31
    statement                      shift and go to state 238
    if_body                        shift and go to state 239
    writeln                        shift and go to state 22
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    repeat_loop                    shift and go to state 28
    readln                         shift and go to state 29
    prepare_func_call              shift and go to state 32
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45

state 220

    (99) function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .

    VAR             reduce using rule 99 (function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .)
    BEGIN           reduce using rule 99 (function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .)
    PROCEDURE       reduce using rule 99 (function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .)
    FUNCTION        reduce using rule 99 (function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .)


state 221

    (106) func_variable_declaration -> identifier_list COLON type_name . SEMICOLON func_variable_declaration
    (107) func_variable_declaration -> identifier_list COLON type_name . SEMICOLON

    SEMICOLON       shift and go to state 240


state 222

    (87) procedure -> PROCEDURE IDENTIFIER SEMICOLON VAR func_variable_declaration procedure_body . SEMICOLON

    SEMICOLON       shift and go to state 241


state 223

    (91) procedure_body -> BEGIN statements END .

    SEMICOLON       reduce using rule 91 (procedure_body -> BEGIN statements END .)


state 224

    (86) procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON . procedure_body SEMICOLON
    (88) procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON . VAR func_variable_declaration procedure_body SEMICOLON
    (91) procedure_body -> . BEGIN statements END

    VAR             shift and go to state 243
    BEGIN           shift and go to state 159

    procedure_body                 shift and go to state 242

state 225

    (103) func_args -> func_arglist SEMICOLON func_args .

    RPAREN          reduce using rule 103 (func_args -> func_arglist SEMICOLON func_args .)


state 226

    (105) func_arglist -> identifier_list COLON type_name .

    SEMICOLON       reduce using rule 105 (func_arglist -> identifier_list COLON type_name .)
    RPAREN          reduce using rule 105 (func_arglist -> identifier_list COLON type_name .)


state 227

    (101) func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON . type_name
    (41) type_name -> . NINTEGER
    (42) type_name -> . NREAL
    (43) type_name -> . NSTRING
    (44) type_name -> . NCHAR
    (45) type_name -> . NBOOLEAN
    (46) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 84
    NREAL           shift and go to state 85
    NSTRING         shift and go to state 86
    NCHAR           shift and go to state 87
    NBOOLEAN        shift and go to state 88
    ARRAY           shift and go to state 90

    type_name                      shift and go to state 244
    array_type                     shift and go to state 89

state 228

    (102) func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name .

    SEMICOLON       reduce using rule 102 (func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name .)


state 229

    (11) array_type -> ARRAY LBRACKET type RANGE . type RBRACKET OF type_name
    (47) type -> . integer
    (48) type -> . real
    (49) type -> . string
    (50) type -> . char
    (51) type -> . boolean
    (52) type -> . identifier
    (53) type -> . func_call
    (54) type -> . array_access
    (55) integer -> . INTEGER
    (56) real -> . REAL
    (57) string -> . STRING
    (58) char -> . CHAR
    (59) boolean -> . BOOLEAN
    (60) identifier -> . IDENTIFIER
    (109) func_call -> . prepare_func_call LPAREN arg_list RPAREN
    (12) array_access -> . IDENTIFIER LBRACKET type RBRACKET
    (110) prepare_func_call -> . IDENTIFIER

    INTEGER         shift and go to state 47
    REAL            shift and go to state 48
    STRING          shift and go to state 49
    CHAR            shift and go to state 50
    BOOLEAN         shift and go to state 51
    IDENTIFIER      shift and go to state 71

    type                           shift and go to state 245
    integer                        shift and go to state 38
    real                           shift and go to state 39
    string                         shift and go to state 40
    char                           shift and go to state 41
    boolean                        shift and go to state 42
    identifier                     shift and go to state 43
    func_call                      shift and go to state 44
    array_access                   shift and go to state 45
    prepare_func_call              shift and go to state 69

state 230

    (98) length -> LENGTH LPAREN type RPAREN .

    SEMICOLON       reduce using rule 98 (length -> LENGTH LPAREN type RPAREN .)
    TO              reduce using rule 98 (length -> LENGTH LPAREN type RPAREN .)
    DOWNTO          reduce using rule 98 (length -> LENGTH LPAREN type RPAREN .)
    ELSE            reduce using rule 98 (length -> LENGTH LPAREN type RPAREN .)


state 231

    (117) cond_if -> IF condition THEN statement ELSE statement .

    SEMICOLON       reduce using rule 117 (cond_if -> IF condition THEN statement ELSE statement .)
    ELSE            reduce using rule 117 (cond_if -> IF condition THEN statement ELSE statement .)


state 232

    (118) cond_if -> IF condition THEN statement ELSE if_body .

    SEMICOLON       reduce using rule 118 (cond_if -> IF condition THEN statement ELSE if_body .)
    ELSE            reduce using rule 118 (cond_if -> IF condition THEN statement ELSE if_body .)


state 233

    (120) cond_if -> IF condition THEN if_body ELSE if_body .

    SEMICOLON       reduce using rule 120 (cond_if -> IF condition THEN if_body ELSE if_body .)
    ELSE            reduce using rule 120 (cond_if -> IF condition THEN if_body ELSE if_body .)


state 234

    (121) cond_if -> IF condition THEN if_body ELSE statement .

    SEMICOLON       reduce using rule 121 (cond_if -> IF condition THEN if_body ELSE statement .)
    ELSE            reduce using rule 121 (cond_if -> IF condition THEN if_body ELSE statement .)


state 235

    (128) if_body -> BEGIN statements END .

    ELSE            reduce using rule 128 (if_body -> BEGIN statements END .)
    SEMICOLON       reduce using rule 128 (if_body -> BEGIN statements END .)


state 236

    (131) for_loop -> FOR assignment to type DO statement .

    SEMICOLON       reduce using rule 131 (for_loop -> FOR assignment to type DO statement .)
    ELSE            reduce using rule 131 (for_loop -> FOR assignment to type DO statement .)


state 237

    (132) for_loop -> FOR assignment to type DO if_body .

    SEMICOLON       reduce using rule 132 (for_loop -> FOR assignment to type DO if_body .)
    ELSE            reduce using rule 132 (for_loop -> FOR assignment to type DO if_body .)


state 238

    (133) for_loop -> FOR assignment downto type DO statement .

    SEMICOLON       reduce using rule 133 (for_loop -> FOR assignment downto type DO statement .)
    ELSE            reduce using rule 133 (for_loop -> FOR assignment downto type DO statement .)


state 239

    (134) for_loop -> FOR assignment downto type DO if_body .

    SEMICOLON       reduce using rule 134 (for_loop -> FOR assignment downto type DO if_body .)
    ELSE            reduce using rule 134 (for_loop -> FOR assignment downto type DO if_body .)


state 240

    (106) func_variable_declaration -> identifier_list COLON type_name SEMICOLON . func_variable_declaration
    (107) func_variable_declaration -> identifier_list COLON type_name SEMICOLON .
    (106) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON func_variable_declaration
    (107) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    BEGIN           reduce using rule 107 (func_variable_declaration -> identifier_list COLON type_name SEMICOLON .)
    IDENTIFIER      shift and go to state 17

    identifier_list                shift and go to state 154
    func_variable_declaration      shift and go to state 246

state 241

    (87) procedure -> PROCEDURE IDENTIFIER SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON .

    VAR             reduce using rule 87 (procedure -> PROCEDURE IDENTIFIER SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON .)
    BEGIN           reduce using rule 87 (procedure -> PROCEDURE IDENTIFIER SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON .)
    PROCEDURE       reduce using rule 87 (procedure -> PROCEDURE IDENTIFIER SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON .)
    FUNCTION        reduce using rule 87 (procedure -> PROCEDURE IDENTIFIER SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON .)


state 242

    (86) procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body . SEMICOLON

    SEMICOLON       shift and go to state 247


state 243

    (88) procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON VAR . func_variable_declaration procedure_body SEMICOLON
    (106) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON func_variable_declaration
    (107) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    func_variable_declaration      shift and go to state 248
    identifier_list                shift and go to state 154

state 244

    (101) func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name .

    SEMICOLON       reduce using rule 101 (func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name .)


state 245

    (11) array_type -> ARRAY LBRACKET type RANGE type . RBRACKET OF type_name

    RBRACKET        shift and go to state 249


state 246

    (106) func_variable_declaration -> identifier_list COLON type_name SEMICOLON func_variable_declaration .

    BEGIN           reduce using rule 106 (func_variable_declaration -> identifier_list COLON type_name SEMICOLON func_variable_declaration .)


state 247

    (86) procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON .

    VAR             reduce using rule 86 (procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON .)
    BEGIN           reduce using rule 86 (procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON .)
    PROCEDURE       reduce using rule 86 (procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON .)
    FUNCTION        reduce using rule 86 (procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON procedure_body SEMICOLON .)


state 248

    (88) procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON VAR func_variable_declaration . procedure_body SEMICOLON
    (91) procedure_body -> . BEGIN statements END

    BEGIN           shift and go to state 159

    procedure_body                 shift and go to state 250

state 249

    (11) array_type -> ARRAY LBRACKET type RANGE type RBRACKET . OF type_name

    OF              shift and go to state 251


state 250

    (88) procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON VAR func_variable_declaration procedure_body . SEMICOLON

    SEMICOLON       shift and go to state 252


state 251

    (11) array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF . type_name
    (41) type_name -> . NINTEGER
    (42) type_name -> . NREAL
    (43) type_name -> . NSTRING
    (44) type_name -> . NCHAR
    (45) type_name -> . NBOOLEAN
    (46) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 84
    NREAL           shift and go to state 85
    NSTRING         shift and go to state 86
    NCHAR           shift and go to state 87
    NBOOLEAN        shift and go to state 88
    ARRAY           shift and go to state 90

    type_name                      shift and go to state 253
    array_type                     shift and go to state 89

state 252

    (88) procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON .

    VAR             reduce using rule 88 (procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON .)
    BEGIN           reduce using rule 88 (procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON .)
    PROCEDURE       reduce using rule 88 (procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON .)
    FUNCTION        reduce using rule 88 (procedure -> PROCEDURE IDENTIFIER LPAREN func_args RPAREN SEMICOLON VAR func_variable_declaration procedure_body SEMICOLON .)


state 253

    (11) array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .

    SEMICOLON       reduce using rule 11 (array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .)
    RPAREN          reduce using rule 11 (array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RANGE in state 66 resolved as shift
WARNING: shift/reduce conflict for EQ in state 66 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 66 resolved as shift
WARNING: shift/reduce conflict for LT in state 66 resolved as shift
WARNING: shift/reduce conflict for GT in state 66 resolved as shift
WARNING: shift/reduce conflict for LTE in state 66 resolved as shift
WARNING: shift/reduce conflict for GTE in state 66 resolved as shift
WARNING: shift/reduce conflict for AND in state 66 resolved as shift
WARNING: shift/reduce conflict for OR in state 66 resolved as shift
WARNING: shift/reduce conflict for NOT in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 66 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 66 resolved as shift
WARNING: shift/reduce conflict for DIV in state 66 resolved as shift
WARNING: shift/reduce conflict for MOD in state 66 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 95 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 95 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 95 resolved as shift
WARNING: shift/reduce conflict for DIV in state 95 resolved as shift
WARNING: shift/reduce conflict for MOD in state 95 resolved as shift
WARNING: shift/reduce conflict for EQ in state 95 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 95 resolved as shift
WARNING: shift/reduce conflict for LT in state 95 resolved as shift
WARNING: shift/reduce conflict for GT in state 95 resolved as shift
WARNING: shift/reduce conflict for LTE in state 95 resolved as shift
WARNING: shift/reduce conflict for GTE in state 95 resolved as shift
WARNING: shift/reduce conflict for AND in state 95 resolved as shift
WARNING: shift/reduce conflict for OR in state 95 resolved as shift
WARNING: shift/reduce conflict for NOT in state 95 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 103 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 143 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 143 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 143 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 143 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 143 resolved as shift
WARNING: shift/reduce conflict for DIV in state 143 resolved as shift
WARNING: shift/reduce conflict for MOD in state 143 resolved as shift
WARNING: shift/reduce conflict for EQ in state 143 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 143 resolved as shift
WARNING: shift/reduce conflict for LT in state 143 resolved as shift
WARNING: shift/reduce conflict for GT in state 143 resolved as shift
WARNING: shift/reduce conflict for LTE in state 143 resolved as shift
WARNING: shift/reduce conflict for GTE in state 143 resolved as shift
WARNING: shift/reduce conflict for AND in state 143 resolved as shift
WARNING: shift/reduce conflict for OR in state 143 resolved as shift
WARNING: shift/reduce conflict for NOT in state 143 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 174 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 175 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 177 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 177 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 177 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 177 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 177 resolved as shift
WARNING: shift/reduce conflict for DIV in state 177 resolved as shift
WARNING: shift/reduce conflict for MOD in state 177 resolved as shift
WARNING: shift/reduce conflict for EQ in state 177 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 177 resolved as shift
WARNING: shift/reduce conflict for LT in state 177 resolved as shift
WARNING: shift/reduce conflict for GT in state 177 resolved as shift
WARNING: shift/reduce conflict for LTE in state 177 resolved as shift
WARNING: shift/reduce conflict for GTE in state 177 resolved as shift
WARNING: shift/reduce conflict for AND in state 177 resolved as shift
WARNING: shift/reduce conflict for OR in state 177 resolved as shift
WARNING: shift/reduce conflict for NOT in state 177 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 178 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 178 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 178 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 178 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 178 resolved as shift
WARNING: shift/reduce conflict for DIV in state 178 resolved as shift
WARNING: shift/reduce conflict for MOD in state 178 resolved as shift
WARNING: shift/reduce conflict for EQ in state 178 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 178 resolved as shift
WARNING: shift/reduce conflict for LT in state 178 resolved as shift
WARNING: shift/reduce conflict for GT in state 178 resolved as shift
WARNING: shift/reduce conflict for LTE in state 178 resolved as shift
WARNING: shift/reduce conflict for GTE in state 178 resolved as shift
WARNING: shift/reduce conflict for AND in state 178 resolved as shift
WARNING: shift/reduce conflict for OR in state 178 resolved as shift
WARNING: shift/reduce conflict for NOT in state 178 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 179 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 179 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 179 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 179 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 179 resolved as shift
WARNING: shift/reduce conflict for DIV in state 179 resolved as shift
WARNING: shift/reduce conflict for MOD in state 179 resolved as shift
WARNING: shift/reduce conflict for EQ in state 179 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 179 resolved as shift
WARNING: shift/reduce conflict for LT in state 179 resolved as shift
WARNING: shift/reduce conflict for GT in state 179 resolved as shift
WARNING: shift/reduce conflict for LTE in state 179 resolved as shift
WARNING: shift/reduce conflict for GTE in state 179 resolved as shift
WARNING: shift/reduce conflict for AND in state 179 resolved as shift
WARNING: shift/reduce conflict for OR in state 179 resolved as shift
WARNING: shift/reduce conflict for NOT in state 179 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 180 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 180 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 180 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 180 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 180 resolved as shift
WARNING: shift/reduce conflict for DIV in state 180 resolved as shift
WARNING: shift/reduce conflict for MOD in state 180 resolved as shift
WARNING: shift/reduce conflict for EQ in state 180 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 180 resolved as shift
WARNING: shift/reduce conflict for LT in state 180 resolved as shift
WARNING: shift/reduce conflict for GT in state 180 resolved as shift
WARNING: shift/reduce conflict for LTE in state 180 resolved as shift
WARNING: shift/reduce conflict for GTE in state 180 resolved as shift
WARNING: shift/reduce conflict for AND in state 180 resolved as shift
WARNING: shift/reduce conflict for OR in state 180 resolved as shift
WARNING: shift/reduce conflict for NOT in state 180 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 181 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 181 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 181 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 181 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 181 resolved as shift
WARNING: shift/reduce conflict for DIV in state 181 resolved as shift
WARNING: shift/reduce conflict for MOD in state 181 resolved as shift
WARNING: shift/reduce conflict for EQ in state 181 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 181 resolved as shift
WARNING: shift/reduce conflict for LT in state 181 resolved as shift
WARNING: shift/reduce conflict for GT in state 181 resolved as shift
WARNING: shift/reduce conflict for LTE in state 181 resolved as shift
WARNING: shift/reduce conflict for GTE in state 181 resolved as shift
WARNING: shift/reduce conflict for AND in state 181 resolved as shift
WARNING: shift/reduce conflict for OR in state 181 resolved as shift
WARNING: shift/reduce conflict for NOT in state 181 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 182 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 182 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 182 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 182 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 182 resolved as shift
WARNING: shift/reduce conflict for DIV in state 182 resolved as shift
WARNING: shift/reduce conflict for MOD in state 182 resolved as shift
WARNING: shift/reduce conflict for EQ in state 182 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 182 resolved as shift
WARNING: shift/reduce conflict for LT in state 182 resolved as shift
WARNING: shift/reduce conflict for GT in state 182 resolved as shift
WARNING: shift/reduce conflict for LTE in state 182 resolved as shift
WARNING: shift/reduce conflict for GTE in state 182 resolved as shift
WARNING: shift/reduce conflict for AND in state 182 resolved as shift
WARNING: shift/reduce conflict for OR in state 182 resolved as shift
WARNING: shift/reduce conflict for NOT in state 182 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 184 resolved as shift
WARNING: reduce/reduce conflict in state 67 resolved using rule (expression -> func_call)
WARNING: rejected rule (condition -> func_call) in state 67
WARNING: reduce/reduce conflict in state 67 resolved using rule (expression -> func_call)
WARNING: rejected rule (type -> func_call) in state 67
WARNING: reduce/reduce conflict in state 67 resolved using rule (type -> func_call)
WARNING: rejected rule (condition -> func_call) in state 67
WARNING: reduce/reduce conflict in state 95 resolved using rule (assignment -> type ASSIGNMENT type)
WARNING: rejected rule (condition -> type) in state 95
WARNING: reduce/reduce conflict in state 98 resolved using rule (expression -> func_call)
WARNING: rejected rule (type -> func_call) in state 98
WARNING: reduce/reduce conflict in state 98 resolved using rule (expression -> func_call)
WARNING: rejected rule (condition -> func_call) in state 98
WARNING: reduce/reduce conflict in state 103 resolved using rule (procedure_arg_list -> IDENTIFIER)
WARNING: rejected rule (arg_list -> IDENTIFIER) in state 103
WARNING: reduce/reduce conflict in state 103 resolved using rule (identifier -> IDENTIFIER)
WARNING: rejected rule (procedure_arg_list -> IDENTIFIER) in state 103
WARNING: reduce/reduce conflict in state 104 resolved using rule (procedure_arg_list -> type)
WARNING: rejected rule (arg_list -> type) in state 104
WARNING: reduce/reduce conflict in state 144 resolved using rule (expression -> func_call)
WARNING: rejected rule (type -> func_call) in state 144
WARNING: reduce/reduce conflict in state 144 resolved using rule (expression -> func_call)
WARNING: rejected rule (condition -> func_call) in state 144
WARNING: reduce/reduce conflict in state 178 resolved using rule (condition -> expression comparator type)
WARNING: rejected rule (condition -> type) in state 178
WARNING: reduce/reduce conflict in state 180 resolved using rule (expression -> expression operation type)
WARNING: rejected rule (condition -> type) in state 180
WARNING: reduce/reduce conflict in state 181 resolved using rule (condition -> type comparator type)
WARNING: rejected rule (condition -> type) in state 181
WARNING: reduce/reduce conflict in state 184 resolved using rule (identifier -> IDENTIFIER)
WARNING: rejected rule (arg_list -> IDENTIFIER) in state 184
WARNING: Rule (condition -> func_call) is never reduced
WARNING: Rule (arg_list -> IDENTIFIER) is never reduced
WARNING: Rule (procedure_arg_list -> IDENTIFIER) is never reduced
