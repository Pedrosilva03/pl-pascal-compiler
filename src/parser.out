Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    REPEAT
    UNTIL

Grammar

Rule 0     S' -> program
Rule 1     program -> header block DOT
Rule 2     header -> PROGRAM IDENTIFIER SEMICOLON
Rule 3     block -> VAR variable_declaration body
Rule 4     block -> body
Rule 5     block -> function block
Rule 6     block -> procedure block
Rule 7     variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration
Rule 8     variable_declaration -> identifier_list COLON type_name SEMICOLON
Rule 9     identifier_list -> IDENTIFIER COMMA identifier_list
Rule 10    identifier_list -> IDENTIFIER
Rule 11    array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name
Rule 12    body -> BEGIN statements END
Rule 13    statements -> statement SEMICOLON statements
Rule 14    statements -> statement SEMICOLON
Rule 15    statement -> writeln
Rule 16    statement -> assignment
Rule 17    statement -> procedure_call
Rule 18    statement -> cond_if
Rule 19    statement -> while_loop
Rule 20    statement -> for_loop
Rule 21    statement -> readln
Rule 22    assignment -> IDENTIFIER ASSIGNMENT type
Rule 23    assignment -> IDENTIFIER ASSIGNMENT expression
Rule 24    expression -> type operation type
Rule 25    expression -> expression_paren
Rule 26    expression -> expression operation expression
Rule 27    expression -> func_call
Rule 28    expression -> condition
Rule 29    expression_paren -> LPAREN expression RPAREN
Rule 30    operation -> plus
Rule 31    operation -> minus
Rule 32    operation -> times
Rule 33    operation -> division
Rule 34    operation -> div
Rule 35    operation -> mod
Rule 36    operation -> RANGE
Rule 37    type_name -> NINTEGER
Rule 38    type_name -> NREAL
Rule 39    type_name -> NSTRING
Rule 40    type_name -> NCHAR
Rule 41    type_name -> NBOOLEAN
Rule 42    type_name -> array_type
Rule 43    type -> integer
Rule 44    type -> real
Rule 45    type -> string
Rule 46    type -> char
Rule 47    type -> boolean
Rule 48    type -> identifier
Rule 49    type -> func_call
Rule 50    integer -> INTEGER
Rule 51    real -> REAL
Rule 52    string -> STRING
Rule 53    char -> CHAR
Rule 54    boolean -> BOOLEAN
Rule 55    identifier -> IDENTIFIER
Rule 56    plus -> PLUS
Rule 57    minus -> MINUS
Rule 58    times -> TIMES
Rule 59    division -> DIVISION
Rule 60    div -> DIV
Rule 61    mod -> MOD
Rule 62    comparator -> eq
Rule 63    comparator -> neq
Rule 64    comparator -> lt
Rule 65    comparator -> gt
Rule 66    comparator -> lte
Rule 67    comparator -> gte
Rule 68    comparator -> and
Rule 69    comparator -> or
Rule 70    comparator -> not
Rule 71    eq -> EQ
Rule 72    neq -> NEQ
Rule 73    lt -> LT
Rule 74    gt -> GT
Rule 75    lte -> LTE
Rule 76    gte -> GTE
Rule 77    and -> AND
Rule 78    or -> OR
Rule 79    not -> NOT
Rule 80    function -> func_header SEMICOLON func_body SEMICOLON
Rule 81    func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
Rule 82    func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name
Rule 83    func_args -> func_arg COMMA func_args
Rule 84    func_args -> func_arg
Rule 85    func_arg -> IDENTIFIER COLON type_name
Rule 86    func_body -> BEGIN statements END
Rule 87    func_call -> IDENTIFIER LPAREN arg_list RPAREN
Rule 88    arg_list -> IDENTIFIER COMMA arg_list
Rule 89    arg_list -> IDENTIFIER
Rule 90    arg_list -> <empty>
Rule 91    procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
Rule 92    procedure_body -> BEGIN statements END
Rule 93    procedure_call -> IDENTIFIER
Rule 94    cond_if -> IF condition THEN statement
Rule 95    cond_if -> IF condition THEN statement ELSE statement
Rule 96    cond_if -> IF condition THEN if_body
Rule 97    cond_if -> IF condition THEN if_body ELSE if_body
Rule 98    condition -> expression comparator expression
Rule 99    condition -> type comparator expression
Rule 100   condition -> type comparator type
Rule 101   condition -> expression comparator type
Rule 102   condition -> type
Rule 103   if_body -> BEGIN statements END
Rule 104   to -> TO
Rule 105   downto -> DOWNTO
Rule 106   for_loop -> FOR assignment to type DO statement
Rule 107   for_loop -> FOR assignment to type DO if_body
Rule 108   for_loop -> FOR assignment downto type DO statement
Rule 109   for_loop -> FOR assignment downto type DO if_body
Rule 110   while_loop -> WHILE condition DO statement
Rule 111   while_loop -> WHILE condition DO if_body
Rule 112   readln -> READLN LPAREN type RPAREN
Rule 113   writeln -> WRITELN LPAREN writeln_args RPAREN
Rule 114   writeln_args -> type COMMA writeln_args
Rule 115   writeln_args -> type

Terminals, with rules where they appear

AND                  : 77
ARRAY                : 11
ASSIGNMENT           : 22 23
BEGIN                : 12 86 92 103
BOOLEAN              : 54
CHAR                 : 53
COLON                : 7 8 81 82 85
COMMA                : 9 83 88 114
COMMENT              : 
DIV                  : 60
DIVISION             : 59
DO                   : 106 107 108 109 110 111
DOT                  : 1
DOWNTO               : 105
ELSE                 : 95 97
END                  : 12 86 92 103
EQ                   : 71
FOR                  : 106 107 108 109
FUNCTION             : 81 82
GT                   : 74
GTE                  : 76
IDENTIFIER           : 2 9 10 22 23 55 81 82 85 87 88 89 91 93
IF                   : 94 95 96 97
INTEGER              : 50
LBRACKET             : 11
LPAREN               : 29 81 82 87 112 113
LT                   : 73
LTE                  : 75
MINUS                : 57
MOD                  : 61
NBOOLEAN             : 41
NCHAR                : 40
NEQ                  : 72
NINTEGER             : 37
NOT                  : 79
NREAL                : 38
NSTRING              : 39
OF                   : 11
OR                   : 78
PLUS                 : 56
PROCEDURE            : 91
PROGRAM              : 2
RANGE                : 11 36
RBRACKET             : 11
READLN               : 112
REAL                 : 51
REPEAT               : 
RPAREN               : 29 81 82 87 112 113
SEMICOLON            : 2 7 8 13 14 80 80 91 91
STRING               : 52
THEN                 : 94 95 96 97
TIMES                : 58
TO                   : 104
UNTIL                : 
VAR                  : 3
WHILE                : 110 111
WRITELN              : 113
error                : 

Nonterminals, with rules where they appear

and                  : 68
arg_list             : 87 88
array_type           : 42
assignment           : 16 106 107 108 109
block                : 1 5 6
body                 : 3 4
boolean              : 47
char                 : 46
comparator           : 98 99 100 101
cond_if              : 18
condition            : 28 94 95 96 97 110 111
div                  : 34
division             : 33
downto               : 108 109
eq                   : 62
expression           : 23 26 26 29 98 98 99 101
expression_paren     : 25
for_loop             : 20
func_arg             : 83 84
func_args            : 81 83
func_body            : 80
func_call            : 27 49
func_header          : 80
function             : 5
gt                   : 65
gte                  : 67
header               : 1
identifier           : 48
identifier_list      : 7 8 9
if_body              : 96 97 97 107 109 111
integer              : 43
lt                   : 64
lte                  : 66
minus                : 31
mod                  : 35
neq                  : 63
not                  : 70
operation            : 24 26
or                   : 69
plus                 : 30
procedure            : 6
procedure_body       : 91
procedure_call       : 17
program              : 0
readln               : 21
real                 : 44
statement            : 13 14 94 95 95 106 108 110
statements           : 12 13 86 92 103
string               : 45
times                : 32
to                   : 106 107
type                 : 11 11 22 24 24 99 100 100 101 102 106 107 108 109 112 114 115
type_name            : 7 8 11 81 82 85
variable_declaration : 3 7
while_loop           : 19
writeln              : 15
writeln_args         : 113 114

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . header block DOT
    (2) header -> . PROGRAM IDENTIFIER SEMICOLON

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    header                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> header . block DOT
    (3) block -> . VAR variable_declaration body
    (4) block -> . body
    (5) block -> . function block
    (6) block -> . procedure block
    (12) body -> . BEGIN statements END
    (80) function -> . func_header SEMICOLON func_body SEMICOLON
    (91) procedure -> . PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
    (81) func_header -> . FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (82) func_header -> . FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name

    VAR             shift and go to state 5
    BEGIN           shift and go to state 9
    PROCEDURE       shift and go to state 11
    FUNCTION        shift and go to state 12

    block                          shift and go to state 4
    body                           shift and go to state 6
    function                       shift and go to state 7
    procedure                      shift and go to state 8
    func_header                    shift and go to state 10

state 3

    (2) header -> PROGRAM . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 13


state 4

    (1) program -> header block . DOT

    DOT             shift and go to state 14


state 5

    (3) block -> VAR . variable_declaration body
    (7) variable_declaration -> . identifier_list COLON type_name SEMICOLON variable_declaration
    (8) variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    variable_declaration           shift and go to state 15
    identifier_list                shift and go to state 16

state 6

    (4) block -> body .

    DOT             reduce using rule 4 (block -> body .)


state 7

    (5) block -> function . block
    (3) block -> . VAR variable_declaration body
    (4) block -> . body
    (5) block -> . function block
    (6) block -> . procedure block
    (12) body -> . BEGIN statements END
    (80) function -> . func_header SEMICOLON func_body SEMICOLON
    (91) procedure -> . PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
    (81) func_header -> . FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (82) func_header -> . FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name

    VAR             shift and go to state 5
    BEGIN           shift and go to state 9
    PROCEDURE       shift and go to state 11
    FUNCTION        shift and go to state 12

    function                       shift and go to state 7
    block                          shift and go to state 18
    body                           shift and go to state 6
    procedure                      shift and go to state 8
    func_header                    shift and go to state 10

state 8

    (6) block -> procedure . block
    (3) block -> . VAR variable_declaration body
    (4) block -> . body
    (5) block -> . function block
    (6) block -> . procedure block
    (12) body -> . BEGIN statements END
    (80) function -> . func_header SEMICOLON func_body SEMICOLON
    (91) procedure -> . PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
    (81) func_header -> . FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (82) func_header -> . FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name

    VAR             shift and go to state 5
    BEGIN           shift and go to state 9
    PROCEDURE       shift and go to state 11
    FUNCTION        shift and go to state 12

    procedure                      shift and go to state 8
    block                          shift and go to state 19
    body                           shift and go to state 6
    function                       shift and go to state 7
    func_header                    shift and go to state 10

state 9

    (12) body -> BEGIN . statements END
    (13) statements -> . statement SEMICOLON statements
    (14) statements -> . statement SEMICOLON
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (113) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (93) procedure_call -> . IDENTIFIER
    (94) cond_if -> . IF condition THEN statement
    (95) cond_if -> . IF condition THEN statement ELSE statement
    (96) cond_if -> . IF condition THEN if_body
    (97) cond_if -> . IF condition THEN if_body ELSE if_body
    (110) while_loop -> . WHILE condition DO statement
    (111) while_loop -> . WHILE condition DO if_body
    (106) for_loop -> . FOR assignment to type DO statement
    (107) for_loop -> . FOR assignment to type DO if_body
    (108) for_loop -> . FOR assignment downto type DO statement
    (109) for_loop -> . FOR assignment downto type DO if_body
    (112) readln -> . READLN LPAREN type RPAREN

    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    statements                     shift and go to state 20
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 10

    (80) function -> func_header . SEMICOLON func_body SEMICOLON

    SEMICOLON       shift and go to state 35


state 11

    (91) procedure -> PROCEDURE . IDENTIFIER SEMICOLON procedure_body SEMICOLON

    IDENTIFIER      shift and go to state 36


state 12

    (81) func_header -> FUNCTION . IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (82) func_header -> FUNCTION . IDENTIFIER LPAREN RPAREN COLON type_name

    IDENTIFIER      shift and go to state 37


state 13

    (2) header -> PROGRAM IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 38


state 14

    (1) program -> header block DOT .

    $end            reduce using rule 1 (program -> header block DOT .)


state 15

    (3) block -> VAR variable_declaration . body
    (12) body -> . BEGIN statements END

    BEGIN           shift and go to state 9

    body                           shift and go to state 39

state 16

    (7) variable_declaration -> identifier_list . COLON type_name SEMICOLON variable_declaration
    (8) variable_declaration -> identifier_list . COLON type_name SEMICOLON

    COLON           shift and go to state 40


state 17

    (9) identifier_list -> IDENTIFIER . COMMA identifier_list
    (10) identifier_list -> IDENTIFIER .

    COMMA           shift and go to state 41
    COLON           reduce using rule 10 (identifier_list -> IDENTIFIER .)


state 18

    (5) block -> function block .

    DOT             reduce using rule 5 (block -> function block .)


state 19

    (6) block -> procedure block .

    DOT             reduce using rule 6 (block -> procedure block .)


state 20

    (12) body -> BEGIN statements . END

    END             shift and go to state 42


state 21

    (13) statements -> statement . SEMICOLON statements
    (14) statements -> statement . SEMICOLON

    SEMICOLON       shift and go to state 43


state 22

    (15) statement -> writeln .

    SEMICOLON       reduce using rule 15 (statement -> writeln .)
    ELSE            reduce using rule 15 (statement -> writeln .)


state 23

    (16) statement -> assignment .

    SEMICOLON       reduce using rule 16 (statement -> assignment .)
    ELSE            reduce using rule 16 (statement -> assignment .)


state 24

    (17) statement -> procedure_call .

    SEMICOLON       reduce using rule 17 (statement -> procedure_call .)
    ELSE            reduce using rule 17 (statement -> procedure_call .)


state 25

    (18) statement -> cond_if .

    SEMICOLON       reduce using rule 18 (statement -> cond_if .)
    ELSE            reduce using rule 18 (statement -> cond_if .)


state 26

    (19) statement -> while_loop .

    SEMICOLON       reduce using rule 19 (statement -> while_loop .)
    ELSE            reduce using rule 19 (statement -> while_loop .)


state 27

    (20) statement -> for_loop .

    SEMICOLON       reduce using rule 20 (statement -> for_loop .)
    ELSE            reduce using rule 20 (statement -> for_loop .)


state 28

    (21) statement -> readln .

    SEMICOLON       reduce using rule 21 (statement -> readln .)
    ELSE            reduce using rule 21 (statement -> readln .)


state 29

    (113) writeln -> WRITELN . LPAREN writeln_args RPAREN

    LPAREN          shift and go to state 44


state 30

    (22) assignment -> IDENTIFIER . ASSIGNMENT type
    (23) assignment -> IDENTIFIER . ASSIGNMENT expression
    (93) procedure_call -> IDENTIFIER .

    ASSIGNMENT      shift and go to state 45
    SEMICOLON       reduce using rule 93 (procedure_call -> IDENTIFIER .)
    ELSE            reduce using rule 93 (procedure_call -> IDENTIFIER .)


state 31

    (94) cond_if -> IF . condition THEN statement
    (95) cond_if -> IF . condition THEN statement ELSE statement
    (96) cond_if -> IF . condition THEN if_body
    (97) cond_if -> IF . condition THEN if_body ELSE if_body
    (98) condition -> . expression comparator expression
    (99) condition -> . type comparator expression
    (100) condition -> . type comparator type
    (101) condition -> . expression comparator type
    (102) condition -> . type
    (24) expression -> . type operation type
    (25) expression -> . expression_paren
    (26) expression -> . expression operation expression
    (27) expression -> . func_call
    (28) expression -> . condition
    (43) type -> . integer
    (44) type -> . real
    (45) type -> . string
    (46) type -> . char
    (47) type -> . boolean
    (48) type -> . identifier
    (49) type -> . func_call
    (29) expression_paren -> . LPAREN expression RPAREN
    (87) func_call -> . IDENTIFIER LPAREN arg_list RPAREN
    (50) integer -> . INTEGER
    (51) real -> . REAL
    (52) string -> . STRING
    (53) char -> . CHAR
    (54) boolean -> . BOOLEAN
    (55) identifier -> . IDENTIFIER

    LPAREN          shift and go to state 57
    IDENTIFIER      shift and go to state 58
    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63

    condition                      shift and go to state 46
    expression                     shift and go to state 47
    type                           shift and go to state 48
    expression_paren               shift and go to state 49
    func_call                      shift and go to state 50
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56

state 32

    (110) while_loop -> WHILE . condition DO statement
    (111) while_loop -> WHILE . condition DO if_body
    (98) condition -> . expression comparator expression
    (99) condition -> . type comparator expression
    (100) condition -> . type comparator type
    (101) condition -> . expression comparator type
    (102) condition -> . type
    (24) expression -> . type operation type
    (25) expression -> . expression_paren
    (26) expression -> . expression operation expression
    (27) expression -> . func_call
    (28) expression -> . condition
    (43) type -> . integer
    (44) type -> . real
    (45) type -> . string
    (46) type -> . char
    (47) type -> . boolean
    (48) type -> . identifier
    (49) type -> . func_call
    (29) expression_paren -> . LPAREN expression RPAREN
    (87) func_call -> . IDENTIFIER LPAREN arg_list RPAREN
    (50) integer -> . INTEGER
    (51) real -> . REAL
    (52) string -> . STRING
    (53) char -> . CHAR
    (54) boolean -> . BOOLEAN
    (55) identifier -> . IDENTIFIER

    LPAREN          shift and go to state 57
    IDENTIFIER      shift and go to state 58
    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63

    condition                      shift and go to state 64
    expression                     shift and go to state 47
    type                           shift and go to state 48
    expression_paren               shift and go to state 49
    func_call                      shift and go to state 50
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56

state 33

    (106) for_loop -> FOR . assignment to type DO statement
    (107) for_loop -> FOR . assignment to type DO if_body
    (108) for_loop -> FOR . assignment downto type DO statement
    (109) for_loop -> FOR . assignment downto type DO if_body
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression

    IDENTIFIER      shift and go to state 66

    assignment                     shift and go to state 65

state 34

    (112) readln -> READLN . LPAREN type RPAREN

    LPAREN          shift and go to state 67


state 35

    (80) function -> func_header SEMICOLON . func_body SEMICOLON
    (86) func_body -> . BEGIN statements END

    BEGIN           shift and go to state 69

    func_body                      shift and go to state 68

state 36

    (91) procedure -> PROCEDURE IDENTIFIER . SEMICOLON procedure_body SEMICOLON

    SEMICOLON       shift and go to state 70


state 37

    (81) func_header -> FUNCTION IDENTIFIER . LPAREN func_args RPAREN COLON type_name
    (82) func_header -> FUNCTION IDENTIFIER . LPAREN RPAREN COLON type_name

    LPAREN          shift and go to state 71


state 38

    (2) header -> PROGRAM IDENTIFIER SEMICOLON .

    VAR             reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)
    BEGIN           reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)
    PROCEDURE       reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)


state 39

    (3) block -> VAR variable_declaration body .

    DOT             reduce using rule 3 (block -> VAR variable_declaration body .)


state 40

    (7) variable_declaration -> identifier_list COLON . type_name SEMICOLON variable_declaration
    (8) variable_declaration -> identifier_list COLON . type_name SEMICOLON
    (37) type_name -> . NINTEGER
    (38) type_name -> . NREAL
    (39) type_name -> . NSTRING
    (40) type_name -> . NCHAR
    (41) type_name -> . NBOOLEAN
    (42) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 73
    NREAL           shift and go to state 74
    NSTRING         shift and go to state 75
    NCHAR           shift and go to state 76
    NBOOLEAN        shift and go to state 77
    ARRAY           shift and go to state 79

    type_name                      shift and go to state 72
    array_type                     shift and go to state 78

state 41

    (9) identifier_list -> IDENTIFIER COMMA . identifier_list
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    identifier_list                shift and go to state 80

state 42

    (12) body -> BEGIN statements END .

    DOT             reduce using rule 12 (body -> BEGIN statements END .)


state 43

    (13) statements -> statement SEMICOLON . statements
    (14) statements -> statement SEMICOLON .
    (13) statements -> . statement SEMICOLON statements
    (14) statements -> . statement SEMICOLON
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (113) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (93) procedure_call -> . IDENTIFIER
    (94) cond_if -> . IF condition THEN statement
    (95) cond_if -> . IF condition THEN statement ELSE statement
    (96) cond_if -> . IF condition THEN if_body
    (97) cond_if -> . IF condition THEN if_body ELSE if_body
    (110) while_loop -> . WHILE condition DO statement
    (111) while_loop -> . WHILE condition DO if_body
    (106) for_loop -> . FOR assignment to type DO statement
    (107) for_loop -> . FOR assignment to type DO if_body
    (108) for_loop -> . FOR assignment downto type DO statement
    (109) for_loop -> . FOR assignment downto type DO if_body
    (112) readln -> . READLN LPAREN type RPAREN

    END             reduce using rule 14 (statements -> statement SEMICOLON .)
    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    statement                      shift and go to state 21
    statements                     shift and go to state 81
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 44

    (113) writeln -> WRITELN LPAREN . writeln_args RPAREN
    (114) writeln_args -> . type COMMA writeln_args
    (115) writeln_args -> . type
    (43) type -> . integer
    (44) type -> . real
    (45) type -> . string
    (46) type -> . char
    (47) type -> . boolean
    (48) type -> . identifier
    (49) type -> . func_call
    (50) integer -> . INTEGER
    (51) real -> . REAL
    (52) string -> . STRING
    (53) char -> . CHAR
    (54) boolean -> . BOOLEAN
    (55) identifier -> . IDENTIFIER
    (87) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 85

    writeln_args                   shift and go to state 82
    type                           shift and go to state 83
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 84

state 45

    (22) assignment -> IDENTIFIER ASSIGNMENT . type
    (23) assignment -> IDENTIFIER ASSIGNMENT . expression
    (43) type -> . integer
    (44) type -> . real
    (45) type -> . string
    (46) type -> . char
    (47) type -> . boolean
    (48) type -> . identifier
    (49) type -> . func_call
    (24) expression -> . type operation type
    (25) expression -> . expression_paren
    (26) expression -> . expression operation expression
    (27) expression -> . func_call
    (28) expression -> . condition
    (50) integer -> . INTEGER
    (51) real -> . REAL
    (52) string -> . STRING
    (53) char -> . CHAR
    (54) boolean -> . BOOLEAN
    (55) identifier -> . IDENTIFIER
    (87) func_call -> . IDENTIFIER LPAREN arg_list RPAREN
    (29) expression_paren -> . LPAREN expression RPAREN
    (98) condition -> . expression comparator expression
    (99) condition -> . type comparator expression
    (100) condition -> . type comparator type
    (101) condition -> . expression comparator type
    (102) condition -> . type

    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 85
    LPAREN          shift and go to state 57

    type                           shift and go to state 86
    expression                     shift and go to state 87
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 88
    expression_paren               shift and go to state 49
    condition                      shift and go to state 89

state 46

    (94) cond_if -> IF condition . THEN statement
    (95) cond_if -> IF condition . THEN statement ELSE statement
    (96) cond_if -> IF condition . THEN if_body
    (97) cond_if -> IF condition . THEN if_body ELSE if_body
    (28) expression -> condition .

    THEN            shift and go to state 90
    RANGE           reduce using rule 28 (expression -> condition .)
    EQ              reduce using rule 28 (expression -> condition .)
    NEQ             reduce using rule 28 (expression -> condition .)
    LT              reduce using rule 28 (expression -> condition .)
    GT              reduce using rule 28 (expression -> condition .)
    LTE             reduce using rule 28 (expression -> condition .)
    GTE             reduce using rule 28 (expression -> condition .)
    AND             reduce using rule 28 (expression -> condition .)
    OR              reduce using rule 28 (expression -> condition .)
    NOT             reduce using rule 28 (expression -> condition .)
    PLUS            reduce using rule 28 (expression -> condition .)
    MINUS           reduce using rule 28 (expression -> condition .)
    TIMES           reduce using rule 28 (expression -> condition .)
    DIVISION        reduce using rule 28 (expression -> condition .)
    DIV             reduce using rule 28 (expression -> condition .)
    MOD             reduce using rule 28 (expression -> condition .)


state 47

    (98) condition -> expression . comparator expression
    (101) condition -> expression . comparator type
    (26) expression -> expression . operation expression
    (62) comparator -> . eq
    (63) comparator -> . neq
    (64) comparator -> . lt
    (65) comparator -> . gt
    (66) comparator -> . lte
    (67) comparator -> . gte
    (68) comparator -> . and
    (69) comparator -> . or
    (70) comparator -> . not
    (30) operation -> . plus
    (31) operation -> . minus
    (32) operation -> . times
    (33) operation -> . division
    (34) operation -> . div
    (35) operation -> . mod
    (36) operation -> . RANGE
    (71) eq -> . EQ
    (72) neq -> . NEQ
    (73) lt -> . LT
    (74) gt -> . GT
    (75) lte -> . LTE
    (76) gte -> . GTE
    (77) and -> . AND
    (78) or -> . OR
    (79) not -> . NOT
    (56) plus -> . PLUS
    (57) minus -> . MINUS
    (58) times -> . TIMES
    (59) division -> . DIVISION
    (60) div -> . DIV
    (61) mod -> . MOD

    RANGE           shift and go to state 108
    EQ              shift and go to state 109
    NEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LTE             shift and go to state 113
    GTE             shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    NOT             shift and go to state 117
    PLUS            shift and go to state 118
    MINUS           shift and go to state 119
    TIMES           shift and go to state 120
    DIVISION        shift and go to state 121
    DIV             shift and go to state 122
    MOD             shift and go to state 123

    comparator                     shift and go to state 91
    operation                      shift and go to state 92
    eq                             shift and go to state 93
    neq                            shift and go to state 94
    lt                             shift and go to state 95
    gt                             shift and go to state 96
    lte                            shift and go to state 97
    gte                            shift and go to state 98
    and                            shift and go to state 99
    or                             shift and go to state 100
    not                            shift and go to state 101
    plus                           shift and go to state 102
    minus                          shift and go to state 103
    times                          shift and go to state 104
    division                       shift and go to state 105
    div                            shift and go to state 106
    mod                            shift and go to state 107

state 48

    (99) condition -> type . comparator expression
    (100) condition -> type . comparator type
    (102) condition -> type .
    (24) expression -> type . operation type
    (62) comparator -> . eq
    (63) comparator -> . neq
    (64) comparator -> . lt
    (65) comparator -> . gt
    (66) comparator -> . lte
    (67) comparator -> . gte
    (68) comparator -> . and
    (69) comparator -> . or
    (70) comparator -> . not
    (30) operation -> . plus
    (31) operation -> . minus
    (32) operation -> . times
    (33) operation -> . division
    (34) operation -> . div
    (35) operation -> . mod
    (36) operation -> . RANGE
    (71) eq -> . EQ
    (72) neq -> . NEQ
    (73) lt -> . LT
    (74) gt -> . GT
    (75) lte -> . LTE
    (76) gte -> . GTE
    (77) and -> . AND
    (78) or -> . OR
    (79) not -> . NOT
    (56) plus -> . PLUS
    (57) minus -> . MINUS
    (58) times -> . TIMES
    (59) division -> . DIVISION
    (60) div -> . DIV
    (61) mod -> . MOD

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    THEN            reduce using rule 102 (condition -> type .)
    DO              reduce using rule 102 (condition -> type .)
    RANGE           shift and go to state 108
    EQ              shift and go to state 109
    NEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LTE             shift and go to state 113
    GTE             shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    NOT             shift and go to state 117
    PLUS            shift and go to state 118
    MINUS           shift and go to state 119
    TIMES           shift and go to state 120
    DIVISION        shift and go to state 121
    DIV             shift and go to state 122
    MOD             shift and go to state 123

  ! RANGE           [ reduce using rule 102 (condition -> type .) ]
  ! EQ              [ reduce using rule 102 (condition -> type .) ]
  ! NEQ             [ reduce using rule 102 (condition -> type .) ]
  ! LT              [ reduce using rule 102 (condition -> type .) ]
  ! GT              [ reduce using rule 102 (condition -> type .) ]
  ! LTE             [ reduce using rule 102 (condition -> type .) ]
  ! GTE             [ reduce using rule 102 (condition -> type .) ]
  ! AND             [ reduce using rule 102 (condition -> type .) ]
  ! OR              [ reduce using rule 102 (condition -> type .) ]
  ! NOT             [ reduce using rule 102 (condition -> type .) ]
  ! PLUS            [ reduce using rule 102 (condition -> type .) ]
  ! MINUS           [ reduce using rule 102 (condition -> type .) ]
  ! TIMES           [ reduce using rule 102 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 102 (condition -> type .) ]
  ! DIV             [ reduce using rule 102 (condition -> type .) ]
  ! MOD             [ reduce using rule 102 (condition -> type .) ]

    comparator                     shift and go to state 124
    operation                      shift and go to state 125
    eq                             shift and go to state 93
    neq                            shift and go to state 94
    lt                             shift and go to state 95
    gt                             shift and go to state 96
    lte                            shift and go to state 97
    gte                            shift and go to state 98
    and                            shift and go to state 99
    or                             shift and go to state 100
    not                            shift and go to state 101
    plus                           shift and go to state 102
    minus                          shift and go to state 103
    times                          shift and go to state 104
    division                       shift and go to state 105
    div                            shift and go to state 106
    mod                            shift and go to state 107

state 49

    (25) expression -> expression_paren .

    RANGE           reduce using rule 25 (expression -> expression_paren .)
    EQ              reduce using rule 25 (expression -> expression_paren .)
    NEQ             reduce using rule 25 (expression -> expression_paren .)
    LT              reduce using rule 25 (expression -> expression_paren .)
    GT              reduce using rule 25 (expression -> expression_paren .)
    LTE             reduce using rule 25 (expression -> expression_paren .)
    GTE             reduce using rule 25 (expression -> expression_paren .)
    AND             reduce using rule 25 (expression -> expression_paren .)
    OR              reduce using rule 25 (expression -> expression_paren .)
    NOT             reduce using rule 25 (expression -> expression_paren .)
    PLUS            reduce using rule 25 (expression -> expression_paren .)
    MINUS           reduce using rule 25 (expression -> expression_paren .)
    TIMES           reduce using rule 25 (expression -> expression_paren .)
    DIVISION        reduce using rule 25 (expression -> expression_paren .)
    DIV             reduce using rule 25 (expression -> expression_paren .)
    MOD             reduce using rule 25 (expression -> expression_paren .)
    SEMICOLON       reduce using rule 25 (expression -> expression_paren .)
    TO              reduce using rule 25 (expression -> expression_paren .)
    DOWNTO          reduce using rule 25 (expression -> expression_paren .)
    ELSE            reduce using rule 25 (expression -> expression_paren .)
    RPAREN          reduce using rule 25 (expression -> expression_paren .)
    THEN            reduce using rule 25 (expression -> expression_paren .)
    DO              reduce using rule 25 (expression -> expression_paren .)


state 50

    (27) expression -> func_call .
    (49) type -> func_call .

  ! reduce/reduce conflict for RANGE resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for EQ resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for NEQ resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for LTE resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for GTE resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for AND resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for OR resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for NOT resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for DIVISION resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for DIV resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for MOD resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for THEN resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for DO resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for TO resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 27 (expression -> func_call .)
    RANGE           reduce using rule 27 (expression -> func_call .)
    EQ              reduce using rule 27 (expression -> func_call .)
    NEQ             reduce using rule 27 (expression -> func_call .)
    LT              reduce using rule 27 (expression -> func_call .)
    GT              reduce using rule 27 (expression -> func_call .)
    LTE             reduce using rule 27 (expression -> func_call .)
    GTE             reduce using rule 27 (expression -> func_call .)
    AND             reduce using rule 27 (expression -> func_call .)
    OR              reduce using rule 27 (expression -> func_call .)
    NOT             reduce using rule 27 (expression -> func_call .)
    PLUS            reduce using rule 27 (expression -> func_call .)
    MINUS           reduce using rule 27 (expression -> func_call .)
    TIMES           reduce using rule 27 (expression -> func_call .)
    DIVISION        reduce using rule 27 (expression -> func_call .)
    DIV             reduce using rule 27 (expression -> func_call .)
    MOD             reduce using rule 27 (expression -> func_call .)
    RPAREN          reduce using rule 27 (expression -> func_call .)
    THEN            reduce using rule 27 (expression -> func_call .)
    DO              reduce using rule 27 (expression -> func_call .)
    SEMICOLON       reduce using rule 27 (expression -> func_call .)
    TO              reduce using rule 27 (expression -> func_call .)
    DOWNTO          reduce using rule 27 (expression -> func_call .)
    ELSE            reduce using rule 27 (expression -> func_call .)

  ! RANGE           [ reduce using rule 49 (type -> func_call .) ]
  ! EQ              [ reduce using rule 49 (type -> func_call .) ]
  ! NEQ             [ reduce using rule 49 (type -> func_call .) ]
  ! LT              [ reduce using rule 49 (type -> func_call .) ]
  ! GT              [ reduce using rule 49 (type -> func_call .) ]
  ! LTE             [ reduce using rule 49 (type -> func_call .) ]
  ! GTE             [ reduce using rule 49 (type -> func_call .) ]
  ! AND             [ reduce using rule 49 (type -> func_call .) ]
  ! OR              [ reduce using rule 49 (type -> func_call .) ]
  ! NOT             [ reduce using rule 49 (type -> func_call .) ]
  ! PLUS            [ reduce using rule 49 (type -> func_call .) ]
  ! MINUS           [ reduce using rule 49 (type -> func_call .) ]
  ! TIMES           [ reduce using rule 49 (type -> func_call .) ]
  ! DIVISION        [ reduce using rule 49 (type -> func_call .) ]
  ! DIV             [ reduce using rule 49 (type -> func_call .) ]
  ! MOD             [ reduce using rule 49 (type -> func_call .) ]
  ! THEN            [ reduce using rule 49 (type -> func_call .) ]
  ! DO              [ reduce using rule 49 (type -> func_call .) ]
  ! RPAREN          [ reduce using rule 49 (type -> func_call .) ]
  ! SEMICOLON       [ reduce using rule 49 (type -> func_call .) ]
  ! TO              [ reduce using rule 49 (type -> func_call .) ]
  ! DOWNTO          [ reduce using rule 49 (type -> func_call .) ]
  ! ELSE            [ reduce using rule 49 (type -> func_call .) ]


state 51

    (43) type -> integer .

    RANGE           reduce using rule 43 (type -> integer .)
    EQ              reduce using rule 43 (type -> integer .)
    NEQ             reduce using rule 43 (type -> integer .)
    LT              reduce using rule 43 (type -> integer .)
    GT              reduce using rule 43 (type -> integer .)
    LTE             reduce using rule 43 (type -> integer .)
    GTE             reduce using rule 43 (type -> integer .)
    AND             reduce using rule 43 (type -> integer .)
    OR              reduce using rule 43 (type -> integer .)
    NOT             reduce using rule 43 (type -> integer .)
    PLUS            reduce using rule 43 (type -> integer .)
    MINUS           reduce using rule 43 (type -> integer .)
    TIMES           reduce using rule 43 (type -> integer .)
    DIVISION        reduce using rule 43 (type -> integer .)
    DIV             reduce using rule 43 (type -> integer .)
    MOD             reduce using rule 43 (type -> integer .)
    THEN            reduce using rule 43 (type -> integer .)
    DO              reduce using rule 43 (type -> integer .)
    COMMA           reduce using rule 43 (type -> integer .)
    RPAREN          reduce using rule 43 (type -> integer .)
    SEMICOLON       reduce using rule 43 (type -> integer .)
    TO              reduce using rule 43 (type -> integer .)
    DOWNTO          reduce using rule 43 (type -> integer .)
    ELSE            reduce using rule 43 (type -> integer .)
    RBRACKET        reduce using rule 43 (type -> integer .)


state 52

    (44) type -> real .

    RANGE           reduce using rule 44 (type -> real .)
    EQ              reduce using rule 44 (type -> real .)
    NEQ             reduce using rule 44 (type -> real .)
    LT              reduce using rule 44 (type -> real .)
    GT              reduce using rule 44 (type -> real .)
    LTE             reduce using rule 44 (type -> real .)
    GTE             reduce using rule 44 (type -> real .)
    AND             reduce using rule 44 (type -> real .)
    OR              reduce using rule 44 (type -> real .)
    NOT             reduce using rule 44 (type -> real .)
    PLUS            reduce using rule 44 (type -> real .)
    MINUS           reduce using rule 44 (type -> real .)
    TIMES           reduce using rule 44 (type -> real .)
    DIVISION        reduce using rule 44 (type -> real .)
    DIV             reduce using rule 44 (type -> real .)
    MOD             reduce using rule 44 (type -> real .)
    THEN            reduce using rule 44 (type -> real .)
    DO              reduce using rule 44 (type -> real .)
    COMMA           reduce using rule 44 (type -> real .)
    RPAREN          reduce using rule 44 (type -> real .)
    SEMICOLON       reduce using rule 44 (type -> real .)
    TO              reduce using rule 44 (type -> real .)
    DOWNTO          reduce using rule 44 (type -> real .)
    ELSE            reduce using rule 44 (type -> real .)
    RBRACKET        reduce using rule 44 (type -> real .)


state 53

    (45) type -> string .

    RANGE           reduce using rule 45 (type -> string .)
    EQ              reduce using rule 45 (type -> string .)
    NEQ             reduce using rule 45 (type -> string .)
    LT              reduce using rule 45 (type -> string .)
    GT              reduce using rule 45 (type -> string .)
    LTE             reduce using rule 45 (type -> string .)
    GTE             reduce using rule 45 (type -> string .)
    AND             reduce using rule 45 (type -> string .)
    OR              reduce using rule 45 (type -> string .)
    NOT             reduce using rule 45 (type -> string .)
    PLUS            reduce using rule 45 (type -> string .)
    MINUS           reduce using rule 45 (type -> string .)
    TIMES           reduce using rule 45 (type -> string .)
    DIVISION        reduce using rule 45 (type -> string .)
    DIV             reduce using rule 45 (type -> string .)
    MOD             reduce using rule 45 (type -> string .)
    THEN            reduce using rule 45 (type -> string .)
    DO              reduce using rule 45 (type -> string .)
    COMMA           reduce using rule 45 (type -> string .)
    RPAREN          reduce using rule 45 (type -> string .)
    SEMICOLON       reduce using rule 45 (type -> string .)
    TO              reduce using rule 45 (type -> string .)
    DOWNTO          reduce using rule 45 (type -> string .)
    ELSE            reduce using rule 45 (type -> string .)
    RBRACKET        reduce using rule 45 (type -> string .)


state 54

    (46) type -> char .

    RANGE           reduce using rule 46 (type -> char .)
    EQ              reduce using rule 46 (type -> char .)
    NEQ             reduce using rule 46 (type -> char .)
    LT              reduce using rule 46 (type -> char .)
    GT              reduce using rule 46 (type -> char .)
    LTE             reduce using rule 46 (type -> char .)
    GTE             reduce using rule 46 (type -> char .)
    AND             reduce using rule 46 (type -> char .)
    OR              reduce using rule 46 (type -> char .)
    NOT             reduce using rule 46 (type -> char .)
    PLUS            reduce using rule 46 (type -> char .)
    MINUS           reduce using rule 46 (type -> char .)
    TIMES           reduce using rule 46 (type -> char .)
    DIVISION        reduce using rule 46 (type -> char .)
    DIV             reduce using rule 46 (type -> char .)
    MOD             reduce using rule 46 (type -> char .)
    THEN            reduce using rule 46 (type -> char .)
    DO              reduce using rule 46 (type -> char .)
    COMMA           reduce using rule 46 (type -> char .)
    RPAREN          reduce using rule 46 (type -> char .)
    SEMICOLON       reduce using rule 46 (type -> char .)
    TO              reduce using rule 46 (type -> char .)
    DOWNTO          reduce using rule 46 (type -> char .)
    ELSE            reduce using rule 46 (type -> char .)
    RBRACKET        reduce using rule 46 (type -> char .)


state 55

    (47) type -> boolean .

    RANGE           reduce using rule 47 (type -> boolean .)
    EQ              reduce using rule 47 (type -> boolean .)
    NEQ             reduce using rule 47 (type -> boolean .)
    LT              reduce using rule 47 (type -> boolean .)
    GT              reduce using rule 47 (type -> boolean .)
    LTE             reduce using rule 47 (type -> boolean .)
    GTE             reduce using rule 47 (type -> boolean .)
    AND             reduce using rule 47 (type -> boolean .)
    OR              reduce using rule 47 (type -> boolean .)
    NOT             reduce using rule 47 (type -> boolean .)
    PLUS            reduce using rule 47 (type -> boolean .)
    MINUS           reduce using rule 47 (type -> boolean .)
    TIMES           reduce using rule 47 (type -> boolean .)
    DIVISION        reduce using rule 47 (type -> boolean .)
    DIV             reduce using rule 47 (type -> boolean .)
    MOD             reduce using rule 47 (type -> boolean .)
    THEN            reduce using rule 47 (type -> boolean .)
    DO              reduce using rule 47 (type -> boolean .)
    COMMA           reduce using rule 47 (type -> boolean .)
    RPAREN          reduce using rule 47 (type -> boolean .)
    SEMICOLON       reduce using rule 47 (type -> boolean .)
    TO              reduce using rule 47 (type -> boolean .)
    DOWNTO          reduce using rule 47 (type -> boolean .)
    ELSE            reduce using rule 47 (type -> boolean .)
    RBRACKET        reduce using rule 47 (type -> boolean .)


state 56

    (48) type -> identifier .

    RANGE           reduce using rule 48 (type -> identifier .)
    EQ              reduce using rule 48 (type -> identifier .)
    NEQ             reduce using rule 48 (type -> identifier .)
    LT              reduce using rule 48 (type -> identifier .)
    GT              reduce using rule 48 (type -> identifier .)
    LTE             reduce using rule 48 (type -> identifier .)
    GTE             reduce using rule 48 (type -> identifier .)
    AND             reduce using rule 48 (type -> identifier .)
    OR              reduce using rule 48 (type -> identifier .)
    NOT             reduce using rule 48 (type -> identifier .)
    PLUS            reduce using rule 48 (type -> identifier .)
    MINUS           reduce using rule 48 (type -> identifier .)
    TIMES           reduce using rule 48 (type -> identifier .)
    DIVISION        reduce using rule 48 (type -> identifier .)
    DIV             reduce using rule 48 (type -> identifier .)
    MOD             reduce using rule 48 (type -> identifier .)
    THEN            reduce using rule 48 (type -> identifier .)
    DO              reduce using rule 48 (type -> identifier .)
    COMMA           reduce using rule 48 (type -> identifier .)
    RPAREN          reduce using rule 48 (type -> identifier .)
    SEMICOLON       reduce using rule 48 (type -> identifier .)
    TO              reduce using rule 48 (type -> identifier .)
    DOWNTO          reduce using rule 48 (type -> identifier .)
    ELSE            reduce using rule 48 (type -> identifier .)
    RBRACKET        reduce using rule 48 (type -> identifier .)


state 57

    (29) expression_paren -> LPAREN . expression RPAREN
    (24) expression -> . type operation type
    (25) expression -> . expression_paren
    (26) expression -> . expression operation expression
    (27) expression -> . func_call
    (28) expression -> . condition
    (43) type -> . integer
    (44) type -> . real
    (45) type -> . string
    (46) type -> . char
    (47) type -> . boolean
    (48) type -> . identifier
    (49) type -> . func_call
    (29) expression_paren -> . LPAREN expression RPAREN
    (87) func_call -> . IDENTIFIER LPAREN arg_list RPAREN
    (98) condition -> . expression comparator expression
    (99) condition -> . type comparator expression
    (100) condition -> . type comparator type
    (101) condition -> . expression comparator type
    (102) condition -> . type
    (50) integer -> . INTEGER
    (51) real -> . REAL
    (52) string -> . STRING
    (53) char -> . CHAR
    (54) boolean -> . BOOLEAN
    (55) identifier -> . IDENTIFIER

    LPAREN          shift and go to state 57
    IDENTIFIER      shift and go to state 58
    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63

    expression                     shift and go to state 126
    type                           shift and go to state 127
    expression_paren               shift and go to state 49
    func_call                      shift and go to state 50
    condition                      shift and go to state 89
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56

state 58

    (87) func_call -> IDENTIFIER . LPAREN arg_list RPAREN
    (55) identifier -> IDENTIFIER .

    LPAREN          shift and go to state 128
    RANGE           reduce using rule 55 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 55 (identifier -> IDENTIFIER .)
    NEQ             reduce using rule 55 (identifier -> IDENTIFIER .)
    LT              reduce using rule 55 (identifier -> IDENTIFIER .)
    GT              reduce using rule 55 (identifier -> IDENTIFIER .)
    LTE             reduce using rule 55 (identifier -> IDENTIFIER .)
    GTE             reduce using rule 55 (identifier -> IDENTIFIER .)
    AND             reduce using rule 55 (identifier -> IDENTIFIER .)
    OR              reduce using rule 55 (identifier -> IDENTIFIER .)
    NOT             reduce using rule 55 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 55 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 55 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 55 (identifier -> IDENTIFIER .)
    DIVISION        reduce using rule 55 (identifier -> IDENTIFIER .)
    DIV             reduce using rule 55 (identifier -> IDENTIFIER .)
    MOD             reduce using rule 55 (identifier -> IDENTIFIER .)
    THEN            reduce using rule 55 (identifier -> IDENTIFIER .)
    DO              reduce using rule 55 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 55 (identifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 55 (identifier -> IDENTIFIER .)
    TO              reduce using rule 55 (identifier -> IDENTIFIER .)
    DOWNTO          reduce using rule 55 (identifier -> IDENTIFIER .)
    ELSE            reduce using rule 55 (identifier -> IDENTIFIER .)


state 59

    (50) integer -> INTEGER .

    RANGE           reduce using rule 50 (integer -> INTEGER .)
    EQ              reduce using rule 50 (integer -> INTEGER .)
    NEQ             reduce using rule 50 (integer -> INTEGER .)
    LT              reduce using rule 50 (integer -> INTEGER .)
    GT              reduce using rule 50 (integer -> INTEGER .)
    LTE             reduce using rule 50 (integer -> INTEGER .)
    GTE             reduce using rule 50 (integer -> INTEGER .)
    AND             reduce using rule 50 (integer -> INTEGER .)
    OR              reduce using rule 50 (integer -> INTEGER .)
    NOT             reduce using rule 50 (integer -> INTEGER .)
    PLUS            reduce using rule 50 (integer -> INTEGER .)
    MINUS           reduce using rule 50 (integer -> INTEGER .)
    TIMES           reduce using rule 50 (integer -> INTEGER .)
    DIVISION        reduce using rule 50 (integer -> INTEGER .)
    DIV             reduce using rule 50 (integer -> INTEGER .)
    MOD             reduce using rule 50 (integer -> INTEGER .)
    THEN            reduce using rule 50 (integer -> INTEGER .)
    DO              reduce using rule 50 (integer -> INTEGER .)
    COMMA           reduce using rule 50 (integer -> INTEGER .)
    RPAREN          reduce using rule 50 (integer -> INTEGER .)
    SEMICOLON       reduce using rule 50 (integer -> INTEGER .)
    TO              reduce using rule 50 (integer -> INTEGER .)
    DOWNTO          reduce using rule 50 (integer -> INTEGER .)
    ELSE            reduce using rule 50 (integer -> INTEGER .)
    RBRACKET        reduce using rule 50 (integer -> INTEGER .)


state 60

    (51) real -> REAL .

    RANGE           reduce using rule 51 (real -> REAL .)
    EQ              reduce using rule 51 (real -> REAL .)
    NEQ             reduce using rule 51 (real -> REAL .)
    LT              reduce using rule 51 (real -> REAL .)
    GT              reduce using rule 51 (real -> REAL .)
    LTE             reduce using rule 51 (real -> REAL .)
    GTE             reduce using rule 51 (real -> REAL .)
    AND             reduce using rule 51 (real -> REAL .)
    OR              reduce using rule 51 (real -> REAL .)
    NOT             reduce using rule 51 (real -> REAL .)
    PLUS            reduce using rule 51 (real -> REAL .)
    MINUS           reduce using rule 51 (real -> REAL .)
    TIMES           reduce using rule 51 (real -> REAL .)
    DIVISION        reduce using rule 51 (real -> REAL .)
    DIV             reduce using rule 51 (real -> REAL .)
    MOD             reduce using rule 51 (real -> REAL .)
    THEN            reduce using rule 51 (real -> REAL .)
    DO              reduce using rule 51 (real -> REAL .)
    COMMA           reduce using rule 51 (real -> REAL .)
    RPAREN          reduce using rule 51 (real -> REAL .)
    SEMICOLON       reduce using rule 51 (real -> REAL .)
    TO              reduce using rule 51 (real -> REAL .)
    DOWNTO          reduce using rule 51 (real -> REAL .)
    ELSE            reduce using rule 51 (real -> REAL .)
    RBRACKET        reduce using rule 51 (real -> REAL .)


state 61

    (52) string -> STRING .

    RANGE           reduce using rule 52 (string -> STRING .)
    EQ              reduce using rule 52 (string -> STRING .)
    NEQ             reduce using rule 52 (string -> STRING .)
    LT              reduce using rule 52 (string -> STRING .)
    GT              reduce using rule 52 (string -> STRING .)
    LTE             reduce using rule 52 (string -> STRING .)
    GTE             reduce using rule 52 (string -> STRING .)
    AND             reduce using rule 52 (string -> STRING .)
    OR              reduce using rule 52 (string -> STRING .)
    NOT             reduce using rule 52 (string -> STRING .)
    PLUS            reduce using rule 52 (string -> STRING .)
    MINUS           reduce using rule 52 (string -> STRING .)
    TIMES           reduce using rule 52 (string -> STRING .)
    DIVISION        reduce using rule 52 (string -> STRING .)
    DIV             reduce using rule 52 (string -> STRING .)
    MOD             reduce using rule 52 (string -> STRING .)
    THEN            reduce using rule 52 (string -> STRING .)
    DO              reduce using rule 52 (string -> STRING .)
    COMMA           reduce using rule 52 (string -> STRING .)
    RPAREN          reduce using rule 52 (string -> STRING .)
    SEMICOLON       reduce using rule 52 (string -> STRING .)
    TO              reduce using rule 52 (string -> STRING .)
    DOWNTO          reduce using rule 52 (string -> STRING .)
    ELSE            reduce using rule 52 (string -> STRING .)
    RBRACKET        reduce using rule 52 (string -> STRING .)


state 62

    (53) char -> CHAR .

    RANGE           reduce using rule 53 (char -> CHAR .)
    EQ              reduce using rule 53 (char -> CHAR .)
    NEQ             reduce using rule 53 (char -> CHAR .)
    LT              reduce using rule 53 (char -> CHAR .)
    GT              reduce using rule 53 (char -> CHAR .)
    LTE             reduce using rule 53 (char -> CHAR .)
    GTE             reduce using rule 53 (char -> CHAR .)
    AND             reduce using rule 53 (char -> CHAR .)
    OR              reduce using rule 53 (char -> CHAR .)
    NOT             reduce using rule 53 (char -> CHAR .)
    PLUS            reduce using rule 53 (char -> CHAR .)
    MINUS           reduce using rule 53 (char -> CHAR .)
    TIMES           reduce using rule 53 (char -> CHAR .)
    DIVISION        reduce using rule 53 (char -> CHAR .)
    DIV             reduce using rule 53 (char -> CHAR .)
    MOD             reduce using rule 53 (char -> CHAR .)
    THEN            reduce using rule 53 (char -> CHAR .)
    DO              reduce using rule 53 (char -> CHAR .)
    COMMA           reduce using rule 53 (char -> CHAR .)
    RPAREN          reduce using rule 53 (char -> CHAR .)
    SEMICOLON       reduce using rule 53 (char -> CHAR .)
    TO              reduce using rule 53 (char -> CHAR .)
    DOWNTO          reduce using rule 53 (char -> CHAR .)
    ELSE            reduce using rule 53 (char -> CHAR .)
    RBRACKET        reduce using rule 53 (char -> CHAR .)


state 63

    (54) boolean -> BOOLEAN .

    RANGE           reduce using rule 54 (boolean -> BOOLEAN .)
    EQ              reduce using rule 54 (boolean -> BOOLEAN .)
    NEQ             reduce using rule 54 (boolean -> BOOLEAN .)
    LT              reduce using rule 54 (boolean -> BOOLEAN .)
    GT              reduce using rule 54 (boolean -> BOOLEAN .)
    LTE             reduce using rule 54 (boolean -> BOOLEAN .)
    GTE             reduce using rule 54 (boolean -> BOOLEAN .)
    AND             reduce using rule 54 (boolean -> BOOLEAN .)
    OR              reduce using rule 54 (boolean -> BOOLEAN .)
    NOT             reduce using rule 54 (boolean -> BOOLEAN .)
    PLUS            reduce using rule 54 (boolean -> BOOLEAN .)
    MINUS           reduce using rule 54 (boolean -> BOOLEAN .)
    TIMES           reduce using rule 54 (boolean -> BOOLEAN .)
    DIVISION        reduce using rule 54 (boolean -> BOOLEAN .)
    DIV             reduce using rule 54 (boolean -> BOOLEAN .)
    MOD             reduce using rule 54 (boolean -> BOOLEAN .)
    THEN            reduce using rule 54 (boolean -> BOOLEAN .)
    DO              reduce using rule 54 (boolean -> BOOLEAN .)
    COMMA           reduce using rule 54 (boolean -> BOOLEAN .)
    RPAREN          reduce using rule 54 (boolean -> BOOLEAN .)
    SEMICOLON       reduce using rule 54 (boolean -> BOOLEAN .)
    TO              reduce using rule 54 (boolean -> BOOLEAN .)
    DOWNTO          reduce using rule 54 (boolean -> BOOLEAN .)
    ELSE            reduce using rule 54 (boolean -> BOOLEAN .)
    RBRACKET        reduce using rule 54 (boolean -> BOOLEAN .)


state 64

    (110) while_loop -> WHILE condition . DO statement
    (111) while_loop -> WHILE condition . DO if_body
    (28) expression -> condition .

    DO              shift and go to state 129
    RANGE           reduce using rule 28 (expression -> condition .)
    EQ              reduce using rule 28 (expression -> condition .)
    NEQ             reduce using rule 28 (expression -> condition .)
    LT              reduce using rule 28 (expression -> condition .)
    GT              reduce using rule 28 (expression -> condition .)
    LTE             reduce using rule 28 (expression -> condition .)
    GTE             reduce using rule 28 (expression -> condition .)
    AND             reduce using rule 28 (expression -> condition .)
    OR              reduce using rule 28 (expression -> condition .)
    NOT             reduce using rule 28 (expression -> condition .)
    PLUS            reduce using rule 28 (expression -> condition .)
    MINUS           reduce using rule 28 (expression -> condition .)
    TIMES           reduce using rule 28 (expression -> condition .)
    DIVISION        reduce using rule 28 (expression -> condition .)
    DIV             reduce using rule 28 (expression -> condition .)
    MOD             reduce using rule 28 (expression -> condition .)


state 65

    (106) for_loop -> FOR assignment . to type DO statement
    (107) for_loop -> FOR assignment . to type DO if_body
    (108) for_loop -> FOR assignment . downto type DO statement
    (109) for_loop -> FOR assignment . downto type DO if_body
    (104) to -> . TO
    (105) downto -> . DOWNTO

    TO              shift and go to state 132
    DOWNTO          shift and go to state 133

    to                             shift and go to state 130
    downto                         shift and go to state 131

state 66

    (22) assignment -> IDENTIFIER . ASSIGNMENT type
    (23) assignment -> IDENTIFIER . ASSIGNMENT expression

    ASSIGNMENT      shift and go to state 45


state 67

    (112) readln -> READLN LPAREN . type RPAREN
    (43) type -> . integer
    (44) type -> . real
    (45) type -> . string
    (46) type -> . char
    (47) type -> . boolean
    (48) type -> . identifier
    (49) type -> . func_call
    (50) integer -> . INTEGER
    (51) real -> . REAL
    (52) string -> . STRING
    (53) char -> . CHAR
    (54) boolean -> . BOOLEAN
    (55) identifier -> . IDENTIFIER
    (87) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 85

    type                           shift and go to state 134
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 84

state 68

    (80) function -> func_header SEMICOLON func_body . SEMICOLON

    SEMICOLON       shift and go to state 135


state 69

    (86) func_body -> BEGIN . statements END
    (13) statements -> . statement SEMICOLON statements
    (14) statements -> . statement SEMICOLON
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (113) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (93) procedure_call -> . IDENTIFIER
    (94) cond_if -> . IF condition THEN statement
    (95) cond_if -> . IF condition THEN statement ELSE statement
    (96) cond_if -> . IF condition THEN if_body
    (97) cond_if -> . IF condition THEN if_body ELSE if_body
    (110) while_loop -> . WHILE condition DO statement
    (111) while_loop -> . WHILE condition DO if_body
    (106) for_loop -> . FOR assignment to type DO statement
    (107) for_loop -> . FOR assignment to type DO if_body
    (108) for_loop -> . FOR assignment downto type DO statement
    (109) for_loop -> . FOR assignment downto type DO if_body
    (112) readln -> . READLN LPAREN type RPAREN

    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    statements                     shift and go to state 136
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 70

    (91) procedure -> PROCEDURE IDENTIFIER SEMICOLON . procedure_body SEMICOLON
    (92) procedure_body -> . BEGIN statements END

    BEGIN           shift and go to state 138

    procedure_body                 shift and go to state 137

state 71

    (81) func_header -> FUNCTION IDENTIFIER LPAREN . func_args RPAREN COLON type_name
    (82) func_header -> FUNCTION IDENTIFIER LPAREN . RPAREN COLON type_name
    (83) func_args -> . func_arg COMMA func_args
    (84) func_args -> . func_arg
    (85) func_arg -> . IDENTIFIER COLON type_name

    RPAREN          shift and go to state 141
    IDENTIFIER      shift and go to state 139

    func_args                      shift and go to state 140
    func_arg                       shift and go to state 142

state 72

    (7) variable_declaration -> identifier_list COLON type_name . SEMICOLON variable_declaration
    (8) variable_declaration -> identifier_list COLON type_name . SEMICOLON

    SEMICOLON       shift and go to state 143


state 73

    (37) type_name -> NINTEGER .

    SEMICOLON       reduce using rule 37 (type_name -> NINTEGER .)
    COMMA           reduce using rule 37 (type_name -> NINTEGER .)
    RPAREN          reduce using rule 37 (type_name -> NINTEGER .)


state 74

    (38) type_name -> NREAL .

    SEMICOLON       reduce using rule 38 (type_name -> NREAL .)
    COMMA           reduce using rule 38 (type_name -> NREAL .)
    RPAREN          reduce using rule 38 (type_name -> NREAL .)


state 75

    (39) type_name -> NSTRING .

    SEMICOLON       reduce using rule 39 (type_name -> NSTRING .)
    COMMA           reduce using rule 39 (type_name -> NSTRING .)
    RPAREN          reduce using rule 39 (type_name -> NSTRING .)


state 76

    (40) type_name -> NCHAR .

    SEMICOLON       reduce using rule 40 (type_name -> NCHAR .)
    COMMA           reduce using rule 40 (type_name -> NCHAR .)
    RPAREN          reduce using rule 40 (type_name -> NCHAR .)


state 77

    (41) type_name -> NBOOLEAN .

    SEMICOLON       reduce using rule 41 (type_name -> NBOOLEAN .)
    COMMA           reduce using rule 41 (type_name -> NBOOLEAN .)
    RPAREN          reduce using rule 41 (type_name -> NBOOLEAN .)


state 78

    (42) type_name -> array_type .

    SEMICOLON       reduce using rule 42 (type_name -> array_type .)
    COMMA           reduce using rule 42 (type_name -> array_type .)
    RPAREN          reduce using rule 42 (type_name -> array_type .)


state 79

    (11) array_type -> ARRAY . LBRACKET type RANGE type RBRACKET OF type_name

    LBRACKET        shift and go to state 144


state 80

    (9) identifier_list -> IDENTIFIER COMMA identifier_list .

    COLON           reduce using rule 9 (identifier_list -> IDENTIFIER COMMA identifier_list .)


state 81

    (13) statements -> statement SEMICOLON statements .

    END             reduce using rule 13 (statements -> statement SEMICOLON statements .)


state 82

    (113) writeln -> WRITELN LPAREN writeln_args . RPAREN

    RPAREN          shift and go to state 145


state 83

    (114) writeln_args -> type . COMMA writeln_args
    (115) writeln_args -> type .

    COMMA           shift and go to state 146
    RPAREN          reduce using rule 115 (writeln_args -> type .)


state 84

    (49) type -> func_call .

    COMMA           reduce using rule 49 (type -> func_call .)
    RPAREN          reduce using rule 49 (type -> func_call .)
    RANGE           reduce using rule 49 (type -> func_call .)
    EQ              reduce using rule 49 (type -> func_call .)
    NEQ             reduce using rule 49 (type -> func_call .)
    LT              reduce using rule 49 (type -> func_call .)
    GT              reduce using rule 49 (type -> func_call .)
    LTE             reduce using rule 49 (type -> func_call .)
    GTE             reduce using rule 49 (type -> func_call .)
    AND             reduce using rule 49 (type -> func_call .)
    OR              reduce using rule 49 (type -> func_call .)
    NOT             reduce using rule 49 (type -> func_call .)
    PLUS            reduce using rule 49 (type -> func_call .)
    MINUS           reduce using rule 49 (type -> func_call .)
    TIMES           reduce using rule 49 (type -> func_call .)
    DIVISION        reduce using rule 49 (type -> func_call .)
    DIV             reduce using rule 49 (type -> func_call .)
    MOD             reduce using rule 49 (type -> func_call .)
    SEMICOLON       reduce using rule 49 (type -> func_call .)
    TO              reduce using rule 49 (type -> func_call .)
    DOWNTO          reduce using rule 49 (type -> func_call .)
    ELSE            reduce using rule 49 (type -> func_call .)
    THEN            reduce using rule 49 (type -> func_call .)
    DO              reduce using rule 49 (type -> func_call .)
    RBRACKET        reduce using rule 49 (type -> func_call .)


state 85

    (55) identifier -> IDENTIFIER .
    (87) func_call -> IDENTIFIER . LPAREN arg_list RPAREN

    COMMA           reduce using rule 55 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 55 (identifier -> IDENTIFIER .)
    RANGE           reduce using rule 55 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 55 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 55 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 55 (identifier -> IDENTIFIER .)
    DIVISION        reduce using rule 55 (identifier -> IDENTIFIER .)
    DIV             reduce using rule 55 (identifier -> IDENTIFIER .)
    MOD             reduce using rule 55 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 55 (identifier -> IDENTIFIER .)
    NEQ             reduce using rule 55 (identifier -> IDENTIFIER .)
    LT              reduce using rule 55 (identifier -> IDENTIFIER .)
    GT              reduce using rule 55 (identifier -> IDENTIFIER .)
    LTE             reduce using rule 55 (identifier -> IDENTIFIER .)
    GTE             reduce using rule 55 (identifier -> IDENTIFIER .)
    AND             reduce using rule 55 (identifier -> IDENTIFIER .)
    OR              reduce using rule 55 (identifier -> IDENTIFIER .)
    NOT             reduce using rule 55 (identifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 55 (identifier -> IDENTIFIER .)
    TO              reduce using rule 55 (identifier -> IDENTIFIER .)
    DOWNTO          reduce using rule 55 (identifier -> IDENTIFIER .)
    ELSE            reduce using rule 55 (identifier -> IDENTIFIER .)
    THEN            reduce using rule 55 (identifier -> IDENTIFIER .)
    DO              reduce using rule 55 (identifier -> IDENTIFIER .)
    RBRACKET        reduce using rule 55 (identifier -> IDENTIFIER .)
    LPAREN          shift and go to state 128


state 86

    (22) assignment -> IDENTIFIER ASSIGNMENT type .
    (24) expression -> type . operation type
    (99) condition -> type . comparator expression
    (100) condition -> type . comparator type
    (102) condition -> type .
    (30) operation -> . plus
    (31) operation -> . minus
    (32) operation -> . times
    (33) operation -> . division
    (34) operation -> . div
    (35) operation -> . mod
    (36) operation -> . RANGE
    (62) comparator -> . eq
    (63) comparator -> . neq
    (64) comparator -> . lt
    (65) comparator -> . gt
    (66) comparator -> . lte
    (67) comparator -> . gte
    (68) comparator -> . and
    (69) comparator -> . or
    (70) comparator -> . not
    (56) plus -> . PLUS
    (57) minus -> . MINUS
    (58) times -> . TIMES
    (59) division -> . DIVISION
    (60) div -> . DIV
    (61) mod -> . MOD
    (71) eq -> . EQ
    (72) neq -> . NEQ
    (73) lt -> . LT
    (74) gt -> . GT
    (75) lte -> . LTE
    (76) gte -> . GTE
    (77) and -> . AND
    (78) or -> . OR
    (79) not -> . NOT

  ! reduce/reduce conflict for SEMICOLON resolved using rule 22 (assignment -> IDENTIFIER ASSIGNMENT type .)
  ! reduce/reduce conflict for TO resolved using rule 22 (assignment -> IDENTIFIER ASSIGNMENT type .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 22 (assignment -> IDENTIFIER ASSIGNMENT type .)
  ! reduce/reduce conflict for ELSE resolved using rule 22 (assignment -> IDENTIFIER ASSIGNMENT type .)
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    SEMICOLON       reduce using rule 22 (assignment -> IDENTIFIER ASSIGNMENT type .)
    TO              reduce using rule 22 (assignment -> IDENTIFIER ASSIGNMENT type .)
    DOWNTO          reduce using rule 22 (assignment -> IDENTIFIER ASSIGNMENT type .)
    ELSE            reduce using rule 22 (assignment -> IDENTIFIER ASSIGNMENT type .)
    RANGE           shift and go to state 108
    PLUS            shift and go to state 118
    MINUS           shift and go to state 119
    TIMES           shift and go to state 120
    DIVISION        shift and go to state 121
    DIV             shift and go to state 122
    MOD             shift and go to state 123
    EQ              shift and go to state 109
    NEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LTE             shift and go to state 113
    GTE             shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    NOT             shift and go to state 117

  ! RANGE           [ reduce using rule 102 (condition -> type .) ]
  ! PLUS            [ reduce using rule 102 (condition -> type .) ]
  ! MINUS           [ reduce using rule 102 (condition -> type .) ]
  ! TIMES           [ reduce using rule 102 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 102 (condition -> type .) ]
  ! DIV             [ reduce using rule 102 (condition -> type .) ]
  ! MOD             [ reduce using rule 102 (condition -> type .) ]
  ! EQ              [ reduce using rule 102 (condition -> type .) ]
  ! NEQ             [ reduce using rule 102 (condition -> type .) ]
  ! LT              [ reduce using rule 102 (condition -> type .) ]
  ! GT              [ reduce using rule 102 (condition -> type .) ]
  ! LTE             [ reduce using rule 102 (condition -> type .) ]
  ! GTE             [ reduce using rule 102 (condition -> type .) ]
  ! AND             [ reduce using rule 102 (condition -> type .) ]
  ! OR              [ reduce using rule 102 (condition -> type .) ]
  ! NOT             [ reduce using rule 102 (condition -> type .) ]
  ! SEMICOLON       [ reduce using rule 102 (condition -> type .) ]
  ! TO              [ reduce using rule 102 (condition -> type .) ]
  ! DOWNTO          [ reduce using rule 102 (condition -> type .) ]
  ! ELSE            [ reduce using rule 102 (condition -> type .) ]

    operation                      shift and go to state 125
    comparator                     shift and go to state 124
    plus                           shift and go to state 102
    minus                          shift and go to state 103
    times                          shift and go to state 104
    division                       shift and go to state 105
    div                            shift and go to state 106
    mod                            shift and go to state 107
    eq                             shift and go to state 93
    neq                            shift and go to state 94
    lt                             shift and go to state 95
    gt                             shift and go to state 96
    lte                            shift and go to state 97
    gte                            shift and go to state 98
    and                            shift and go to state 99
    or                             shift and go to state 100
    not                            shift and go to state 101

state 87

    (23) assignment -> IDENTIFIER ASSIGNMENT expression .
    (26) expression -> expression . operation expression
    (98) condition -> expression . comparator expression
    (101) condition -> expression . comparator type
    (30) operation -> . plus
    (31) operation -> . minus
    (32) operation -> . times
    (33) operation -> . division
    (34) operation -> . div
    (35) operation -> . mod
    (36) operation -> . RANGE
    (62) comparator -> . eq
    (63) comparator -> . neq
    (64) comparator -> . lt
    (65) comparator -> . gt
    (66) comparator -> . lte
    (67) comparator -> . gte
    (68) comparator -> . and
    (69) comparator -> . or
    (70) comparator -> . not
    (56) plus -> . PLUS
    (57) minus -> . MINUS
    (58) times -> . TIMES
    (59) division -> . DIVISION
    (60) div -> . DIV
    (61) mod -> . MOD
    (71) eq -> . EQ
    (72) neq -> . NEQ
    (73) lt -> . LT
    (74) gt -> . GT
    (75) lte -> . LTE
    (76) gte -> . GTE
    (77) and -> . AND
    (78) or -> . OR
    (79) not -> . NOT

    SEMICOLON       reduce using rule 23 (assignment -> IDENTIFIER ASSIGNMENT expression .)
    TO              reduce using rule 23 (assignment -> IDENTIFIER ASSIGNMENT expression .)
    DOWNTO          reduce using rule 23 (assignment -> IDENTIFIER ASSIGNMENT expression .)
    ELSE            reduce using rule 23 (assignment -> IDENTIFIER ASSIGNMENT expression .)
    RANGE           shift and go to state 108
    PLUS            shift and go to state 118
    MINUS           shift and go to state 119
    TIMES           shift and go to state 120
    DIVISION        shift and go to state 121
    DIV             shift and go to state 122
    MOD             shift and go to state 123
    EQ              shift and go to state 109
    NEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LTE             shift and go to state 113
    GTE             shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    NOT             shift and go to state 117

    operation                      shift and go to state 92
    comparator                     shift and go to state 91
    plus                           shift and go to state 102
    minus                          shift and go to state 103
    times                          shift and go to state 104
    division                       shift and go to state 105
    div                            shift and go to state 106
    mod                            shift and go to state 107
    eq                             shift and go to state 93
    neq                            shift and go to state 94
    lt                             shift and go to state 95
    gt                             shift and go to state 96
    lte                            shift and go to state 97
    gte                            shift and go to state 98
    and                            shift and go to state 99
    or                             shift and go to state 100
    not                            shift and go to state 101

state 88

    (49) type -> func_call .
    (27) expression -> func_call .

  ! reduce/reduce conflict for RANGE resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for DIVISION resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for DIV resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for MOD resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for EQ resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for NEQ resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for LTE resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for GTE resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for AND resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for OR resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for NOT resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for TO resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 27 (expression -> func_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 27 (expression -> func_call .)
    RANGE           reduce using rule 27 (expression -> func_call .)
    PLUS            reduce using rule 27 (expression -> func_call .)
    MINUS           reduce using rule 27 (expression -> func_call .)
    TIMES           reduce using rule 27 (expression -> func_call .)
    DIVISION        reduce using rule 27 (expression -> func_call .)
    DIV             reduce using rule 27 (expression -> func_call .)
    MOD             reduce using rule 27 (expression -> func_call .)
    EQ              reduce using rule 27 (expression -> func_call .)
    NEQ             reduce using rule 27 (expression -> func_call .)
    LT              reduce using rule 27 (expression -> func_call .)
    GT              reduce using rule 27 (expression -> func_call .)
    LTE             reduce using rule 27 (expression -> func_call .)
    GTE             reduce using rule 27 (expression -> func_call .)
    AND             reduce using rule 27 (expression -> func_call .)
    OR              reduce using rule 27 (expression -> func_call .)
    NOT             reduce using rule 27 (expression -> func_call .)
    SEMICOLON       reduce using rule 27 (expression -> func_call .)
    TO              reduce using rule 27 (expression -> func_call .)
    DOWNTO          reduce using rule 27 (expression -> func_call .)
    ELSE            reduce using rule 27 (expression -> func_call .)

  ! RANGE           [ reduce using rule 49 (type -> func_call .) ]
  ! PLUS            [ reduce using rule 49 (type -> func_call .) ]
  ! MINUS           [ reduce using rule 49 (type -> func_call .) ]
  ! TIMES           [ reduce using rule 49 (type -> func_call .) ]
  ! DIVISION        [ reduce using rule 49 (type -> func_call .) ]
  ! DIV             [ reduce using rule 49 (type -> func_call .) ]
  ! MOD             [ reduce using rule 49 (type -> func_call .) ]
  ! EQ              [ reduce using rule 49 (type -> func_call .) ]
  ! NEQ             [ reduce using rule 49 (type -> func_call .) ]
  ! LT              [ reduce using rule 49 (type -> func_call .) ]
  ! GT              [ reduce using rule 49 (type -> func_call .) ]
  ! LTE             [ reduce using rule 49 (type -> func_call .) ]
  ! GTE             [ reduce using rule 49 (type -> func_call .) ]
  ! AND             [ reduce using rule 49 (type -> func_call .) ]
  ! OR              [ reduce using rule 49 (type -> func_call .) ]
  ! NOT             [ reduce using rule 49 (type -> func_call .) ]
  ! SEMICOLON       [ reduce using rule 49 (type -> func_call .) ]
  ! TO              [ reduce using rule 49 (type -> func_call .) ]
  ! DOWNTO          [ reduce using rule 49 (type -> func_call .) ]
  ! ELSE            [ reduce using rule 49 (type -> func_call .) ]


state 89

    (28) expression -> condition .

    RANGE           reduce using rule 28 (expression -> condition .)
    PLUS            reduce using rule 28 (expression -> condition .)
    MINUS           reduce using rule 28 (expression -> condition .)
    TIMES           reduce using rule 28 (expression -> condition .)
    DIVISION        reduce using rule 28 (expression -> condition .)
    DIV             reduce using rule 28 (expression -> condition .)
    MOD             reduce using rule 28 (expression -> condition .)
    EQ              reduce using rule 28 (expression -> condition .)
    NEQ             reduce using rule 28 (expression -> condition .)
    LT              reduce using rule 28 (expression -> condition .)
    GT              reduce using rule 28 (expression -> condition .)
    LTE             reduce using rule 28 (expression -> condition .)
    GTE             reduce using rule 28 (expression -> condition .)
    AND             reduce using rule 28 (expression -> condition .)
    OR              reduce using rule 28 (expression -> condition .)
    NOT             reduce using rule 28 (expression -> condition .)
    SEMICOLON       reduce using rule 28 (expression -> condition .)
    TO              reduce using rule 28 (expression -> condition .)
    DOWNTO          reduce using rule 28 (expression -> condition .)
    ELSE            reduce using rule 28 (expression -> condition .)
    RPAREN          reduce using rule 28 (expression -> condition .)
    THEN            reduce using rule 28 (expression -> condition .)
    DO              reduce using rule 28 (expression -> condition .)


state 90

    (94) cond_if -> IF condition THEN . statement
    (95) cond_if -> IF condition THEN . statement ELSE statement
    (96) cond_if -> IF condition THEN . if_body
    (97) cond_if -> IF condition THEN . if_body ELSE if_body
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (103) if_body -> . BEGIN statements END
    (113) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (93) procedure_call -> . IDENTIFIER
    (94) cond_if -> . IF condition THEN statement
    (95) cond_if -> . IF condition THEN statement ELSE statement
    (96) cond_if -> . IF condition THEN if_body
    (97) cond_if -> . IF condition THEN if_body ELSE if_body
    (110) while_loop -> . WHILE condition DO statement
    (111) while_loop -> . WHILE condition DO if_body
    (106) for_loop -> . FOR assignment to type DO statement
    (107) for_loop -> . FOR assignment to type DO if_body
    (108) for_loop -> . FOR assignment downto type DO statement
    (109) for_loop -> . FOR assignment downto type DO if_body
    (112) readln -> . READLN LPAREN type RPAREN

    BEGIN           shift and go to state 149
    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    statement                      shift and go to state 147
    if_body                        shift and go to state 148
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 91

    (98) condition -> expression comparator . expression
    (101) condition -> expression comparator . type
    (24) expression -> . type operation type
    (25) expression -> . expression_paren
    (26) expression -> . expression operation expression
    (27) expression -> . func_call
    (28) expression -> . condition
    (43) type -> . integer
    (44) type -> . real
    (45) type -> . string
    (46) type -> . char
    (47) type -> . boolean
    (48) type -> . identifier
    (49) type -> . func_call
    (29) expression_paren -> . LPAREN expression RPAREN
    (87) func_call -> . IDENTIFIER LPAREN arg_list RPAREN
    (98) condition -> . expression comparator expression
    (99) condition -> . type comparator expression
    (100) condition -> . type comparator type
    (101) condition -> . expression comparator type
    (102) condition -> . type
    (50) integer -> . INTEGER
    (51) real -> . REAL
    (52) string -> . STRING
    (53) char -> . CHAR
    (54) boolean -> . BOOLEAN
    (55) identifier -> . IDENTIFIER

    LPAREN          shift and go to state 57
    IDENTIFIER      shift and go to state 58
    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63

    expression                     shift and go to state 150
    type                           shift and go to state 151
    expression_paren               shift and go to state 49
    func_call                      shift and go to state 50
    condition                      shift and go to state 89
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56

state 92

    (26) expression -> expression operation . expression
    (24) expression -> . type operation type
    (25) expression -> . expression_paren
    (26) expression -> . expression operation expression
    (27) expression -> . func_call
    (28) expression -> . condition
    (43) type -> . integer
    (44) type -> . real
    (45) type -> . string
    (46) type -> . char
    (47) type -> . boolean
    (48) type -> . identifier
    (49) type -> . func_call
    (29) expression_paren -> . LPAREN expression RPAREN
    (87) func_call -> . IDENTIFIER LPAREN arg_list RPAREN
    (98) condition -> . expression comparator expression
    (99) condition -> . type comparator expression
    (100) condition -> . type comparator type
    (101) condition -> . expression comparator type
    (102) condition -> . type
    (50) integer -> . INTEGER
    (51) real -> . REAL
    (52) string -> . STRING
    (53) char -> . CHAR
    (54) boolean -> . BOOLEAN
    (55) identifier -> . IDENTIFIER

    LPAREN          shift and go to state 57
    IDENTIFIER      shift and go to state 58
    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63

    expression                     shift and go to state 152
    type                           shift and go to state 127
    expression_paren               shift and go to state 49
    func_call                      shift and go to state 50
    condition                      shift and go to state 89
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56

state 93

    (62) comparator -> eq .

    LPAREN          reduce using rule 62 (comparator -> eq .)
    IDENTIFIER      reduce using rule 62 (comparator -> eq .)
    INTEGER         reduce using rule 62 (comparator -> eq .)
    REAL            reduce using rule 62 (comparator -> eq .)
    STRING          reduce using rule 62 (comparator -> eq .)
    CHAR            reduce using rule 62 (comparator -> eq .)
    BOOLEAN         reduce using rule 62 (comparator -> eq .)


state 94

    (63) comparator -> neq .

    LPAREN          reduce using rule 63 (comparator -> neq .)
    IDENTIFIER      reduce using rule 63 (comparator -> neq .)
    INTEGER         reduce using rule 63 (comparator -> neq .)
    REAL            reduce using rule 63 (comparator -> neq .)
    STRING          reduce using rule 63 (comparator -> neq .)
    CHAR            reduce using rule 63 (comparator -> neq .)
    BOOLEAN         reduce using rule 63 (comparator -> neq .)


state 95

    (64) comparator -> lt .

    LPAREN          reduce using rule 64 (comparator -> lt .)
    IDENTIFIER      reduce using rule 64 (comparator -> lt .)
    INTEGER         reduce using rule 64 (comparator -> lt .)
    REAL            reduce using rule 64 (comparator -> lt .)
    STRING          reduce using rule 64 (comparator -> lt .)
    CHAR            reduce using rule 64 (comparator -> lt .)
    BOOLEAN         reduce using rule 64 (comparator -> lt .)


state 96

    (65) comparator -> gt .

    LPAREN          reduce using rule 65 (comparator -> gt .)
    IDENTIFIER      reduce using rule 65 (comparator -> gt .)
    INTEGER         reduce using rule 65 (comparator -> gt .)
    REAL            reduce using rule 65 (comparator -> gt .)
    STRING          reduce using rule 65 (comparator -> gt .)
    CHAR            reduce using rule 65 (comparator -> gt .)
    BOOLEAN         reduce using rule 65 (comparator -> gt .)


state 97

    (66) comparator -> lte .

    LPAREN          reduce using rule 66 (comparator -> lte .)
    IDENTIFIER      reduce using rule 66 (comparator -> lte .)
    INTEGER         reduce using rule 66 (comparator -> lte .)
    REAL            reduce using rule 66 (comparator -> lte .)
    STRING          reduce using rule 66 (comparator -> lte .)
    CHAR            reduce using rule 66 (comparator -> lte .)
    BOOLEAN         reduce using rule 66 (comparator -> lte .)


state 98

    (67) comparator -> gte .

    LPAREN          reduce using rule 67 (comparator -> gte .)
    IDENTIFIER      reduce using rule 67 (comparator -> gte .)
    INTEGER         reduce using rule 67 (comparator -> gte .)
    REAL            reduce using rule 67 (comparator -> gte .)
    STRING          reduce using rule 67 (comparator -> gte .)
    CHAR            reduce using rule 67 (comparator -> gte .)
    BOOLEAN         reduce using rule 67 (comparator -> gte .)


state 99

    (68) comparator -> and .

    LPAREN          reduce using rule 68 (comparator -> and .)
    IDENTIFIER      reduce using rule 68 (comparator -> and .)
    INTEGER         reduce using rule 68 (comparator -> and .)
    REAL            reduce using rule 68 (comparator -> and .)
    STRING          reduce using rule 68 (comparator -> and .)
    CHAR            reduce using rule 68 (comparator -> and .)
    BOOLEAN         reduce using rule 68 (comparator -> and .)


state 100

    (69) comparator -> or .

    LPAREN          reduce using rule 69 (comparator -> or .)
    IDENTIFIER      reduce using rule 69 (comparator -> or .)
    INTEGER         reduce using rule 69 (comparator -> or .)
    REAL            reduce using rule 69 (comparator -> or .)
    STRING          reduce using rule 69 (comparator -> or .)
    CHAR            reduce using rule 69 (comparator -> or .)
    BOOLEAN         reduce using rule 69 (comparator -> or .)


state 101

    (70) comparator -> not .

    LPAREN          reduce using rule 70 (comparator -> not .)
    IDENTIFIER      reduce using rule 70 (comparator -> not .)
    INTEGER         reduce using rule 70 (comparator -> not .)
    REAL            reduce using rule 70 (comparator -> not .)
    STRING          reduce using rule 70 (comparator -> not .)
    CHAR            reduce using rule 70 (comparator -> not .)
    BOOLEAN         reduce using rule 70 (comparator -> not .)


state 102

    (30) operation -> plus .

    LPAREN          reduce using rule 30 (operation -> plus .)
    IDENTIFIER      reduce using rule 30 (operation -> plus .)
    INTEGER         reduce using rule 30 (operation -> plus .)
    REAL            reduce using rule 30 (operation -> plus .)
    STRING          reduce using rule 30 (operation -> plus .)
    CHAR            reduce using rule 30 (operation -> plus .)
    BOOLEAN         reduce using rule 30 (operation -> plus .)


state 103

    (31) operation -> minus .

    LPAREN          reduce using rule 31 (operation -> minus .)
    IDENTIFIER      reduce using rule 31 (operation -> minus .)
    INTEGER         reduce using rule 31 (operation -> minus .)
    REAL            reduce using rule 31 (operation -> minus .)
    STRING          reduce using rule 31 (operation -> minus .)
    CHAR            reduce using rule 31 (operation -> minus .)
    BOOLEAN         reduce using rule 31 (operation -> minus .)


state 104

    (32) operation -> times .

    LPAREN          reduce using rule 32 (operation -> times .)
    IDENTIFIER      reduce using rule 32 (operation -> times .)
    INTEGER         reduce using rule 32 (operation -> times .)
    REAL            reduce using rule 32 (operation -> times .)
    STRING          reduce using rule 32 (operation -> times .)
    CHAR            reduce using rule 32 (operation -> times .)
    BOOLEAN         reduce using rule 32 (operation -> times .)


state 105

    (33) operation -> division .

    LPAREN          reduce using rule 33 (operation -> division .)
    IDENTIFIER      reduce using rule 33 (operation -> division .)
    INTEGER         reduce using rule 33 (operation -> division .)
    REAL            reduce using rule 33 (operation -> division .)
    STRING          reduce using rule 33 (operation -> division .)
    CHAR            reduce using rule 33 (operation -> division .)
    BOOLEAN         reduce using rule 33 (operation -> division .)


state 106

    (34) operation -> div .

    LPAREN          reduce using rule 34 (operation -> div .)
    IDENTIFIER      reduce using rule 34 (operation -> div .)
    INTEGER         reduce using rule 34 (operation -> div .)
    REAL            reduce using rule 34 (operation -> div .)
    STRING          reduce using rule 34 (operation -> div .)
    CHAR            reduce using rule 34 (operation -> div .)
    BOOLEAN         reduce using rule 34 (operation -> div .)


state 107

    (35) operation -> mod .

    LPAREN          reduce using rule 35 (operation -> mod .)
    IDENTIFIER      reduce using rule 35 (operation -> mod .)
    INTEGER         reduce using rule 35 (operation -> mod .)
    REAL            reduce using rule 35 (operation -> mod .)
    STRING          reduce using rule 35 (operation -> mod .)
    CHAR            reduce using rule 35 (operation -> mod .)
    BOOLEAN         reduce using rule 35 (operation -> mod .)


state 108

    (36) operation -> RANGE .

    LPAREN          reduce using rule 36 (operation -> RANGE .)
    IDENTIFIER      reduce using rule 36 (operation -> RANGE .)
    INTEGER         reduce using rule 36 (operation -> RANGE .)
    REAL            reduce using rule 36 (operation -> RANGE .)
    STRING          reduce using rule 36 (operation -> RANGE .)
    CHAR            reduce using rule 36 (operation -> RANGE .)
    BOOLEAN         reduce using rule 36 (operation -> RANGE .)


state 109

    (71) eq -> EQ .

    LPAREN          reduce using rule 71 (eq -> EQ .)
    IDENTIFIER      reduce using rule 71 (eq -> EQ .)
    INTEGER         reduce using rule 71 (eq -> EQ .)
    REAL            reduce using rule 71 (eq -> EQ .)
    STRING          reduce using rule 71 (eq -> EQ .)
    CHAR            reduce using rule 71 (eq -> EQ .)
    BOOLEAN         reduce using rule 71 (eq -> EQ .)


state 110

    (72) neq -> NEQ .

    LPAREN          reduce using rule 72 (neq -> NEQ .)
    IDENTIFIER      reduce using rule 72 (neq -> NEQ .)
    INTEGER         reduce using rule 72 (neq -> NEQ .)
    REAL            reduce using rule 72 (neq -> NEQ .)
    STRING          reduce using rule 72 (neq -> NEQ .)
    CHAR            reduce using rule 72 (neq -> NEQ .)
    BOOLEAN         reduce using rule 72 (neq -> NEQ .)


state 111

    (73) lt -> LT .

    LPAREN          reduce using rule 73 (lt -> LT .)
    IDENTIFIER      reduce using rule 73 (lt -> LT .)
    INTEGER         reduce using rule 73 (lt -> LT .)
    REAL            reduce using rule 73 (lt -> LT .)
    STRING          reduce using rule 73 (lt -> LT .)
    CHAR            reduce using rule 73 (lt -> LT .)
    BOOLEAN         reduce using rule 73 (lt -> LT .)


state 112

    (74) gt -> GT .

    LPAREN          reduce using rule 74 (gt -> GT .)
    IDENTIFIER      reduce using rule 74 (gt -> GT .)
    INTEGER         reduce using rule 74 (gt -> GT .)
    REAL            reduce using rule 74 (gt -> GT .)
    STRING          reduce using rule 74 (gt -> GT .)
    CHAR            reduce using rule 74 (gt -> GT .)
    BOOLEAN         reduce using rule 74 (gt -> GT .)


state 113

    (75) lte -> LTE .

    LPAREN          reduce using rule 75 (lte -> LTE .)
    IDENTIFIER      reduce using rule 75 (lte -> LTE .)
    INTEGER         reduce using rule 75 (lte -> LTE .)
    REAL            reduce using rule 75 (lte -> LTE .)
    STRING          reduce using rule 75 (lte -> LTE .)
    CHAR            reduce using rule 75 (lte -> LTE .)
    BOOLEAN         reduce using rule 75 (lte -> LTE .)


state 114

    (76) gte -> GTE .

    LPAREN          reduce using rule 76 (gte -> GTE .)
    IDENTIFIER      reduce using rule 76 (gte -> GTE .)
    INTEGER         reduce using rule 76 (gte -> GTE .)
    REAL            reduce using rule 76 (gte -> GTE .)
    STRING          reduce using rule 76 (gte -> GTE .)
    CHAR            reduce using rule 76 (gte -> GTE .)
    BOOLEAN         reduce using rule 76 (gte -> GTE .)


state 115

    (77) and -> AND .

    LPAREN          reduce using rule 77 (and -> AND .)
    IDENTIFIER      reduce using rule 77 (and -> AND .)
    INTEGER         reduce using rule 77 (and -> AND .)
    REAL            reduce using rule 77 (and -> AND .)
    STRING          reduce using rule 77 (and -> AND .)
    CHAR            reduce using rule 77 (and -> AND .)
    BOOLEAN         reduce using rule 77 (and -> AND .)


state 116

    (78) or -> OR .

    LPAREN          reduce using rule 78 (or -> OR .)
    IDENTIFIER      reduce using rule 78 (or -> OR .)
    INTEGER         reduce using rule 78 (or -> OR .)
    REAL            reduce using rule 78 (or -> OR .)
    STRING          reduce using rule 78 (or -> OR .)
    CHAR            reduce using rule 78 (or -> OR .)
    BOOLEAN         reduce using rule 78 (or -> OR .)


state 117

    (79) not -> NOT .

    LPAREN          reduce using rule 79 (not -> NOT .)
    IDENTIFIER      reduce using rule 79 (not -> NOT .)
    INTEGER         reduce using rule 79 (not -> NOT .)
    REAL            reduce using rule 79 (not -> NOT .)
    STRING          reduce using rule 79 (not -> NOT .)
    CHAR            reduce using rule 79 (not -> NOT .)
    BOOLEAN         reduce using rule 79 (not -> NOT .)


state 118

    (56) plus -> PLUS .

    LPAREN          reduce using rule 56 (plus -> PLUS .)
    IDENTIFIER      reduce using rule 56 (plus -> PLUS .)
    INTEGER         reduce using rule 56 (plus -> PLUS .)
    REAL            reduce using rule 56 (plus -> PLUS .)
    STRING          reduce using rule 56 (plus -> PLUS .)
    CHAR            reduce using rule 56 (plus -> PLUS .)
    BOOLEAN         reduce using rule 56 (plus -> PLUS .)


state 119

    (57) minus -> MINUS .

    LPAREN          reduce using rule 57 (minus -> MINUS .)
    IDENTIFIER      reduce using rule 57 (minus -> MINUS .)
    INTEGER         reduce using rule 57 (minus -> MINUS .)
    REAL            reduce using rule 57 (minus -> MINUS .)
    STRING          reduce using rule 57 (minus -> MINUS .)
    CHAR            reduce using rule 57 (minus -> MINUS .)
    BOOLEAN         reduce using rule 57 (minus -> MINUS .)


state 120

    (58) times -> TIMES .

    LPAREN          reduce using rule 58 (times -> TIMES .)
    IDENTIFIER      reduce using rule 58 (times -> TIMES .)
    INTEGER         reduce using rule 58 (times -> TIMES .)
    REAL            reduce using rule 58 (times -> TIMES .)
    STRING          reduce using rule 58 (times -> TIMES .)
    CHAR            reduce using rule 58 (times -> TIMES .)
    BOOLEAN         reduce using rule 58 (times -> TIMES .)


state 121

    (59) division -> DIVISION .

    LPAREN          reduce using rule 59 (division -> DIVISION .)
    IDENTIFIER      reduce using rule 59 (division -> DIVISION .)
    INTEGER         reduce using rule 59 (division -> DIVISION .)
    REAL            reduce using rule 59 (division -> DIVISION .)
    STRING          reduce using rule 59 (division -> DIVISION .)
    CHAR            reduce using rule 59 (division -> DIVISION .)
    BOOLEAN         reduce using rule 59 (division -> DIVISION .)


state 122

    (60) div -> DIV .

    LPAREN          reduce using rule 60 (div -> DIV .)
    IDENTIFIER      reduce using rule 60 (div -> DIV .)
    INTEGER         reduce using rule 60 (div -> DIV .)
    REAL            reduce using rule 60 (div -> DIV .)
    STRING          reduce using rule 60 (div -> DIV .)
    CHAR            reduce using rule 60 (div -> DIV .)
    BOOLEAN         reduce using rule 60 (div -> DIV .)


state 123

    (61) mod -> MOD .

    LPAREN          reduce using rule 61 (mod -> MOD .)
    IDENTIFIER      reduce using rule 61 (mod -> MOD .)
    INTEGER         reduce using rule 61 (mod -> MOD .)
    REAL            reduce using rule 61 (mod -> MOD .)
    STRING          reduce using rule 61 (mod -> MOD .)
    CHAR            reduce using rule 61 (mod -> MOD .)
    BOOLEAN         reduce using rule 61 (mod -> MOD .)


state 124

    (99) condition -> type comparator . expression
    (100) condition -> type comparator . type
    (24) expression -> . type operation type
    (25) expression -> . expression_paren
    (26) expression -> . expression operation expression
    (27) expression -> . func_call
    (28) expression -> . condition
    (43) type -> . integer
    (44) type -> . real
    (45) type -> . string
    (46) type -> . char
    (47) type -> . boolean
    (48) type -> . identifier
    (49) type -> . func_call
    (29) expression_paren -> . LPAREN expression RPAREN
    (87) func_call -> . IDENTIFIER LPAREN arg_list RPAREN
    (98) condition -> . expression comparator expression
    (99) condition -> . type comparator expression
    (100) condition -> . type comparator type
    (101) condition -> . expression comparator type
    (102) condition -> . type
    (50) integer -> . INTEGER
    (51) real -> . REAL
    (52) string -> . STRING
    (53) char -> . CHAR
    (54) boolean -> . BOOLEAN
    (55) identifier -> . IDENTIFIER

    LPAREN          shift and go to state 57
    IDENTIFIER      shift and go to state 58
    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63

    type                           shift and go to state 153
    expression                     shift and go to state 154
    expression_paren               shift and go to state 49
    func_call                      shift and go to state 50
    condition                      shift and go to state 89
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56

state 125

    (24) expression -> type operation . type
    (43) type -> . integer
    (44) type -> . real
    (45) type -> . string
    (46) type -> . char
    (47) type -> . boolean
    (48) type -> . identifier
    (49) type -> . func_call
    (50) integer -> . INTEGER
    (51) real -> . REAL
    (52) string -> . STRING
    (53) char -> . CHAR
    (54) boolean -> . BOOLEAN
    (55) identifier -> . IDENTIFIER
    (87) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 85

    type                           shift and go to state 155
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 84

state 126

    (29) expression_paren -> LPAREN expression . RPAREN
    (26) expression -> expression . operation expression
    (98) condition -> expression . comparator expression
    (101) condition -> expression . comparator type
    (30) operation -> . plus
    (31) operation -> . minus
    (32) operation -> . times
    (33) operation -> . division
    (34) operation -> . div
    (35) operation -> . mod
    (36) operation -> . RANGE
    (62) comparator -> . eq
    (63) comparator -> . neq
    (64) comparator -> . lt
    (65) comparator -> . gt
    (66) comparator -> . lte
    (67) comparator -> . gte
    (68) comparator -> . and
    (69) comparator -> . or
    (70) comparator -> . not
    (56) plus -> . PLUS
    (57) minus -> . MINUS
    (58) times -> . TIMES
    (59) division -> . DIVISION
    (60) div -> . DIV
    (61) mod -> . MOD
    (71) eq -> . EQ
    (72) neq -> . NEQ
    (73) lt -> . LT
    (74) gt -> . GT
    (75) lte -> . LTE
    (76) gte -> . GTE
    (77) and -> . AND
    (78) or -> . OR
    (79) not -> . NOT

    RPAREN          shift and go to state 156
    RANGE           shift and go to state 108
    PLUS            shift and go to state 118
    MINUS           shift and go to state 119
    TIMES           shift and go to state 120
    DIVISION        shift and go to state 121
    DIV             shift and go to state 122
    MOD             shift and go to state 123
    EQ              shift and go to state 109
    NEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LTE             shift and go to state 113
    GTE             shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    NOT             shift and go to state 117

    operation                      shift and go to state 92
    comparator                     shift and go to state 91
    plus                           shift and go to state 102
    minus                          shift and go to state 103
    times                          shift and go to state 104
    division                       shift and go to state 105
    div                            shift and go to state 106
    mod                            shift and go to state 107
    eq                             shift and go to state 93
    neq                            shift and go to state 94
    lt                             shift and go to state 95
    gt                             shift and go to state 96
    lte                            shift and go to state 97
    gte                            shift and go to state 98
    and                            shift and go to state 99
    or                             shift and go to state 100
    not                            shift and go to state 101

state 127

    (24) expression -> type . operation type
    (99) condition -> type . comparator expression
    (100) condition -> type . comparator type
    (102) condition -> type .
    (30) operation -> . plus
    (31) operation -> . minus
    (32) operation -> . times
    (33) operation -> . division
    (34) operation -> . div
    (35) operation -> . mod
    (36) operation -> . RANGE
    (62) comparator -> . eq
    (63) comparator -> . neq
    (64) comparator -> . lt
    (65) comparator -> . gt
    (66) comparator -> . lte
    (67) comparator -> . gte
    (68) comparator -> . and
    (69) comparator -> . or
    (70) comparator -> . not
    (56) plus -> . PLUS
    (57) minus -> . MINUS
    (58) times -> . TIMES
    (59) division -> . DIVISION
    (60) div -> . DIV
    (61) mod -> . MOD
    (71) eq -> . EQ
    (72) neq -> . NEQ
    (73) lt -> . LT
    (74) gt -> . GT
    (75) lte -> . LTE
    (76) gte -> . GTE
    (77) and -> . AND
    (78) or -> . OR
    (79) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    RPAREN          reduce using rule 102 (condition -> type .)
    THEN            reduce using rule 102 (condition -> type .)
    DO              reduce using rule 102 (condition -> type .)
    SEMICOLON       reduce using rule 102 (condition -> type .)
    TO              reduce using rule 102 (condition -> type .)
    DOWNTO          reduce using rule 102 (condition -> type .)
    ELSE            reduce using rule 102 (condition -> type .)
    RANGE           shift and go to state 108
    PLUS            shift and go to state 118
    MINUS           shift and go to state 119
    TIMES           shift and go to state 120
    DIVISION        shift and go to state 121
    DIV             shift and go to state 122
    MOD             shift and go to state 123
    EQ              shift and go to state 109
    NEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LTE             shift and go to state 113
    GTE             shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    NOT             shift and go to state 117

  ! RANGE           [ reduce using rule 102 (condition -> type .) ]
  ! PLUS            [ reduce using rule 102 (condition -> type .) ]
  ! MINUS           [ reduce using rule 102 (condition -> type .) ]
  ! TIMES           [ reduce using rule 102 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 102 (condition -> type .) ]
  ! DIV             [ reduce using rule 102 (condition -> type .) ]
  ! MOD             [ reduce using rule 102 (condition -> type .) ]
  ! EQ              [ reduce using rule 102 (condition -> type .) ]
  ! NEQ             [ reduce using rule 102 (condition -> type .) ]
  ! LT              [ reduce using rule 102 (condition -> type .) ]
  ! GT              [ reduce using rule 102 (condition -> type .) ]
  ! LTE             [ reduce using rule 102 (condition -> type .) ]
  ! GTE             [ reduce using rule 102 (condition -> type .) ]
  ! AND             [ reduce using rule 102 (condition -> type .) ]
  ! OR              [ reduce using rule 102 (condition -> type .) ]
  ! NOT             [ reduce using rule 102 (condition -> type .) ]

    operation                      shift and go to state 125
    comparator                     shift and go to state 124
    plus                           shift and go to state 102
    minus                          shift and go to state 103
    times                          shift and go to state 104
    division                       shift and go to state 105
    div                            shift and go to state 106
    mod                            shift and go to state 107
    eq                             shift and go to state 93
    neq                            shift and go to state 94
    lt                             shift and go to state 95
    gt                             shift and go to state 96
    lte                            shift and go to state 97
    gte                            shift and go to state 98
    and                            shift and go to state 99
    or                             shift and go to state 100
    not                            shift and go to state 101

state 128

    (87) func_call -> IDENTIFIER LPAREN . arg_list RPAREN
    (88) arg_list -> . IDENTIFIER COMMA arg_list
    (89) arg_list -> . IDENTIFIER
    (90) arg_list -> .

    IDENTIFIER      shift and go to state 157
    RPAREN          reduce using rule 90 (arg_list -> .)

    arg_list                       shift and go to state 158

state 129

    (110) while_loop -> WHILE condition DO . statement
    (111) while_loop -> WHILE condition DO . if_body
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (103) if_body -> . BEGIN statements END
    (113) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (93) procedure_call -> . IDENTIFIER
    (94) cond_if -> . IF condition THEN statement
    (95) cond_if -> . IF condition THEN statement ELSE statement
    (96) cond_if -> . IF condition THEN if_body
    (97) cond_if -> . IF condition THEN if_body ELSE if_body
    (110) while_loop -> . WHILE condition DO statement
    (111) while_loop -> . WHILE condition DO if_body
    (106) for_loop -> . FOR assignment to type DO statement
    (107) for_loop -> . FOR assignment to type DO if_body
    (108) for_loop -> . FOR assignment downto type DO statement
    (109) for_loop -> . FOR assignment downto type DO if_body
    (112) readln -> . READLN LPAREN type RPAREN

    BEGIN           shift and go to state 149
    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    statement                      shift and go to state 159
    if_body                        shift and go to state 160
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 130

    (106) for_loop -> FOR assignment to . type DO statement
    (107) for_loop -> FOR assignment to . type DO if_body
    (43) type -> . integer
    (44) type -> . real
    (45) type -> . string
    (46) type -> . char
    (47) type -> . boolean
    (48) type -> . identifier
    (49) type -> . func_call
    (50) integer -> . INTEGER
    (51) real -> . REAL
    (52) string -> . STRING
    (53) char -> . CHAR
    (54) boolean -> . BOOLEAN
    (55) identifier -> . IDENTIFIER
    (87) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 85

    type                           shift and go to state 161
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 84

state 131

    (108) for_loop -> FOR assignment downto . type DO statement
    (109) for_loop -> FOR assignment downto . type DO if_body
    (43) type -> . integer
    (44) type -> . real
    (45) type -> . string
    (46) type -> . char
    (47) type -> . boolean
    (48) type -> . identifier
    (49) type -> . func_call
    (50) integer -> . INTEGER
    (51) real -> . REAL
    (52) string -> . STRING
    (53) char -> . CHAR
    (54) boolean -> . BOOLEAN
    (55) identifier -> . IDENTIFIER
    (87) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 85

    type                           shift and go to state 162
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 84

state 132

    (104) to -> TO .

    INTEGER         reduce using rule 104 (to -> TO .)
    REAL            reduce using rule 104 (to -> TO .)
    STRING          reduce using rule 104 (to -> TO .)
    CHAR            reduce using rule 104 (to -> TO .)
    BOOLEAN         reduce using rule 104 (to -> TO .)
    IDENTIFIER      reduce using rule 104 (to -> TO .)


state 133

    (105) downto -> DOWNTO .

    INTEGER         reduce using rule 105 (downto -> DOWNTO .)
    REAL            reduce using rule 105 (downto -> DOWNTO .)
    STRING          reduce using rule 105 (downto -> DOWNTO .)
    CHAR            reduce using rule 105 (downto -> DOWNTO .)
    BOOLEAN         reduce using rule 105 (downto -> DOWNTO .)
    IDENTIFIER      reduce using rule 105 (downto -> DOWNTO .)


state 134

    (112) readln -> READLN LPAREN type . RPAREN

    RPAREN          shift and go to state 163


state 135

    (80) function -> func_header SEMICOLON func_body SEMICOLON .

    VAR             reduce using rule 80 (function -> func_header SEMICOLON func_body SEMICOLON .)
    BEGIN           reduce using rule 80 (function -> func_header SEMICOLON func_body SEMICOLON .)
    PROCEDURE       reduce using rule 80 (function -> func_header SEMICOLON func_body SEMICOLON .)
    FUNCTION        reduce using rule 80 (function -> func_header SEMICOLON func_body SEMICOLON .)


state 136

    (86) func_body -> BEGIN statements . END

    END             shift and go to state 164


state 137

    (91) procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body . SEMICOLON

    SEMICOLON       shift and go to state 165


state 138

    (92) procedure_body -> BEGIN . statements END
    (13) statements -> . statement SEMICOLON statements
    (14) statements -> . statement SEMICOLON
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (113) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (93) procedure_call -> . IDENTIFIER
    (94) cond_if -> . IF condition THEN statement
    (95) cond_if -> . IF condition THEN statement ELSE statement
    (96) cond_if -> . IF condition THEN if_body
    (97) cond_if -> . IF condition THEN if_body ELSE if_body
    (110) while_loop -> . WHILE condition DO statement
    (111) while_loop -> . WHILE condition DO if_body
    (106) for_loop -> . FOR assignment to type DO statement
    (107) for_loop -> . FOR assignment to type DO if_body
    (108) for_loop -> . FOR assignment downto type DO statement
    (109) for_loop -> . FOR assignment downto type DO if_body
    (112) readln -> . READLN LPAREN type RPAREN

    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    statements                     shift and go to state 166
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 139

    (85) func_arg -> IDENTIFIER . COLON type_name

    COLON           shift and go to state 167


state 140

    (81) func_header -> FUNCTION IDENTIFIER LPAREN func_args . RPAREN COLON type_name

    RPAREN          shift and go to state 168


state 141

    (82) func_header -> FUNCTION IDENTIFIER LPAREN RPAREN . COLON type_name

    COLON           shift and go to state 169


state 142

    (83) func_args -> func_arg . COMMA func_args
    (84) func_args -> func_arg .

    COMMA           shift and go to state 170
    RPAREN          reduce using rule 84 (func_args -> func_arg .)


state 143

    (7) variable_declaration -> identifier_list COLON type_name SEMICOLON . variable_declaration
    (8) variable_declaration -> identifier_list COLON type_name SEMICOLON .
    (7) variable_declaration -> . identifier_list COLON type_name SEMICOLON variable_declaration
    (8) variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    BEGIN           reduce using rule 8 (variable_declaration -> identifier_list COLON type_name SEMICOLON .)
    IDENTIFIER      shift and go to state 17

    identifier_list                shift and go to state 16
    variable_declaration           shift and go to state 171

state 144

    (11) array_type -> ARRAY LBRACKET . type RANGE type RBRACKET OF type_name
    (43) type -> . integer
    (44) type -> . real
    (45) type -> . string
    (46) type -> . char
    (47) type -> . boolean
    (48) type -> . identifier
    (49) type -> . func_call
    (50) integer -> . INTEGER
    (51) real -> . REAL
    (52) string -> . STRING
    (53) char -> . CHAR
    (54) boolean -> . BOOLEAN
    (55) identifier -> . IDENTIFIER
    (87) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 85

    type                           shift and go to state 172
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 84

state 145

    (113) writeln -> WRITELN LPAREN writeln_args RPAREN .

    SEMICOLON       reduce using rule 113 (writeln -> WRITELN LPAREN writeln_args RPAREN .)
    ELSE            reduce using rule 113 (writeln -> WRITELN LPAREN writeln_args RPAREN .)


state 146

    (114) writeln_args -> type COMMA . writeln_args
    (114) writeln_args -> . type COMMA writeln_args
    (115) writeln_args -> . type
    (43) type -> . integer
    (44) type -> . real
    (45) type -> . string
    (46) type -> . char
    (47) type -> . boolean
    (48) type -> . identifier
    (49) type -> . func_call
    (50) integer -> . INTEGER
    (51) real -> . REAL
    (52) string -> . STRING
    (53) char -> . CHAR
    (54) boolean -> . BOOLEAN
    (55) identifier -> . IDENTIFIER
    (87) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 85

    type                           shift and go to state 83
    writeln_args                   shift and go to state 173
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 84

state 147

    (94) cond_if -> IF condition THEN statement .
    (95) cond_if -> IF condition THEN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 94 (cond_if -> IF condition THEN statement .)
    ELSE            shift and go to state 174

  ! ELSE            [ reduce using rule 94 (cond_if -> IF condition THEN statement .) ]


state 148

    (96) cond_if -> IF condition THEN if_body .
    (97) cond_if -> IF condition THEN if_body . ELSE if_body

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 96 (cond_if -> IF condition THEN if_body .)
    ELSE            shift and go to state 175

  ! ELSE            [ reduce using rule 96 (cond_if -> IF condition THEN if_body .) ]


state 149

    (103) if_body -> BEGIN . statements END
    (13) statements -> . statement SEMICOLON statements
    (14) statements -> . statement SEMICOLON
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (113) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (93) procedure_call -> . IDENTIFIER
    (94) cond_if -> . IF condition THEN statement
    (95) cond_if -> . IF condition THEN statement ELSE statement
    (96) cond_if -> . IF condition THEN if_body
    (97) cond_if -> . IF condition THEN if_body ELSE if_body
    (110) while_loop -> . WHILE condition DO statement
    (111) while_loop -> . WHILE condition DO if_body
    (106) for_loop -> . FOR assignment to type DO statement
    (107) for_loop -> . FOR assignment to type DO if_body
    (108) for_loop -> . FOR assignment downto type DO statement
    (109) for_loop -> . FOR assignment downto type DO if_body
    (112) readln -> . READLN LPAREN type RPAREN

    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    statements                     shift and go to state 176
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 150

    (98) condition -> expression comparator expression .
    (26) expression -> expression . operation expression
    (98) condition -> expression . comparator expression
    (101) condition -> expression . comparator type
    (30) operation -> . plus
    (31) operation -> . minus
    (32) operation -> . times
    (33) operation -> . division
    (34) operation -> . div
    (35) operation -> . mod
    (36) operation -> . RANGE
    (62) comparator -> . eq
    (63) comparator -> . neq
    (64) comparator -> . lt
    (65) comparator -> . gt
    (66) comparator -> . lte
    (67) comparator -> . gte
    (68) comparator -> . and
    (69) comparator -> . or
    (70) comparator -> . not
    (56) plus -> . PLUS
    (57) minus -> . MINUS
    (58) times -> . TIMES
    (59) division -> . DIVISION
    (60) div -> . DIV
    (61) mod -> . MOD
    (71) eq -> . EQ
    (72) neq -> . NEQ
    (73) lt -> . LT
    (74) gt -> . GT
    (75) lte -> . LTE
    (76) gte -> . GTE
    (77) and -> . AND
    (78) or -> . OR
    (79) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 98 (condition -> expression comparator expression .)
    DO              reduce using rule 98 (condition -> expression comparator expression .)
    SEMICOLON       reduce using rule 98 (condition -> expression comparator expression .)
    TO              reduce using rule 98 (condition -> expression comparator expression .)
    DOWNTO          reduce using rule 98 (condition -> expression comparator expression .)
    ELSE            reduce using rule 98 (condition -> expression comparator expression .)
    RPAREN          reduce using rule 98 (condition -> expression comparator expression .)
    RANGE           shift and go to state 108
    PLUS            shift and go to state 118
    MINUS           shift and go to state 119
    TIMES           shift and go to state 120
    DIVISION        shift and go to state 121
    DIV             shift and go to state 122
    MOD             shift and go to state 123
    EQ              shift and go to state 109
    NEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LTE             shift and go to state 113
    GTE             shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    NOT             shift and go to state 117

  ! RANGE           [ reduce using rule 98 (condition -> expression comparator expression .) ]
  ! EQ              [ reduce using rule 98 (condition -> expression comparator expression .) ]
  ! NEQ             [ reduce using rule 98 (condition -> expression comparator expression .) ]
  ! LT              [ reduce using rule 98 (condition -> expression comparator expression .) ]
  ! GT              [ reduce using rule 98 (condition -> expression comparator expression .) ]
  ! LTE             [ reduce using rule 98 (condition -> expression comparator expression .) ]
  ! GTE             [ reduce using rule 98 (condition -> expression comparator expression .) ]
  ! AND             [ reduce using rule 98 (condition -> expression comparator expression .) ]
  ! OR              [ reduce using rule 98 (condition -> expression comparator expression .) ]
  ! NOT             [ reduce using rule 98 (condition -> expression comparator expression .) ]
  ! PLUS            [ reduce using rule 98 (condition -> expression comparator expression .) ]
  ! MINUS           [ reduce using rule 98 (condition -> expression comparator expression .) ]
  ! TIMES           [ reduce using rule 98 (condition -> expression comparator expression .) ]
  ! DIVISION        [ reduce using rule 98 (condition -> expression comparator expression .) ]
  ! DIV             [ reduce using rule 98 (condition -> expression comparator expression .) ]
  ! MOD             [ reduce using rule 98 (condition -> expression comparator expression .) ]

    comparator                     shift and go to state 91
    operation                      shift and go to state 92
    plus                           shift and go to state 102
    minus                          shift and go to state 103
    times                          shift and go to state 104
    division                       shift and go to state 105
    div                            shift and go to state 106
    mod                            shift and go to state 107
    eq                             shift and go to state 93
    neq                            shift and go to state 94
    lt                             shift and go to state 95
    gt                             shift and go to state 96
    lte                            shift and go to state 97
    gte                            shift and go to state 98
    and                            shift and go to state 99
    or                             shift and go to state 100
    not                            shift and go to state 101

state 151

    (101) condition -> expression comparator type .
    (24) expression -> type . operation type
    (99) condition -> type . comparator expression
    (100) condition -> type . comparator type
    (102) condition -> type .
    (30) operation -> . plus
    (31) operation -> . minus
    (32) operation -> . times
    (33) operation -> . division
    (34) operation -> . div
    (35) operation -> . mod
    (36) operation -> . RANGE
    (62) comparator -> . eq
    (63) comparator -> . neq
    (64) comparator -> . lt
    (65) comparator -> . gt
    (66) comparator -> . lte
    (67) comparator -> . gte
    (68) comparator -> . and
    (69) comparator -> . or
    (70) comparator -> . not
    (56) plus -> . PLUS
    (57) minus -> . MINUS
    (58) times -> . TIMES
    (59) division -> . DIVISION
    (60) div -> . DIV
    (61) mod -> . MOD
    (71) eq -> . EQ
    (72) neq -> . NEQ
    (73) lt -> . LT
    (74) gt -> . GT
    (75) lte -> . LTE
    (76) gte -> . GTE
    (77) and -> . AND
    (78) or -> . OR
    (79) not -> . NOT

  ! reduce/reduce conflict for RANGE resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for PLUS resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for MINUS resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for TIMES resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DIVISION resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DIV resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for MOD resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for EQ resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for NEQ resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for LT resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for GT resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for LTE resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for GTE resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for AND resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for OR resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for NOT resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for THEN resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DO resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for TO resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for ELSE resolved using rule 101 (condition -> expression comparator type .)
  ! reduce/reduce conflict for RPAREN resolved using rule 101 (condition -> expression comparator type .)
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 101 (condition -> expression comparator type .)
    DO              reduce using rule 101 (condition -> expression comparator type .)
    SEMICOLON       reduce using rule 101 (condition -> expression comparator type .)
    TO              reduce using rule 101 (condition -> expression comparator type .)
    DOWNTO          reduce using rule 101 (condition -> expression comparator type .)
    ELSE            reduce using rule 101 (condition -> expression comparator type .)
    RPAREN          reduce using rule 101 (condition -> expression comparator type .)
    RANGE           shift and go to state 108
    PLUS            shift and go to state 118
    MINUS           shift and go to state 119
    TIMES           shift and go to state 120
    DIVISION        shift and go to state 121
    DIV             shift and go to state 122
    MOD             shift and go to state 123
    EQ              shift and go to state 109
    NEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LTE             shift and go to state 113
    GTE             shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    NOT             shift and go to state 117

  ! RANGE           [ reduce using rule 101 (condition -> expression comparator type .) ]
  ! EQ              [ reduce using rule 101 (condition -> expression comparator type .) ]
  ! NEQ             [ reduce using rule 101 (condition -> expression comparator type .) ]
  ! LT              [ reduce using rule 101 (condition -> expression comparator type .) ]
  ! GT              [ reduce using rule 101 (condition -> expression comparator type .) ]
  ! LTE             [ reduce using rule 101 (condition -> expression comparator type .) ]
  ! GTE             [ reduce using rule 101 (condition -> expression comparator type .) ]
  ! AND             [ reduce using rule 101 (condition -> expression comparator type .) ]
  ! OR              [ reduce using rule 101 (condition -> expression comparator type .) ]
  ! NOT             [ reduce using rule 101 (condition -> expression comparator type .) ]
  ! PLUS            [ reduce using rule 101 (condition -> expression comparator type .) ]
  ! MINUS           [ reduce using rule 101 (condition -> expression comparator type .) ]
  ! TIMES           [ reduce using rule 101 (condition -> expression comparator type .) ]
  ! DIVISION        [ reduce using rule 101 (condition -> expression comparator type .) ]
  ! DIV             [ reduce using rule 101 (condition -> expression comparator type .) ]
  ! MOD             [ reduce using rule 101 (condition -> expression comparator type .) ]
  ! RANGE           [ reduce using rule 102 (condition -> type .) ]
  ! PLUS            [ reduce using rule 102 (condition -> type .) ]
  ! MINUS           [ reduce using rule 102 (condition -> type .) ]
  ! TIMES           [ reduce using rule 102 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 102 (condition -> type .) ]
  ! DIV             [ reduce using rule 102 (condition -> type .) ]
  ! MOD             [ reduce using rule 102 (condition -> type .) ]
  ! EQ              [ reduce using rule 102 (condition -> type .) ]
  ! NEQ             [ reduce using rule 102 (condition -> type .) ]
  ! LT              [ reduce using rule 102 (condition -> type .) ]
  ! GT              [ reduce using rule 102 (condition -> type .) ]
  ! LTE             [ reduce using rule 102 (condition -> type .) ]
  ! GTE             [ reduce using rule 102 (condition -> type .) ]
  ! AND             [ reduce using rule 102 (condition -> type .) ]
  ! OR              [ reduce using rule 102 (condition -> type .) ]
  ! NOT             [ reduce using rule 102 (condition -> type .) ]
  ! THEN            [ reduce using rule 102 (condition -> type .) ]
  ! DO              [ reduce using rule 102 (condition -> type .) ]
  ! SEMICOLON       [ reduce using rule 102 (condition -> type .) ]
  ! TO              [ reduce using rule 102 (condition -> type .) ]
  ! DOWNTO          [ reduce using rule 102 (condition -> type .) ]
  ! ELSE            [ reduce using rule 102 (condition -> type .) ]
  ! RPAREN          [ reduce using rule 102 (condition -> type .) ]

    comparator                     shift and go to state 124
    operation                      shift and go to state 125
    plus                           shift and go to state 102
    minus                          shift and go to state 103
    times                          shift and go to state 104
    division                       shift and go to state 105
    div                            shift and go to state 106
    mod                            shift and go to state 107
    eq                             shift and go to state 93
    neq                            shift and go to state 94
    lt                             shift and go to state 95
    gt                             shift and go to state 96
    lte                            shift and go to state 97
    gte                            shift and go to state 98
    and                            shift and go to state 99
    or                             shift and go to state 100
    not                            shift and go to state 101

state 152

    (26) expression -> expression operation expression .
    (26) expression -> expression . operation expression
    (98) condition -> expression . comparator expression
    (101) condition -> expression . comparator type
    (30) operation -> . plus
    (31) operation -> . minus
    (32) operation -> . times
    (33) operation -> . division
    (34) operation -> . div
    (35) operation -> . mod
    (36) operation -> . RANGE
    (62) comparator -> . eq
    (63) comparator -> . neq
    (64) comparator -> . lt
    (65) comparator -> . gt
    (66) comparator -> . lte
    (67) comparator -> . gte
    (68) comparator -> . and
    (69) comparator -> . or
    (70) comparator -> . not
    (56) plus -> . PLUS
    (57) minus -> . MINUS
    (58) times -> . TIMES
    (59) division -> . DIVISION
    (60) div -> . DIV
    (61) mod -> . MOD
    (71) eq -> . EQ
    (72) neq -> . NEQ
    (73) lt -> . LT
    (74) gt -> . GT
    (75) lte -> . LTE
    (76) gte -> . GTE
    (77) and -> . AND
    (78) or -> . OR
    (79) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    SEMICOLON       reduce using rule 26 (expression -> expression operation expression .)
    TO              reduce using rule 26 (expression -> expression operation expression .)
    DOWNTO          reduce using rule 26 (expression -> expression operation expression .)
    ELSE            reduce using rule 26 (expression -> expression operation expression .)
    RPAREN          reduce using rule 26 (expression -> expression operation expression .)
    THEN            reduce using rule 26 (expression -> expression operation expression .)
    DO              reduce using rule 26 (expression -> expression operation expression .)
    RANGE           shift and go to state 108
    PLUS            shift and go to state 118
    MINUS           shift and go to state 119
    TIMES           shift and go to state 120
    DIVISION        shift and go to state 121
    DIV             shift and go to state 122
    MOD             shift and go to state 123
    EQ              shift and go to state 109
    NEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LTE             shift and go to state 113
    GTE             shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    NOT             shift and go to state 117

  ! RANGE           [ reduce using rule 26 (expression -> expression operation expression .) ]
  ! EQ              [ reduce using rule 26 (expression -> expression operation expression .) ]
  ! NEQ             [ reduce using rule 26 (expression -> expression operation expression .) ]
  ! LT              [ reduce using rule 26 (expression -> expression operation expression .) ]
  ! GT              [ reduce using rule 26 (expression -> expression operation expression .) ]
  ! LTE             [ reduce using rule 26 (expression -> expression operation expression .) ]
  ! GTE             [ reduce using rule 26 (expression -> expression operation expression .) ]
  ! AND             [ reduce using rule 26 (expression -> expression operation expression .) ]
  ! OR              [ reduce using rule 26 (expression -> expression operation expression .) ]
  ! NOT             [ reduce using rule 26 (expression -> expression operation expression .) ]
  ! PLUS            [ reduce using rule 26 (expression -> expression operation expression .) ]
  ! MINUS           [ reduce using rule 26 (expression -> expression operation expression .) ]
  ! TIMES           [ reduce using rule 26 (expression -> expression operation expression .) ]
  ! DIVISION        [ reduce using rule 26 (expression -> expression operation expression .) ]
  ! DIV             [ reduce using rule 26 (expression -> expression operation expression .) ]
  ! MOD             [ reduce using rule 26 (expression -> expression operation expression .) ]

    operation                      shift and go to state 92
    comparator                     shift and go to state 91
    plus                           shift and go to state 102
    minus                          shift and go to state 103
    times                          shift and go to state 104
    division                       shift and go to state 105
    div                            shift and go to state 106
    mod                            shift and go to state 107
    eq                             shift and go to state 93
    neq                            shift and go to state 94
    lt                             shift and go to state 95
    gt                             shift and go to state 96
    lte                            shift and go to state 97
    gte                            shift and go to state 98
    and                            shift and go to state 99
    or                             shift and go to state 100
    not                            shift and go to state 101

state 153

    (100) condition -> type comparator type .
    (24) expression -> type . operation type
    (99) condition -> type . comparator expression
    (100) condition -> type . comparator type
    (102) condition -> type .
    (30) operation -> . plus
    (31) operation -> . minus
    (32) operation -> . times
    (33) operation -> . division
    (34) operation -> . div
    (35) operation -> . mod
    (36) operation -> . RANGE
    (62) comparator -> . eq
    (63) comparator -> . neq
    (64) comparator -> . lt
    (65) comparator -> . gt
    (66) comparator -> . lte
    (67) comparator -> . gte
    (68) comparator -> . and
    (69) comparator -> . or
    (70) comparator -> . not
    (56) plus -> . PLUS
    (57) minus -> . MINUS
    (58) times -> . TIMES
    (59) division -> . DIVISION
    (60) div -> . DIV
    (61) mod -> . MOD
    (71) eq -> . EQ
    (72) neq -> . NEQ
    (73) lt -> . LT
    (74) gt -> . GT
    (75) lte -> . LTE
    (76) gte -> . GTE
    (77) and -> . AND
    (78) or -> . OR
    (79) not -> . NOT

  ! reduce/reduce conflict for RANGE resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for PLUS resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for MINUS resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for TIMES resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for DIVISION resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for DIV resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for MOD resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for EQ resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for NEQ resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for LT resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for GT resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for LTE resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for GTE resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for AND resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for OR resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for NOT resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for THEN resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for DO resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for TO resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for ELSE resolved using rule 100 (condition -> type comparator type .)
  ! reduce/reduce conflict for RPAREN resolved using rule 100 (condition -> type comparator type .)
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 100 (condition -> type comparator type .)
    DO              reduce using rule 100 (condition -> type comparator type .)
    SEMICOLON       reduce using rule 100 (condition -> type comparator type .)
    TO              reduce using rule 100 (condition -> type comparator type .)
    DOWNTO          reduce using rule 100 (condition -> type comparator type .)
    ELSE            reduce using rule 100 (condition -> type comparator type .)
    RPAREN          reduce using rule 100 (condition -> type comparator type .)
    RANGE           shift and go to state 108
    PLUS            shift and go to state 118
    MINUS           shift and go to state 119
    TIMES           shift and go to state 120
    DIVISION        shift and go to state 121
    DIV             shift and go to state 122
    MOD             shift and go to state 123
    EQ              shift and go to state 109
    NEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LTE             shift and go to state 113
    GTE             shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    NOT             shift and go to state 117

  ! RANGE           [ reduce using rule 100 (condition -> type comparator type .) ]
  ! EQ              [ reduce using rule 100 (condition -> type comparator type .) ]
  ! NEQ             [ reduce using rule 100 (condition -> type comparator type .) ]
  ! LT              [ reduce using rule 100 (condition -> type comparator type .) ]
  ! GT              [ reduce using rule 100 (condition -> type comparator type .) ]
  ! LTE             [ reduce using rule 100 (condition -> type comparator type .) ]
  ! GTE             [ reduce using rule 100 (condition -> type comparator type .) ]
  ! AND             [ reduce using rule 100 (condition -> type comparator type .) ]
  ! OR              [ reduce using rule 100 (condition -> type comparator type .) ]
  ! NOT             [ reduce using rule 100 (condition -> type comparator type .) ]
  ! PLUS            [ reduce using rule 100 (condition -> type comparator type .) ]
  ! MINUS           [ reduce using rule 100 (condition -> type comparator type .) ]
  ! TIMES           [ reduce using rule 100 (condition -> type comparator type .) ]
  ! DIVISION        [ reduce using rule 100 (condition -> type comparator type .) ]
  ! DIV             [ reduce using rule 100 (condition -> type comparator type .) ]
  ! MOD             [ reduce using rule 100 (condition -> type comparator type .) ]
  ! RANGE           [ reduce using rule 102 (condition -> type .) ]
  ! PLUS            [ reduce using rule 102 (condition -> type .) ]
  ! MINUS           [ reduce using rule 102 (condition -> type .) ]
  ! TIMES           [ reduce using rule 102 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 102 (condition -> type .) ]
  ! DIV             [ reduce using rule 102 (condition -> type .) ]
  ! MOD             [ reduce using rule 102 (condition -> type .) ]
  ! EQ              [ reduce using rule 102 (condition -> type .) ]
  ! NEQ             [ reduce using rule 102 (condition -> type .) ]
  ! LT              [ reduce using rule 102 (condition -> type .) ]
  ! GT              [ reduce using rule 102 (condition -> type .) ]
  ! LTE             [ reduce using rule 102 (condition -> type .) ]
  ! GTE             [ reduce using rule 102 (condition -> type .) ]
  ! AND             [ reduce using rule 102 (condition -> type .) ]
  ! OR              [ reduce using rule 102 (condition -> type .) ]
  ! NOT             [ reduce using rule 102 (condition -> type .) ]
  ! THEN            [ reduce using rule 102 (condition -> type .) ]
  ! DO              [ reduce using rule 102 (condition -> type .) ]
  ! SEMICOLON       [ reduce using rule 102 (condition -> type .) ]
  ! TO              [ reduce using rule 102 (condition -> type .) ]
  ! DOWNTO          [ reduce using rule 102 (condition -> type .) ]
  ! ELSE            [ reduce using rule 102 (condition -> type .) ]
  ! RPAREN          [ reduce using rule 102 (condition -> type .) ]

    comparator                     shift and go to state 124
    operation                      shift and go to state 125
    plus                           shift and go to state 102
    minus                          shift and go to state 103
    times                          shift and go to state 104
    division                       shift and go to state 105
    div                            shift and go to state 106
    mod                            shift and go to state 107
    eq                             shift and go to state 93
    neq                            shift and go to state 94
    lt                             shift and go to state 95
    gt                             shift and go to state 96
    lte                            shift and go to state 97
    gte                            shift and go to state 98
    and                            shift and go to state 99
    or                             shift and go to state 100
    not                            shift and go to state 101

state 154

    (99) condition -> type comparator expression .
    (26) expression -> expression . operation expression
    (98) condition -> expression . comparator expression
    (101) condition -> expression . comparator type
    (30) operation -> . plus
    (31) operation -> . minus
    (32) operation -> . times
    (33) operation -> . division
    (34) operation -> . div
    (35) operation -> . mod
    (36) operation -> . RANGE
    (62) comparator -> . eq
    (63) comparator -> . neq
    (64) comparator -> . lt
    (65) comparator -> . gt
    (66) comparator -> . lte
    (67) comparator -> . gte
    (68) comparator -> . and
    (69) comparator -> . or
    (70) comparator -> . not
    (56) plus -> . PLUS
    (57) minus -> . MINUS
    (58) times -> . TIMES
    (59) division -> . DIVISION
    (60) div -> . DIV
    (61) mod -> . MOD
    (71) eq -> . EQ
    (72) neq -> . NEQ
    (73) lt -> . LT
    (74) gt -> . GT
    (75) lte -> . LTE
    (76) gte -> . GTE
    (77) and -> . AND
    (78) or -> . OR
    (79) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 99 (condition -> type comparator expression .)
    DO              reduce using rule 99 (condition -> type comparator expression .)
    SEMICOLON       reduce using rule 99 (condition -> type comparator expression .)
    TO              reduce using rule 99 (condition -> type comparator expression .)
    DOWNTO          reduce using rule 99 (condition -> type comparator expression .)
    ELSE            reduce using rule 99 (condition -> type comparator expression .)
    RPAREN          reduce using rule 99 (condition -> type comparator expression .)
    RANGE           shift and go to state 108
    PLUS            shift and go to state 118
    MINUS           shift and go to state 119
    TIMES           shift and go to state 120
    DIVISION        shift and go to state 121
    DIV             shift and go to state 122
    MOD             shift and go to state 123
    EQ              shift and go to state 109
    NEQ             shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LTE             shift and go to state 113
    GTE             shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    NOT             shift and go to state 117

  ! RANGE           [ reduce using rule 99 (condition -> type comparator expression .) ]
  ! EQ              [ reduce using rule 99 (condition -> type comparator expression .) ]
  ! NEQ             [ reduce using rule 99 (condition -> type comparator expression .) ]
  ! LT              [ reduce using rule 99 (condition -> type comparator expression .) ]
  ! GT              [ reduce using rule 99 (condition -> type comparator expression .) ]
  ! LTE             [ reduce using rule 99 (condition -> type comparator expression .) ]
  ! GTE             [ reduce using rule 99 (condition -> type comparator expression .) ]
  ! AND             [ reduce using rule 99 (condition -> type comparator expression .) ]
  ! OR              [ reduce using rule 99 (condition -> type comparator expression .) ]
  ! NOT             [ reduce using rule 99 (condition -> type comparator expression .) ]
  ! PLUS            [ reduce using rule 99 (condition -> type comparator expression .) ]
  ! MINUS           [ reduce using rule 99 (condition -> type comparator expression .) ]
  ! TIMES           [ reduce using rule 99 (condition -> type comparator expression .) ]
  ! DIVISION        [ reduce using rule 99 (condition -> type comparator expression .) ]
  ! DIV             [ reduce using rule 99 (condition -> type comparator expression .) ]
  ! MOD             [ reduce using rule 99 (condition -> type comparator expression .) ]

    comparator                     shift and go to state 91
    operation                      shift and go to state 92
    plus                           shift and go to state 102
    minus                          shift and go to state 103
    times                          shift and go to state 104
    division                       shift and go to state 105
    div                            shift and go to state 106
    mod                            shift and go to state 107
    eq                             shift and go to state 93
    neq                            shift and go to state 94
    lt                             shift and go to state 95
    gt                             shift and go to state 96
    lte                            shift and go to state 97
    gte                            shift and go to state 98
    and                            shift and go to state 99
    or                             shift and go to state 100
    not                            shift and go to state 101

state 155

    (24) expression -> type operation type .

    RANGE           reduce using rule 24 (expression -> type operation type .)
    EQ              reduce using rule 24 (expression -> type operation type .)
    NEQ             reduce using rule 24 (expression -> type operation type .)
    LT              reduce using rule 24 (expression -> type operation type .)
    GT              reduce using rule 24 (expression -> type operation type .)
    LTE             reduce using rule 24 (expression -> type operation type .)
    GTE             reduce using rule 24 (expression -> type operation type .)
    AND             reduce using rule 24 (expression -> type operation type .)
    OR              reduce using rule 24 (expression -> type operation type .)
    NOT             reduce using rule 24 (expression -> type operation type .)
    PLUS            reduce using rule 24 (expression -> type operation type .)
    MINUS           reduce using rule 24 (expression -> type operation type .)
    TIMES           reduce using rule 24 (expression -> type operation type .)
    DIVISION        reduce using rule 24 (expression -> type operation type .)
    DIV             reduce using rule 24 (expression -> type operation type .)
    MOD             reduce using rule 24 (expression -> type operation type .)
    SEMICOLON       reduce using rule 24 (expression -> type operation type .)
    TO              reduce using rule 24 (expression -> type operation type .)
    DOWNTO          reduce using rule 24 (expression -> type operation type .)
    ELSE            reduce using rule 24 (expression -> type operation type .)
    RPAREN          reduce using rule 24 (expression -> type operation type .)
    THEN            reduce using rule 24 (expression -> type operation type .)
    DO              reduce using rule 24 (expression -> type operation type .)


state 156

    (29) expression_paren -> LPAREN expression RPAREN .

    RANGE           reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    EQ              reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    LT              reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    GT              reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    LTE             reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    GTE             reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    AND             reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    OR              reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    NOT             reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    DIVISION        reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    DIV             reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    MOD             reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    TO              reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    THEN            reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)
    DO              reduce using rule 29 (expression_paren -> LPAREN expression RPAREN .)


state 157

    (88) arg_list -> IDENTIFIER . COMMA arg_list
    (89) arg_list -> IDENTIFIER .

    COMMA           shift and go to state 177
    RPAREN          reduce using rule 89 (arg_list -> IDENTIFIER .)


state 158

    (87) func_call -> IDENTIFIER LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 178


state 159

    (110) while_loop -> WHILE condition DO statement .

    SEMICOLON       reduce using rule 110 (while_loop -> WHILE condition DO statement .)
    ELSE            reduce using rule 110 (while_loop -> WHILE condition DO statement .)


state 160

    (111) while_loop -> WHILE condition DO if_body .

    SEMICOLON       reduce using rule 111 (while_loop -> WHILE condition DO if_body .)
    ELSE            reduce using rule 111 (while_loop -> WHILE condition DO if_body .)


state 161

    (106) for_loop -> FOR assignment to type . DO statement
    (107) for_loop -> FOR assignment to type . DO if_body

    DO              shift and go to state 179


state 162

    (108) for_loop -> FOR assignment downto type . DO statement
    (109) for_loop -> FOR assignment downto type . DO if_body

    DO              shift and go to state 180


state 163

    (112) readln -> READLN LPAREN type RPAREN .

    SEMICOLON       reduce using rule 112 (readln -> READLN LPAREN type RPAREN .)
    ELSE            reduce using rule 112 (readln -> READLN LPAREN type RPAREN .)


state 164

    (86) func_body -> BEGIN statements END .

    SEMICOLON       reduce using rule 86 (func_body -> BEGIN statements END .)


state 165

    (91) procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .

    VAR             reduce using rule 91 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)
    BEGIN           reduce using rule 91 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)
    PROCEDURE       reduce using rule 91 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)
    FUNCTION        reduce using rule 91 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)


state 166

    (92) procedure_body -> BEGIN statements . END

    END             shift and go to state 181


state 167

    (85) func_arg -> IDENTIFIER COLON . type_name
    (37) type_name -> . NINTEGER
    (38) type_name -> . NREAL
    (39) type_name -> . NSTRING
    (40) type_name -> . NCHAR
    (41) type_name -> . NBOOLEAN
    (42) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 73
    NREAL           shift and go to state 74
    NSTRING         shift and go to state 75
    NCHAR           shift and go to state 76
    NBOOLEAN        shift and go to state 77
    ARRAY           shift and go to state 79

    type_name                      shift and go to state 182
    array_type                     shift and go to state 78

state 168

    (81) func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN . COLON type_name

    COLON           shift and go to state 183


state 169

    (82) func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON . type_name
    (37) type_name -> . NINTEGER
    (38) type_name -> . NREAL
    (39) type_name -> . NSTRING
    (40) type_name -> . NCHAR
    (41) type_name -> . NBOOLEAN
    (42) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 73
    NREAL           shift and go to state 74
    NSTRING         shift and go to state 75
    NCHAR           shift and go to state 76
    NBOOLEAN        shift and go to state 77
    ARRAY           shift and go to state 79

    type_name                      shift and go to state 184
    array_type                     shift and go to state 78

state 170

    (83) func_args -> func_arg COMMA . func_args
    (83) func_args -> . func_arg COMMA func_args
    (84) func_args -> . func_arg
    (85) func_arg -> . IDENTIFIER COLON type_name

    IDENTIFIER      shift and go to state 139

    func_arg                       shift and go to state 142
    func_args                      shift and go to state 185

state 171

    (7) variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration .

    BEGIN           reduce using rule 7 (variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration .)


state 172

    (11) array_type -> ARRAY LBRACKET type . RANGE type RBRACKET OF type_name

    RANGE           shift and go to state 186


state 173

    (114) writeln_args -> type COMMA writeln_args .

    RPAREN          reduce using rule 114 (writeln_args -> type COMMA writeln_args .)


state 174

    (95) cond_if -> IF condition THEN statement ELSE . statement
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (113) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (93) procedure_call -> . IDENTIFIER
    (94) cond_if -> . IF condition THEN statement
    (95) cond_if -> . IF condition THEN statement ELSE statement
    (96) cond_if -> . IF condition THEN if_body
    (97) cond_if -> . IF condition THEN if_body ELSE if_body
    (110) while_loop -> . WHILE condition DO statement
    (111) while_loop -> . WHILE condition DO if_body
    (106) for_loop -> . FOR assignment to type DO statement
    (107) for_loop -> . FOR assignment to type DO if_body
    (108) for_loop -> . FOR assignment downto type DO statement
    (109) for_loop -> . FOR assignment downto type DO if_body
    (112) readln -> . READLN LPAREN type RPAREN

    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    statement                      shift and go to state 187
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 175

    (97) cond_if -> IF condition THEN if_body ELSE . if_body
    (103) if_body -> . BEGIN statements END

    BEGIN           shift and go to state 149

    if_body                        shift and go to state 188

state 176

    (103) if_body -> BEGIN statements . END

    END             shift and go to state 189


state 177

    (88) arg_list -> IDENTIFIER COMMA . arg_list
    (88) arg_list -> . IDENTIFIER COMMA arg_list
    (89) arg_list -> . IDENTIFIER
    (90) arg_list -> .

    IDENTIFIER      shift and go to state 157
    RPAREN          reduce using rule 90 (arg_list -> .)

    arg_list                       shift and go to state 190

state 178

    (87) func_call -> IDENTIFIER LPAREN arg_list RPAREN .

    RANGE           reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    EQ              reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    LT              reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    GT              reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    LTE             reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    GTE             reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    AND             reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    OR              reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    NOT             reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DIVISION        reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DIV             reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    MOD             reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    THEN            reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DO              reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    SEMICOLON       reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    TO              reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DOWNTO          reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    ELSE            reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    RBRACKET        reduce using rule 87 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)


state 179

    (106) for_loop -> FOR assignment to type DO . statement
    (107) for_loop -> FOR assignment to type DO . if_body
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (103) if_body -> . BEGIN statements END
    (113) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (93) procedure_call -> . IDENTIFIER
    (94) cond_if -> . IF condition THEN statement
    (95) cond_if -> . IF condition THEN statement ELSE statement
    (96) cond_if -> . IF condition THEN if_body
    (97) cond_if -> . IF condition THEN if_body ELSE if_body
    (110) while_loop -> . WHILE condition DO statement
    (111) while_loop -> . WHILE condition DO if_body
    (106) for_loop -> . FOR assignment to type DO statement
    (107) for_loop -> . FOR assignment to type DO if_body
    (108) for_loop -> . FOR assignment downto type DO statement
    (109) for_loop -> . FOR assignment downto type DO if_body
    (112) readln -> . READLN LPAREN type RPAREN

    BEGIN           shift and go to state 149
    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    assignment                     shift and go to state 23
    statement                      shift and go to state 191
    if_body                        shift and go to state 192
    writeln                        shift and go to state 22
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 180

    (108) for_loop -> FOR assignment downto type DO . statement
    (109) for_loop -> FOR assignment downto type DO . if_body
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (103) if_body -> . BEGIN statements END
    (113) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (93) procedure_call -> . IDENTIFIER
    (94) cond_if -> . IF condition THEN statement
    (95) cond_if -> . IF condition THEN statement ELSE statement
    (96) cond_if -> . IF condition THEN if_body
    (97) cond_if -> . IF condition THEN if_body ELSE if_body
    (110) while_loop -> . WHILE condition DO statement
    (111) while_loop -> . WHILE condition DO if_body
    (106) for_loop -> . FOR assignment to type DO statement
    (107) for_loop -> . FOR assignment to type DO if_body
    (108) for_loop -> . FOR assignment downto type DO statement
    (109) for_loop -> . FOR assignment downto type DO if_body
    (112) readln -> . READLN LPAREN type RPAREN

    BEGIN           shift and go to state 149
    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    assignment                     shift and go to state 23
    statement                      shift and go to state 193
    if_body                        shift and go to state 194
    writeln                        shift and go to state 22
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 181

    (92) procedure_body -> BEGIN statements END .

    SEMICOLON       reduce using rule 92 (procedure_body -> BEGIN statements END .)


state 182

    (85) func_arg -> IDENTIFIER COLON type_name .

    COMMA           reduce using rule 85 (func_arg -> IDENTIFIER COLON type_name .)
    RPAREN          reduce using rule 85 (func_arg -> IDENTIFIER COLON type_name .)


state 183

    (81) func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON . type_name
    (37) type_name -> . NINTEGER
    (38) type_name -> . NREAL
    (39) type_name -> . NSTRING
    (40) type_name -> . NCHAR
    (41) type_name -> . NBOOLEAN
    (42) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 73
    NREAL           shift and go to state 74
    NSTRING         shift and go to state 75
    NCHAR           shift and go to state 76
    NBOOLEAN        shift and go to state 77
    ARRAY           shift and go to state 79

    type_name                      shift and go to state 195
    array_type                     shift and go to state 78

state 184

    (82) func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name .

    SEMICOLON       reduce using rule 82 (func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name .)


state 185

    (83) func_args -> func_arg COMMA func_args .

    RPAREN          reduce using rule 83 (func_args -> func_arg COMMA func_args .)


state 186

    (11) array_type -> ARRAY LBRACKET type RANGE . type RBRACKET OF type_name
    (43) type -> . integer
    (44) type -> . real
    (45) type -> . string
    (46) type -> . char
    (47) type -> . boolean
    (48) type -> . identifier
    (49) type -> . func_call
    (50) integer -> . INTEGER
    (51) real -> . REAL
    (52) string -> . STRING
    (53) char -> . CHAR
    (54) boolean -> . BOOLEAN
    (55) identifier -> . IDENTIFIER
    (87) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 85

    type                           shift and go to state 196
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 84

state 187

    (95) cond_if -> IF condition THEN statement ELSE statement .

    SEMICOLON       reduce using rule 95 (cond_if -> IF condition THEN statement ELSE statement .)
    ELSE            reduce using rule 95 (cond_if -> IF condition THEN statement ELSE statement .)


state 188

    (97) cond_if -> IF condition THEN if_body ELSE if_body .

    SEMICOLON       reduce using rule 97 (cond_if -> IF condition THEN if_body ELSE if_body .)
    ELSE            reduce using rule 97 (cond_if -> IF condition THEN if_body ELSE if_body .)


state 189

    (103) if_body -> BEGIN statements END .

    ELSE            reduce using rule 103 (if_body -> BEGIN statements END .)
    SEMICOLON       reduce using rule 103 (if_body -> BEGIN statements END .)


state 190

    (88) arg_list -> IDENTIFIER COMMA arg_list .

    RPAREN          reduce using rule 88 (arg_list -> IDENTIFIER COMMA arg_list .)


state 191

    (106) for_loop -> FOR assignment to type DO statement .

    SEMICOLON       reduce using rule 106 (for_loop -> FOR assignment to type DO statement .)
    ELSE            reduce using rule 106 (for_loop -> FOR assignment to type DO statement .)


state 192

    (107) for_loop -> FOR assignment to type DO if_body .

    SEMICOLON       reduce using rule 107 (for_loop -> FOR assignment to type DO if_body .)
    ELSE            reduce using rule 107 (for_loop -> FOR assignment to type DO if_body .)


state 193

    (108) for_loop -> FOR assignment downto type DO statement .

    SEMICOLON       reduce using rule 108 (for_loop -> FOR assignment downto type DO statement .)
    ELSE            reduce using rule 108 (for_loop -> FOR assignment downto type DO statement .)


state 194

    (109) for_loop -> FOR assignment downto type DO if_body .

    SEMICOLON       reduce using rule 109 (for_loop -> FOR assignment downto type DO if_body .)
    ELSE            reduce using rule 109 (for_loop -> FOR assignment downto type DO if_body .)


state 195

    (81) func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name .

    SEMICOLON       reduce using rule 81 (func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name .)


state 196

    (11) array_type -> ARRAY LBRACKET type RANGE type . RBRACKET OF type_name

    RBRACKET        shift and go to state 197


state 197

    (11) array_type -> ARRAY LBRACKET type RANGE type RBRACKET . OF type_name

    OF              shift and go to state 198


state 198

    (11) array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF . type_name
    (37) type_name -> . NINTEGER
    (38) type_name -> . NREAL
    (39) type_name -> . NSTRING
    (40) type_name -> . NCHAR
    (41) type_name -> . NBOOLEAN
    (42) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 73
    NREAL           shift and go to state 74
    NSTRING         shift and go to state 75
    NCHAR           shift and go to state 76
    NBOOLEAN        shift and go to state 77
    ARRAY           shift and go to state 79

    type_name                      shift and go to state 199
    array_type                     shift and go to state 78

state 199

    (11) array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .

    SEMICOLON       reduce using rule 11 (array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .)
    COMMA           reduce using rule 11 (array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .)
    RPAREN          reduce using rule 11 (array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RANGE in state 48 resolved as shift
WARNING: shift/reduce conflict for EQ in state 48 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 48 resolved as shift
WARNING: shift/reduce conflict for LT in state 48 resolved as shift
WARNING: shift/reduce conflict for GT in state 48 resolved as shift
WARNING: shift/reduce conflict for LTE in state 48 resolved as shift
WARNING: shift/reduce conflict for GTE in state 48 resolved as shift
WARNING: shift/reduce conflict for AND in state 48 resolved as shift
WARNING: shift/reduce conflict for OR in state 48 resolved as shift
WARNING: shift/reduce conflict for NOT in state 48 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 48 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 48 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 48 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 48 resolved as shift
WARNING: shift/reduce conflict for DIV in state 48 resolved as shift
WARNING: shift/reduce conflict for MOD in state 48 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 86 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 86 resolved as shift
WARNING: shift/reduce conflict for DIV in state 86 resolved as shift
WARNING: shift/reduce conflict for MOD in state 86 resolved as shift
WARNING: shift/reduce conflict for EQ in state 86 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 86 resolved as shift
WARNING: shift/reduce conflict for LT in state 86 resolved as shift
WARNING: shift/reduce conflict for GT in state 86 resolved as shift
WARNING: shift/reduce conflict for LTE in state 86 resolved as shift
WARNING: shift/reduce conflict for GTE in state 86 resolved as shift
WARNING: shift/reduce conflict for AND in state 86 resolved as shift
WARNING: shift/reduce conflict for OR in state 86 resolved as shift
WARNING: shift/reduce conflict for NOT in state 86 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 127 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 127 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 127 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 127 resolved as shift
WARNING: shift/reduce conflict for DIV in state 127 resolved as shift
WARNING: shift/reduce conflict for MOD in state 127 resolved as shift
WARNING: shift/reduce conflict for EQ in state 127 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 127 resolved as shift
WARNING: shift/reduce conflict for LT in state 127 resolved as shift
WARNING: shift/reduce conflict for GT in state 127 resolved as shift
WARNING: shift/reduce conflict for LTE in state 127 resolved as shift
WARNING: shift/reduce conflict for GTE in state 127 resolved as shift
WARNING: shift/reduce conflict for AND in state 127 resolved as shift
WARNING: shift/reduce conflict for OR in state 127 resolved as shift
WARNING: shift/reduce conflict for NOT in state 127 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 147 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 148 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 150 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 150 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 150 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 150 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 150 resolved as shift
WARNING: shift/reduce conflict for DIV in state 150 resolved as shift
WARNING: shift/reduce conflict for MOD in state 150 resolved as shift
WARNING: shift/reduce conflict for EQ in state 150 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 150 resolved as shift
WARNING: shift/reduce conflict for LT in state 150 resolved as shift
WARNING: shift/reduce conflict for GT in state 150 resolved as shift
WARNING: shift/reduce conflict for LTE in state 150 resolved as shift
WARNING: shift/reduce conflict for GTE in state 150 resolved as shift
WARNING: shift/reduce conflict for AND in state 150 resolved as shift
WARNING: shift/reduce conflict for OR in state 150 resolved as shift
WARNING: shift/reduce conflict for NOT in state 150 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 151 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 151 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 151 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 151 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 151 resolved as shift
WARNING: shift/reduce conflict for DIV in state 151 resolved as shift
WARNING: shift/reduce conflict for MOD in state 151 resolved as shift
WARNING: shift/reduce conflict for EQ in state 151 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 151 resolved as shift
WARNING: shift/reduce conflict for LT in state 151 resolved as shift
WARNING: shift/reduce conflict for GT in state 151 resolved as shift
WARNING: shift/reduce conflict for LTE in state 151 resolved as shift
WARNING: shift/reduce conflict for GTE in state 151 resolved as shift
WARNING: shift/reduce conflict for AND in state 151 resolved as shift
WARNING: shift/reduce conflict for OR in state 151 resolved as shift
WARNING: shift/reduce conflict for NOT in state 151 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 152 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 152 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 152 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 152 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 152 resolved as shift
WARNING: shift/reduce conflict for DIV in state 152 resolved as shift
WARNING: shift/reduce conflict for MOD in state 152 resolved as shift
WARNING: shift/reduce conflict for EQ in state 152 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 152 resolved as shift
WARNING: shift/reduce conflict for LT in state 152 resolved as shift
WARNING: shift/reduce conflict for GT in state 152 resolved as shift
WARNING: shift/reduce conflict for LTE in state 152 resolved as shift
WARNING: shift/reduce conflict for GTE in state 152 resolved as shift
WARNING: shift/reduce conflict for AND in state 152 resolved as shift
WARNING: shift/reduce conflict for OR in state 152 resolved as shift
WARNING: shift/reduce conflict for NOT in state 152 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 153 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 153 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 153 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 153 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 153 resolved as shift
WARNING: shift/reduce conflict for DIV in state 153 resolved as shift
WARNING: shift/reduce conflict for MOD in state 153 resolved as shift
WARNING: shift/reduce conflict for EQ in state 153 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 153 resolved as shift
WARNING: shift/reduce conflict for LT in state 153 resolved as shift
WARNING: shift/reduce conflict for GT in state 153 resolved as shift
WARNING: shift/reduce conflict for LTE in state 153 resolved as shift
WARNING: shift/reduce conflict for GTE in state 153 resolved as shift
WARNING: shift/reduce conflict for AND in state 153 resolved as shift
WARNING: shift/reduce conflict for OR in state 153 resolved as shift
WARNING: shift/reduce conflict for NOT in state 153 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 154 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 154 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 154 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 154 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 154 resolved as shift
WARNING: shift/reduce conflict for DIV in state 154 resolved as shift
WARNING: shift/reduce conflict for MOD in state 154 resolved as shift
WARNING: shift/reduce conflict for EQ in state 154 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 154 resolved as shift
WARNING: shift/reduce conflict for LT in state 154 resolved as shift
WARNING: shift/reduce conflict for GT in state 154 resolved as shift
WARNING: shift/reduce conflict for LTE in state 154 resolved as shift
WARNING: shift/reduce conflict for GTE in state 154 resolved as shift
WARNING: shift/reduce conflict for AND in state 154 resolved as shift
WARNING: shift/reduce conflict for OR in state 154 resolved as shift
WARNING: shift/reduce conflict for NOT in state 154 resolved as shift
WARNING: reduce/reduce conflict in state 50 resolved using rule (expression -> func_call)
WARNING: rejected rule (type -> func_call) in state 50
WARNING: reduce/reduce conflict in state 86 resolved using rule (assignment -> IDENTIFIER ASSIGNMENT type)
WARNING: rejected rule (condition -> type) in state 86
WARNING: reduce/reduce conflict in state 88 resolved using rule (expression -> func_call)
WARNING: rejected rule (type -> func_call) in state 88
WARNING: reduce/reduce conflict in state 151 resolved using rule (condition -> expression comparator type)
WARNING: rejected rule (condition -> type) in state 151
WARNING: reduce/reduce conflict in state 153 resolved using rule (condition -> type comparator type)
WARNING: rejected rule (condition -> type) in state 153
