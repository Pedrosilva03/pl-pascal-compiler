Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    REPEAT
    UNTIL

Grammar

Rule 0     S' -> program
Rule 1     program -> header block DOT
Rule 2     header -> PROGRAM IDENTIFIER SEMICOLON
Rule 3     block -> VAR variable_declaration body
Rule 4     block -> body
Rule 5     block -> function block
Rule 6     block -> procedure block
Rule 7     variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration
Rule 8     variable_declaration -> identifier_list COLON type_name SEMICOLON
Rule 9     identifier_list -> IDENTIFIER COMMA identifier_list
Rule 10    identifier_list -> IDENTIFIER
Rule 11    array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name
Rule 12    body -> BEGIN statements END
Rule 13    statements -> statement SEMICOLON statements
Rule 14    statements -> statement SEMICOLON
Rule 15    statement -> writeln
Rule 16    statement -> assignment
Rule 17    statement -> procedure_call
Rule 18    statement -> cond_if
Rule 19    statement -> while_loop
Rule 20    statement -> for_loop
Rule 21    statement -> readln
Rule 22    assignment -> IDENTIFIER ASSIGNMENT type
Rule 23    assignment -> IDENTIFIER ASSIGNMENT expression
Rule 24    assignment -> IDENTIFIER ASSIGNMENT length
Rule 25    expression -> type operation type
Rule 26    expression -> expression_paren
Rule 27    expression -> expression operation expression
Rule 28    expression -> func_call
Rule 29    expression -> condition
Rule 30    expression_paren -> LPAREN expression RPAREN
Rule 31    operation -> plus
Rule 32    operation -> minus
Rule 33    operation -> times
Rule 34    operation -> division
Rule 35    operation -> div
Rule 36    operation -> mod
Rule 37    operation -> RANGE
Rule 38    type_name -> NINTEGER
Rule 39    type_name -> NREAL
Rule 40    type_name -> NSTRING
Rule 41    type_name -> NCHAR
Rule 42    type_name -> NBOOLEAN
Rule 43    type_name -> array_type
Rule 44    type -> integer
Rule 45    type -> real
Rule 46    type -> string
Rule 47    type -> char
Rule 48    type -> boolean
Rule 49    type -> identifier
Rule 50    type -> func_call
Rule 51    integer -> INTEGER
Rule 52    real -> REAL
Rule 53    string -> STRING
Rule 54    char -> CHAR
Rule 55    boolean -> BOOLEAN
Rule 56    identifier -> IDENTIFIER
Rule 57    plus -> PLUS
Rule 58    minus -> MINUS
Rule 59    times -> TIMES
Rule 60    division -> DIVISION
Rule 61    div -> DIV
Rule 62    mod -> MOD
Rule 63    comparator -> eq
Rule 64    comparator -> neq
Rule 65    comparator -> lt
Rule 66    comparator -> gt
Rule 67    comparator -> lte
Rule 68    comparator -> gte
Rule 69    comparator -> and
Rule 70    comparator -> or
Rule 71    comparator -> not
Rule 72    eq -> EQ
Rule 73    neq -> NEQ
Rule 74    lt -> LT
Rule 75    gt -> GT
Rule 76    lte -> LTE
Rule 77    gte -> GTE
Rule 78    and -> AND
Rule 79    or -> OR
Rule 80    not -> NOT
Rule 81    length -> LENGTH LPAREN type RPAREN
Rule 82    function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON
Rule 83    function -> func_header SEMICOLON func_body SEMICOLON
Rule 84    func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
Rule 85    func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name
Rule 86    func_args -> func_arg COMMA func_args
Rule 87    func_args -> func_arg
Rule 88    func_arg -> IDENTIFIER COLON type_name
Rule 89    func_variable_declaration -> identifier_list COLON type_name SEMICOLON func_variable_declaration
Rule 90    func_variable_declaration -> identifier_list COLON type_name SEMICOLON
Rule 91    func_body -> BEGIN statements END
Rule 92    func_call -> IDENTIFIER LPAREN arg_list RPAREN
Rule 93    arg_list -> IDENTIFIER COMMA arg_list
Rule 94    arg_list -> IDENTIFIER
Rule 95    arg_list -> <empty>
Rule 96    procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
Rule 97    procedure_body -> BEGIN statements END
Rule 98    procedure_call -> IDENTIFIER
Rule 99    cond_if -> IF condition THEN statement
Rule 100   cond_if -> IF condition THEN statement ELSE statement
Rule 101   cond_if -> IF condition THEN if_body
Rule 102   cond_if -> IF condition THEN if_body ELSE if_body
Rule 103   condition -> expression comparator expression
Rule 104   condition -> type comparator expression
Rule 105   condition -> type comparator type
Rule 106   condition -> expression comparator type
Rule 107   condition -> type
Rule 108   if_body -> BEGIN statements END
Rule 109   to -> TO
Rule 110   downto -> DOWNTO
Rule 111   for_loop -> FOR assignment to type DO statement
Rule 112   for_loop -> FOR assignment to type DO if_body
Rule 113   for_loop -> FOR assignment downto type DO statement
Rule 114   for_loop -> FOR assignment downto type DO if_body
Rule 115   while_loop -> WHILE condition DO statement
Rule 116   while_loop -> WHILE condition DO if_body
Rule 117   readln -> READLN LPAREN type RPAREN
Rule 118   writeln -> WRITELN LPAREN writeln_args RPAREN
Rule 119   writeln_args -> type COMMA writeln_args
Rule 120   writeln_args -> type

Terminals, with rules where they appear

AND                  : 78
ARRAY                : 11
ASSIGNMENT           : 22 23 24
BEGIN                : 12 91 97 108
BOOLEAN              : 55
CHAR                 : 54
COLON                : 7 8 84 85 88 89 90
COMMA                : 9 86 93 119
COMMENT              : 
DIV                  : 61
DIVISION             : 60
DO                   : 111 112 113 114 115 116
DOT                  : 1
DOWNTO               : 110
ELSE                 : 100 102
END                  : 12 91 97 108
EQ                   : 72
FOR                  : 111 112 113 114
FUNCTION             : 84 85
GT                   : 75
GTE                  : 77
IDENTIFIER           : 2 9 10 22 23 24 56 84 85 88 92 93 94 96 98
IF                   : 99 100 101 102
INTEGER              : 51
LBRACKET             : 11
LENGTH               : 81
LPAREN               : 30 81 84 85 92 117 118
LT                   : 74
LTE                  : 76
MINUS                : 58
MOD                  : 62
NBOOLEAN             : 42
NCHAR                : 41
NEQ                  : 73
NINTEGER             : 38
NOT                  : 80
NREAL                : 39
NSTRING              : 40
OF                   : 11
OR                   : 79
PLUS                 : 57
PROCEDURE            : 96
PROGRAM              : 2
RANGE                : 11 37
RBRACKET             : 11
READLN               : 117
REAL                 : 52
REPEAT               : 
RPAREN               : 30 81 84 85 92 117 118
SEMICOLON            : 2 7 8 13 14 82 82 83 83 89 90 96 96
STRING               : 53
THEN                 : 99 100 101 102
TIMES                : 59
TO                   : 109
UNTIL                : 
VAR                  : 3 82
WHILE                : 115 116
WRITELN              : 118
error                : 

Nonterminals, with rules where they appear

and                  : 69
arg_list             : 92 93
array_type           : 43
assignment           : 16 111 112 113 114
block                : 1 5 6
body                 : 3 4
boolean              : 48
char                 : 47
comparator           : 103 104 105 106
cond_if              : 18
condition            : 29 99 100 101 102 115 116
div                  : 35
division             : 34
downto               : 113 114
eq                   : 63
expression           : 23 27 27 30 103 103 104 106
expression_paren     : 26
for_loop             : 20
func_arg             : 86 87
func_args            : 84 86
func_body            : 82 83
func_call            : 28 50
func_header          : 82 83
func_variable_declaration : 82 89
function             : 5
gt                   : 66
gte                  : 68
header               : 1
identifier           : 49
identifier_list      : 7 8 9 89 90
if_body              : 101 102 102 112 114 116
integer              : 44
length               : 24
lt                   : 65
lte                  : 67
minus                : 32
mod                  : 36
neq                  : 64
not                  : 71
operation            : 25 27
or                   : 70
plus                 : 31
procedure            : 6
procedure_body       : 96
procedure_call       : 17
program              : 0
readln               : 21
real                 : 45
statement            : 13 14 99 100 100 111 113 115
statements           : 12 13 91 97 108
string               : 46
times                : 33
to                   : 111 112
type                 : 11 11 22 25 25 81 104 105 105 106 107 111 112 113 114 117 119 120
type_name            : 7 8 11 84 85 88 89 90
variable_declaration : 3 7
while_loop           : 19
writeln              : 15
writeln_args         : 118 119

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . header block DOT
    (2) header -> . PROGRAM IDENTIFIER SEMICOLON

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    header                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> header . block DOT
    (3) block -> . VAR variable_declaration body
    (4) block -> . body
    (5) block -> . function block
    (6) block -> . procedure block
    (12) body -> . BEGIN statements END
    (82) function -> . func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON
    (83) function -> . func_header SEMICOLON func_body SEMICOLON
    (96) procedure -> . PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
    (84) func_header -> . FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (85) func_header -> . FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name

    VAR             shift and go to state 5
    BEGIN           shift and go to state 9
    PROCEDURE       shift and go to state 11
    FUNCTION        shift and go to state 12

    block                          shift and go to state 4
    body                           shift and go to state 6
    function                       shift and go to state 7
    procedure                      shift and go to state 8
    func_header                    shift and go to state 10

state 3

    (2) header -> PROGRAM . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 13


state 4

    (1) program -> header block . DOT

    DOT             shift and go to state 14


state 5

    (3) block -> VAR . variable_declaration body
    (7) variable_declaration -> . identifier_list COLON type_name SEMICOLON variable_declaration
    (8) variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    variable_declaration           shift and go to state 15
    identifier_list                shift and go to state 16

state 6

    (4) block -> body .

    DOT             reduce using rule 4 (block -> body .)


state 7

    (5) block -> function . block
    (3) block -> . VAR variable_declaration body
    (4) block -> . body
    (5) block -> . function block
    (6) block -> . procedure block
    (12) body -> . BEGIN statements END
    (82) function -> . func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON
    (83) function -> . func_header SEMICOLON func_body SEMICOLON
    (96) procedure -> . PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
    (84) func_header -> . FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (85) func_header -> . FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name

    VAR             shift and go to state 5
    BEGIN           shift and go to state 9
    PROCEDURE       shift and go to state 11
    FUNCTION        shift and go to state 12

    function                       shift and go to state 7
    block                          shift and go to state 18
    body                           shift and go to state 6
    procedure                      shift and go to state 8
    func_header                    shift and go to state 10

state 8

    (6) block -> procedure . block
    (3) block -> . VAR variable_declaration body
    (4) block -> . body
    (5) block -> . function block
    (6) block -> . procedure block
    (12) body -> . BEGIN statements END
    (82) function -> . func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON
    (83) function -> . func_header SEMICOLON func_body SEMICOLON
    (96) procedure -> . PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON
    (84) func_header -> . FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (85) func_header -> . FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name

    VAR             shift and go to state 5
    BEGIN           shift and go to state 9
    PROCEDURE       shift and go to state 11
    FUNCTION        shift and go to state 12

    procedure                      shift and go to state 8
    block                          shift and go to state 19
    body                           shift and go to state 6
    function                       shift and go to state 7
    func_header                    shift and go to state 10

state 9

    (12) body -> BEGIN . statements END
    (13) statements -> . statement SEMICOLON statements
    (14) statements -> . statement SEMICOLON
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (118) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (24) assignment -> . IDENTIFIER ASSIGNMENT length
    (98) procedure_call -> . IDENTIFIER
    (99) cond_if -> . IF condition THEN statement
    (100) cond_if -> . IF condition THEN statement ELSE statement
    (101) cond_if -> . IF condition THEN if_body
    (102) cond_if -> . IF condition THEN if_body ELSE if_body
    (115) while_loop -> . WHILE condition DO statement
    (116) while_loop -> . WHILE condition DO if_body
    (111) for_loop -> . FOR assignment to type DO statement
    (112) for_loop -> . FOR assignment to type DO if_body
    (113) for_loop -> . FOR assignment downto type DO statement
    (114) for_loop -> . FOR assignment downto type DO if_body
    (117) readln -> . READLN LPAREN type RPAREN

    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    statements                     shift and go to state 20
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 10

    (82) function -> func_header . SEMICOLON VAR func_variable_declaration func_body SEMICOLON
    (83) function -> func_header . SEMICOLON func_body SEMICOLON

    SEMICOLON       shift and go to state 35


state 11

    (96) procedure -> PROCEDURE . IDENTIFIER SEMICOLON procedure_body SEMICOLON

    IDENTIFIER      shift and go to state 36


state 12

    (84) func_header -> FUNCTION . IDENTIFIER LPAREN func_args RPAREN COLON type_name
    (85) func_header -> FUNCTION . IDENTIFIER LPAREN RPAREN COLON type_name

    IDENTIFIER      shift and go to state 37


state 13

    (2) header -> PROGRAM IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 38


state 14

    (1) program -> header block DOT .

    $end            reduce using rule 1 (program -> header block DOT .)


state 15

    (3) block -> VAR variable_declaration . body
    (12) body -> . BEGIN statements END

    BEGIN           shift and go to state 9

    body                           shift and go to state 39

state 16

    (7) variable_declaration -> identifier_list . COLON type_name SEMICOLON variable_declaration
    (8) variable_declaration -> identifier_list . COLON type_name SEMICOLON

    COLON           shift and go to state 40


state 17

    (9) identifier_list -> IDENTIFIER . COMMA identifier_list
    (10) identifier_list -> IDENTIFIER .

    COMMA           shift and go to state 41
    COLON           reduce using rule 10 (identifier_list -> IDENTIFIER .)


state 18

    (5) block -> function block .

    DOT             reduce using rule 5 (block -> function block .)


state 19

    (6) block -> procedure block .

    DOT             reduce using rule 6 (block -> procedure block .)


state 20

    (12) body -> BEGIN statements . END

    END             shift and go to state 42


state 21

    (13) statements -> statement . SEMICOLON statements
    (14) statements -> statement . SEMICOLON

    SEMICOLON       shift and go to state 43


state 22

    (15) statement -> writeln .

    SEMICOLON       reduce using rule 15 (statement -> writeln .)
    ELSE            reduce using rule 15 (statement -> writeln .)


state 23

    (16) statement -> assignment .

    SEMICOLON       reduce using rule 16 (statement -> assignment .)
    ELSE            reduce using rule 16 (statement -> assignment .)


state 24

    (17) statement -> procedure_call .

    SEMICOLON       reduce using rule 17 (statement -> procedure_call .)
    ELSE            reduce using rule 17 (statement -> procedure_call .)


state 25

    (18) statement -> cond_if .

    SEMICOLON       reduce using rule 18 (statement -> cond_if .)
    ELSE            reduce using rule 18 (statement -> cond_if .)


state 26

    (19) statement -> while_loop .

    SEMICOLON       reduce using rule 19 (statement -> while_loop .)
    ELSE            reduce using rule 19 (statement -> while_loop .)


state 27

    (20) statement -> for_loop .

    SEMICOLON       reduce using rule 20 (statement -> for_loop .)
    ELSE            reduce using rule 20 (statement -> for_loop .)


state 28

    (21) statement -> readln .

    SEMICOLON       reduce using rule 21 (statement -> readln .)
    ELSE            reduce using rule 21 (statement -> readln .)


state 29

    (118) writeln -> WRITELN . LPAREN writeln_args RPAREN

    LPAREN          shift and go to state 44


state 30

    (22) assignment -> IDENTIFIER . ASSIGNMENT type
    (23) assignment -> IDENTIFIER . ASSIGNMENT expression
    (24) assignment -> IDENTIFIER . ASSIGNMENT length
    (98) procedure_call -> IDENTIFIER .

    ASSIGNMENT      shift and go to state 45
    SEMICOLON       reduce using rule 98 (procedure_call -> IDENTIFIER .)
    ELSE            reduce using rule 98 (procedure_call -> IDENTIFIER .)


state 31

    (99) cond_if -> IF . condition THEN statement
    (100) cond_if -> IF . condition THEN statement ELSE statement
    (101) cond_if -> IF . condition THEN if_body
    (102) cond_if -> IF . condition THEN if_body ELSE if_body
    (103) condition -> . expression comparator expression
    (104) condition -> . type comparator expression
    (105) condition -> . type comparator type
    (106) condition -> . expression comparator type
    (107) condition -> . type
    (25) expression -> . type operation type
    (26) expression -> . expression_paren
    (27) expression -> . expression operation expression
    (28) expression -> . func_call
    (29) expression -> . condition
    (44) type -> . integer
    (45) type -> . real
    (46) type -> . string
    (47) type -> . char
    (48) type -> . boolean
    (49) type -> . identifier
    (50) type -> . func_call
    (30) expression_paren -> . LPAREN expression RPAREN
    (92) func_call -> . IDENTIFIER LPAREN arg_list RPAREN
    (51) integer -> . INTEGER
    (52) real -> . REAL
    (53) string -> . STRING
    (54) char -> . CHAR
    (55) boolean -> . BOOLEAN
    (56) identifier -> . IDENTIFIER

    LPAREN          shift and go to state 57
    IDENTIFIER      shift and go to state 58
    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63

    condition                      shift and go to state 46
    expression                     shift and go to state 47
    type                           shift and go to state 48
    expression_paren               shift and go to state 49
    func_call                      shift and go to state 50
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56

state 32

    (115) while_loop -> WHILE . condition DO statement
    (116) while_loop -> WHILE . condition DO if_body
    (103) condition -> . expression comparator expression
    (104) condition -> . type comparator expression
    (105) condition -> . type comparator type
    (106) condition -> . expression comparator type
    (107) condition -> . type
    (25) expression -> . type operation type
    (26) expression -> . expression_paren
    (27) expression -> . expression operation expression
    (28) expression -> . func_call
    (29) expression -> . condition
    (44) type -> . integer
    (45) type -> . real
    (46) type -> . string
    (47) type -> . char
    (48) type -> . boolean
    (49) type -> . identifier
    (50) type -> . func_call
    (30) expression_paren -> . LPAREN expression RPAREN
    (92) func_call -> . IDENTIFIER LPAREN arg_list RPAREN
    (51) integer -> . INTEGER
    (52) real -> . REAL
    (53) string -> . STRING
    (54) char -> . CHAR
    (55) boolean -> . BOOLEAN
    (56) identifier -> . IDENTIFIER

    LPAREN          shift and go to state 57
    IDENTIFIER      shift and go to state 58
    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63

    condition                      shift and go to state 64
    expression                     shift and go to state 47
    type                           shift and go to state 48
    expression_paren               shift and go to state 49
    func_call                      shift and go to state 50
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56

state 33

    (111) for_loop -> FOR . assignment to type DO statement
    (112) for_loop -> FOR . assignment to type DO if_body
    (113) for_loop -> FOR . assignment downto type DO statement
    (114) for_loop -> FOR . assignment downto type DO if_body
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (24) assignment -> . IDENTIFIER ASSIGNMENT length

    IDENTIFIER      shift and go to state 66

    assignment                     shift and go to state 65

state 34

    (117) readln -> READLN . LPAREN type RPAREN

    LPAREN          shift and go to state 67


state 35

    (82) function -> func_header SEMICOLON . VAR func_variable_declaration func_body SEMICOLON
    (83) function -> func_header SEMICOLON . func_body SEMICOLON
    (91) func_body -> . BEGIN statements END

    VAR             shift and go to state 68
    BEGIN           shift and go to state 70

    func_body                      shift and go to state 69

state 36

    (96) procedure -> PROCEDURE IDENTIFIER . SEMICOLON procedure_body SEMICOLON

    SEMICOLON       shift and go to state 71


state 37

    (84) func_header -> FUNCTION IDENTIFIER . LPAREN func_args RPAREN COLON type_name
    (85) func_header -> FUNCTION IDENTIFIER . LPAREN RPAREN COLON type_name

    LPAREN          shift and go to state 72


state 38

    (2) header -> PROGRAM IDENTIFIER SEMICOLON .

    VAR             reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)
    BEGIN           reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)
    PROCEDURE       reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)


state 39

    (3) block -> VAR variable_declaration body .

    DOT             reduce using rule 3 (block -> VAR variable_declaration body .)


state 40

    (7) variable_declaration -> identifier_list COLON . type_name SEMICOLON variable_declaration
    (8) variable_declaration -> identifier_list COLON . type_name SEMICOLON
    (38) type_name -> . NINTEGER
    (39) type_name -> . NREAL
    (40) type_name -> . NSTRING
    (41) type_name -> . NCHAR
    (42) type_name -> . NBOOLEAN
    (43) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 74
    NREAL           shift and go to state 75
    NSTRING         shift and go to state 76
    NCHAR           shift and go to state 77
    NBOOLEAN        shift and go to state 78
    ARRAY           shift and go to state 80

    type_name                      shift and go to state 73
    array_type                     shift and go to state 79

state 41

    (9) identifier_list -> IDENTIFIER COMMA . identifier_list
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    identifier_list                shift and go to state 81

state 42

    (12) body -> BEGIN statements END .

    DOT             reduce using rule 12 (body -> BEGIN statements END .)


state 43

    (13) statements -> statement SEMICOLON . statements
    (14) statements -> statement SEMICOLON .
    (13) statements -> . statement SEMICOLON statements
    (14) statements -> . statement SEMICOLON
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (118) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (24) assignment -> . IDENTIFIER ASSIGNMENT length
    (98) procedure_call -> . IDENTIFIER
    (99) cond_if -> . IF condition THEN statement
    (100) cond_if -> . IF condition THEN statement ELSE statement
    (101) cond_if -> . IF condition THEN if_body
    (102) cond_if -> . IF condition THEN if_body ELSE if_body
    (115) while_loop -> . WHILE condition DO statement
    (116) while_loop -> . WHILE condition DO if_body
    (111) for_loop -> . FOR assignment to type DO statement
    (112) for_loop -> . FOR assignment to type DO if_body
    (113) for_loop -> . FOR assignment downto type DO statement
    (114) for_loop -> . FOR assignment downto type DO if_body
    (117) readln -> . READLN LPAREN type RPAREN

    END             reduce using rule 14 (statements -> statement SEMICOLON .)
    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    statement                      shift and go to state 21
    statements                     shift and go to state 82
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 44

    (118) writeln -> WRITELN LPAREN . writeln_args RPAREN
    (119) writeln_args -> . type COMMA writeln_args
    (120) writeln_args -> . type
    (44) type -> . integer
    (45) type -> . real
    (46) type -> . string
    (47) type -> . char
    (48) type -> . boolean
    (49) type -> . identifier
    (50) type -> . func_call
    (51) integer -> . INTEGER
    (52) real -> . REAL
    (53) string -> . STRING
    (54) char -> . CHAR
    (55) boolean -> . BOOLEAN
    (56) identifier -> . IDENTIFIER
    (92) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 86

    writeln_args                   shift and go to state 83
    type                           shift and go to state 84
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 85

state 45

    (22) assignment -> IDENTIFIER ASSIGNMENT . type
    (23) assignment -> IDENTIFIER ASSIGNMENT . expression
    (24) assignment -> IDENTIFIER ASSIGNMENT . length
    (44) type -> . integer
    (45) type -> . real
    (46) type -> . string
    (47) type -> . char
    (48) type -> . boolean
    (49) type -> . identifier
    (50) type -> . func_call
    (25) expression -> . type operation type
    (26) expression -> . expression_paren
    (27) expression -> . expression operation expression
    (28) expression -> . func_call
    (29) expression -> . condition
    (81) length -> . LENGTH LPAREN type RPAREN
    (51) integer -> . INTEGER
    (52) real -> . REAL
    (53) string -> . STRING
    (54) char -> . CHAR
    (55) boolean -> . BOOLEAN
    (56) identifier -> . IDENTIFIER
    (92) func_call -> . IDENTIFIER LPAREN arg_list RPAREN
    (30) expression_paren -> . LPAREN expression RPAREN
    (103) condition -> . expression comparator expression
    (104) condition -> . type comparator expression
    (105) condition -> . type comparator type
    (106) condition -> . expression comparator type
    (107) condition -> . type

    LENGTH          shift and go to state 92
    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 86
    LPAREN          shift and go to state 57

    type                           shift and go to state 87
    expression                     shift and go to state 88
    length                         shift and go to state 89
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 90
    expression_paren               shift and go to state 49
    condition                      shift and go to state 91

state 46

    (99) cond_if -> IF condition . THEN statement
    (100) cond_if -> IF condition . THEN statement ELSE statement
    (101) cond_if -> IF condition . THEN if_body
    (102) cond_if -> IF condition . THEN if_body ELSE if_body
    (29) expression -> condition .

    THEN            shift and go to state 93
    RANGE           reduce using rule 29 (expression -> condition .)
    EQ              reduce using rule 29 (expression -> condition .)
    NEQ             reduce using rule 29 (expression -> condition .)
    LT              reduce using rule 29 (expression -> condition .)
    GT              reduce using rule 29 (expression -> condition .)
    LTE             reduce using rule 29 (expression -> condition .)
    GTE             reduce using rule 29 (expression -> condition .)
    AND             reduce using rule 29 (expression -> condition .)
    OR              reduce using rule 29 (expression -> condition .)
    NOT             reduce using rule 29 (expression -> condition .)
    PLUS            reduce using rule 29 (expression -> condition .)
    MINUS           reduce using rule 29 (expression -> condition .)
    TIMES           reduce using rule 29 (expression -> condition .)
    DIVISION        reduce using rule 29 (expression -> condition .)
    DIV             reduce using rule 29 (expression -> condition .)
    MOD             reduce using rule 29 (expression -> condition .)


state 47

    (103) condition -> expression . comparator expression
    (106) condition -> expression . comparator type
    (27) expression -> expression . operation expression
    (63) comparator -> . eq
    (64) comparator -> . neq
    (65) comparator -> . lt
    (66) comparator -> . gt
    (67) comparator -> . lte
    (68) comparator -> . gte
    (69) comparator -> . and
    (70) comparator -> . or
    (71) comparator -> . not
    (31) operation -> . plus
    (32) operation -> . minus
    (33) operation -> . times
    (34) operation -> . division
    (35) operation -> . div
    (36) operation -> . mod
    (37) operation -> . RANGE
    (72) eq -> . EQ
    (73) neq -> . NEQ
    (74) lt -> . LT
    (75) gt -> . GT
    (76) lte -> . LTE
    (77) gte -> . GTE
    (78) and -> . AND
    (79) or -> . OR
    (80) not -> . NOT
    (57) plus -> . PLUS
    (58) minus -> . MINUS
    (59) times -> . TIMES
    (60) division -> . DIVISION
    (61) div -> . DIV
    (62) mod -> . MOD

    RANGE           shift and go to state 111
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LT              shift and go to state 114
    GT              shift and go to state 115
    LTE             shift and go to state 116
    GTE             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119
    NOT             shift and go to state 120
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVISION        shift and go to state 124
    DIV             shift and go to state 125
    MOD             shift and go to state 126

    comparator                     shift and go to state 94
    operation                      shift and go to state 95
    eq                             shift and go to state 96
    neq                            shift and go to state 97
    lt                             shift and go to state 98
    gt                             shift and go to state 99
    lte                            shift and go to state 100
    gte                            shift and go to state 101
    and                            shift and go to state 102
    or                             shift and go to state 103
    not                            shift and go to state 104
    plus                           shift and go to state 105
    minus                          shift and go to state 106
    times                          shift and go to state 107
    division                       shift and go to state 108
    div                            shift and go to state 109
    mod                            shift and go to state 110

state 48

    (104) condition -> type . comparator expression
    (105) condition -> type . comparator type
    (107) condition -> type .
    (25) expression -> type . operation type
    (63) comparator -> . eq
    (64) comparator -> . neq
    (65) comparator -> . lt
    (66) comparator -> . gt
    (67) comparator -> . lte
    (68) comparator -> . gte
    (69) comparator -> . and
    (70) comparator -> . or
    (71) comparator -> . not
    (31) operation -> . plus
    (32) operation -> . minus
    (33) operation -> . times
    (34) operation -> . division
    (35) operation -> . div
    (36) operation -> . mod
    (37) operation -> . RANGE
    (72) eq -> . EQ
    (73) neq -> . NEQ
    (74) lt -> . LT
    (75) gt -> . GT
    (76) lte -> . LTE
    (77) gte -> . GTE
    (78) and -> . AND
    (79) or -> . OR
    (80) not -> . NOT
    (57) plus -> . PLUS
    (58) minus -> . MINUS
    (59) times -> . TIMES
    (60) division -> . DIVISION
    (61) div -> . DIV
    (62) mod -> . MOD

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    THEN            reduce using rule 107 (condition -> type .)
    DO              reduce using rule 107 (condition -> type .)
    RANGE           shift and go to state 111
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LT              shift and go to state 114
    GT              shift and go to state 115
    LTE             shift and go to state 116
    GTE             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119
    NOT             shift and go to state 120
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVISION        shift and go to state 124
    DIV             shift and go to state 125
    MOD             shift and go to state 126

  ! RANGE           [ reduce using rule 107 (condition -> type .) ]
  ! EQ              [ reduce using rule 107 (condition -> type .) ]
  ! NEQ             [ reduce using rule 107 (condition -> type .) ]
  ! LT              [ reduce using rule 107 (condition -> type .) ]
  ! GT              [ reduce using rule 107 (condition -> type .) ]
  ! LTE             [ reduce using rule 107 (condition -> type .) ]
  ! GTE             [ reduce using rule 107 (condition -> type .) ]
  ! AND             [ reduce using rule 107 (condition -> type .) ]
  ! OR              [ reduce using rule 107 (condition -> type .) ]
  ! NOT             [ reduce using rule 107 (condition -> type .) ]
  ! PLUS            [ reduce using rule 107 (condition -> type .) ]
  ! MINUS           [ reduce using rule 107 (condition -> type .) ]
  ! TIMES           [ reduce using rule 107 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 107 (condition -> type .) ]
  ! DIV             [ reduce using rule 107 (condition -> type .) ]
  ! MOD             [ reduce using rule 107 (condition -> type .) ]

    comparator                     shift and go to state 127
    operation                      shift and go to state 128
    eq                             shift and go to state 96
    neq                            shift and go to state 97
    lt                             shift and go to state 98
    gt                             shift and go to state 99
    lte                            shift and go to state 100
    gte                            shift and go to state 101
    and                            shift and go to state 102
    or                             shift and go to state 103
    not                            shift and go to state 104
    plus                           shift and go to state 105
    minus                          shift and go to state 106
    times                          shift and go to state 107
    division                       shift and go to state 108
    div                            shift and go to state 109
    mod                            shift and go to state 110

state 49

    (26) expression -> expression_paren .

    RANGE           reduce using rule 26 (expression -> expression_paren .)
    EQ              reduce using rule 26 (expression -> expression_paren .)
    NEQ             reduce using rule 26 (expression -> expression_paren .)
    LT              reduce using rule 26 (expression -> expression_paren .)
    GT              reduce using rule 26 (expression -> expression_paren .)
    LTE             reduce using rule 26 (expression -> expression_paren .)
    GTE             reduce using rule 26 (expression -> expression_paren .)
    AND             reduce using rule 26 (expression -> expression_paren .)
    OR              reduce using rule 26 (expression -> expression_paren .)
    NOT             reduce using rule 26 (expression -> expression_paren .)
    PLUS            reduce using rule 26 (expression -> expression_paren .)
    MINUS           reduce using rule 26 (expression -> expression_paren .)
    TIMES           reduce using rule 26 (expression -> expression_paren .)
    DIVISION        reduce using rule 26 (expression -> expression_paren .)
    DIV             reduce using rule 26 (expression -> expression_paren .)
    MOD             reduce using rule 26 (expression -> expression_paren .)
    SEMICOLON       reduce using rule 26 (expression -> expression_paren .)
    TO              reduce using rule 26 (expression -> expression_paren .)
    DOWNTO          reduce using rule 26 (expression -> expression_paren .)
    ELSE            reduce using rule 26 (expression -> expression_paren .)
    RPAREN          reduce using rule 26 (expression -> expression_paren .)
    THEN            reduce using rule 26 (expression -> expression_paren .)
    DO              reduce using rule 26 (expression -> expression_paren .)


state 50

    (28) expression -> func_call .
    (50) type -> func_call .

  ! reduce/reduce conflict for RANGE resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for EQ resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for NEQ resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for LTE resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for GTE resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for AND resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for OR resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for NOT resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for DIVISION resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for DIV resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for MOD resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for THEN resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for DO resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for TO resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 28 (expression -> func_call .)
    RANGE           reduce using rule 28 (expression -> func_call .)
    EQ              reduce using rule 28 (expression -> func_call .)
    NEQ             reduce using rule 28 (expression -> func_call .)
    LT              reduce using rule 28 (expression -> func_call .)
    GT              reduce using rule 28 (expression -> func_call .)
    LTE             reduce using rule 28 (expression -> func_call .)
    GTE             reduce using rule 28 (expression -> func_call .)
    AND             reduce using rule 28 (expression -> func_call .)
    OR              reduce using rule 28 (expression -> func_call .)
    NOT             reduce using rule 28 (expression -> func_call .)
    PLUS            reduce using rule 28 (expression -> func_call .)
    MINUS           reduce using rule 28 (expression -> func_call .)
    TIMES           reduce using rule 28 (expression -> func_call .)
    DIVISION        reduce using rule 28 (expression -> func_call .)
    DIV             reduce using rule 28 (expression -> func_call .)
    MOD             reduce using rule 28 (expression -> func_call .)
    RPAREN          reduce using rule 28 (expression -> func_call .)
    THEN            reduce using rule 28 (expression -> func_call .)
    DO              reduce using rule 28 (expression -> func_call .)
    SEMICOLON       reduce using rule 28 (expression -> func_call .)
    TO              reduce using rule 28 (expression -> func_call .)
    DOWNTO          reduce using rule 28 (expression -> func_call .)
    ELSE            reduce using rule 28 (expression -> func_call .)

  ! RANGE           [ reduce using rule 50 (type -> func_call .) ]
  ! EQ              [ reduce using rule 50 (type -> func_call .) ]
  ! NEQ             [ reduce using rule 50 (type -> func_call .) ]
  ! LT              [ reduce using rule 50 (type -> func_call .) ]
  ! GT              [ reduce using rule 50 (type -> func_call .) ]
  ! LTE             [ reduce using rule 50 (type -> func_call .) ]
  ! GTE             [ reduce using rule 50 (type -> func_call .) ]
  ! AND             [ reduce using rule 50 (type -> func_call .) ]
  ! OR              [ reduce using rule 50 (type -> func_call .) ]
  ! NOT             [ reduce using rule 50 (type -> func_call .) ]
  ! PLUS            [ reduce using rule 50 (type -> func_call .) ]
  ! MINUS           [ reduce using rule 50 (type -> func_call .) ]
  ! TIMES           [ reduce using rule 50 (type -> func_call .) ]
  ! DIVISION        [ reduce using rule 50 (type -> func_call .) ]
  ! DIV             [ reduce using rule 50 (type -> func_call .) ]
  ! MOD             [ reduce using rule 50 (type -> func_call .) ]
  ! THEN            [ reduce using rule 50 (type -> func_call .) ]
  ! DO              [ reduce using rule 50 (type -> func_call .) ]
  ! RPAREN          [ reduce using rule 50 (type -> func_call .) ]
  ! SEMICOLON       [ reduce using rule 50 (type -> func_call .) ]
  ! TO              [ reduce using rule 50 (type -> func_call .) ]
  ! DOWNTO          [ reduce using rule 50 (type -> func_call .) ]
  ! ELSE            [ reduce using rule 50 (type -> func_call .) ]


state 51

    (44) type -> integer .

    RANGE           reduce using rule 44 (type -> integer .)
    EQ              reduce using rule 44 (type -> integer .)
    NEQ             reduce using rule 44 (type -> integer .)
    LT              reduce using rule 44 (type -> integer .)
    GT              reduce using rule 44 (type -> integer .)
    LTE             reduce using rule 44 (type -> integer .)
    GTE             reduce using rule 44 (type -> integer .)
    AND             reduce using rule 44 (type -> integer .)
    OR              reduce using rule 44 (type -> integer .)
    NOT             reduce using rule 44 (type -> integer .)
    PLUS            reduce using rule 44 (type -> integer .)
    MINUS           reduce using rule 44 (type -> integer .)
    TIMES           reduce using rule 44 (type -> integer .)
    DIVISION        reduce using rule 44 (type -> integer .)
    DIV             reduce using rule 44 (type -> integer .)
    MOD             reduce using rule 44 (type -> integer .)
    THEN            reduce using rule 44 (type -> integer .)
    DO              reduce using rule 44 (type -> integer .)
    COMMA           reduce using rule 44 (type -> integer .)
    RPAREN          reduce using rule 44 (type -> integer .)
    SEMICOLON       reduce using rule 44 (type -> integer .)
    TO              reduce using rule 44 (type -> integer .)
    DOWNTO          reduce using rule 44 (type -> integer .)
    ELSE            reduce using rule 44 (type -> integer .)
    RBRACKET        reduce using rule 44 (type -> integer .)


state 52

    (45) type -> real .

    RANGE           reduce using rule 45 (type -> real .)
    EQ              reduce using rule 45 (type -> real .)
    NEQ             reduce using rule 45 (type -> real .)
    LT              reduce using rule 45 (type -> real .)
    GT              reduce using rule 45 (type -> real .)
    LTE             reduce using rule 45 (type -> real .)
    GTE             reduce using rule 45 (type -> real .)
    AND             reduce using rule 45 (type -> real .)
    OR              reduce using rule 45 (type -> real .)
    NOT             reduce using rule 45 (type -> real .)
    PLUS            reduce using rule 45 (type -> real .)
    MINUS           reduce using rule 45 (type -> real .)
    TIMES           reduce using rule 45 (type -> real .)
    DIVISION        reduce using rule 45 (type -> real .)
    DIV             reduce using rule 45 (type -> real .)
    MOD             reduce using rule 45 (type -> real .)
    THEN            reduce using rule 45 (type -> real .)
    DO              reduce using rule 45 (type -> real .)
    COMMA           reduce using rule 45 (type -> real .)
    RPAREN          reduce using rule 45 (type -> real .)
    SEMICOLON       reduce using rule 45 (type -> real .)
    TO              reduce using rule 45 (type -> real .)
    DOWNTO          reduce using rule 45 (type -> real .)
    ELSE            reduce using rule 45 (type -> real .)
    RBRACKET        reduce using rule 45 (type -> real .)


state 53

    (46) type -> string .

    RANGE           reduce using rule 46 (type -> string .)
    EQ              reduce using rule 46 (type -> string .)
    NEQ             reduce using rule 46 (type -> string .)
    LT              reduce using rule 46 (type -> string .)
    GT              reduce using rule 46 (type -> string .)
    LTE             reduce using rule 46 (type -> string .)
    GTE             reduce using rule 46 (type -> string .)
    AND             reduce using rule 46 (type -> string .)
    OR              reduce using rule 46 (type -> string .)
    NOT             reduce using rule 46 (type -> string .)
    PLUS            reduce using rule 46 (type -> string .)
    MINUS           reduce using rule 46 (type -> string .)
    TIMES           reduce using rule 46 (type -> string .)
    DIVISION        reduce using rule 46 (type -> string .)
    DIV             reduce using rule 46 (type -> string .)
    MOD             reduce using rule 46 (type -> string .)
    THEN            reduce using rule 46 (type -> string .)
    DO              reduce using rule 46 (type -> string .)
    COMMA           reduce using rule 46 (type -> string .)
    RPAREN          reduce using rule 46 (type -> string .)
    SEMICOLON       reduce using rule 46 (type -> string .)
    TO              reduce using rule 46 (type -> string .)
    DOWNTO          reduce using rule 46 (type -> string .)
    ELSE            reduce using rule 46 (type -> string .)
    RBRACKET        reduce using rule 46 (type -> string .)


state 54

    (47) type -> char .

    RANGE           reduce using rule 47 (type -> char .)
    EQ              reduce using rule 47 (type -> char .)
    NEQ             reduce using rule 47 (type -> char .)
    LT              reduce using rule 47 (type -> char .)
    GT              reduce using rule 47 (type -> char .)
    LTE             reduce using rule 47 (type -> char .)
    GTE             reduce using rule 47 (type -> char .)
    AND             reduce using rule 47 (type -> char .)
    OR              reduce using rule 47 (type -> char .)
    NOT             reduce using rule 47 (type -> char .)
    PLUS            reduce using rule 47 (type -> char .)
    MINUS           reduce using rule 47 (type -> char .)
    TIMES           reduce using rule 47 (type -> char .)
    DIVISION        reduce using rule 47 (type -> char .)
    DIV             reduce using rule 47 (type -> char .)
    MOD             reduce using rule 47 (type -> char .)
    THEN            reduce using rule 47 (type -> char .)
    DO              reduce using rule 47 (type -> char .)
    COMMA           reduce using rule 47 (type -> char .)
    RPAREN          reduce using rule 47 (type -> char .)
    SEMICOLON       reduce using rule 47 (type -> char .)
    TO              reduce using rule 47 (type -> char .)
    DOWNTO          reduce using rule 47 (type -> char .)
    ELSE            reduce using rule 47 (type -> char .)
    RBRACKET        reduce using rule 47 (type -> char .)


state 55

    (48) type -> boolean .

    RANGE           reduce using rule 48 (type -> boolean .)
    EQ              reduce using rule 48 (type -> boolean .)
    NEQ             reduce using rule 48 (type -> boolean .)
    LT              reduce using rule 48 (type -> boolean .)
    GT              reduce using rule 48 (type -> boolean .)
    LTE             reduce using rule 48 (type -> boolean .)
    GTE             reduce using rule 48 (type -> boolean .)
    AND             reduce using rule 48 (type -> boolean .)
    OR              reduce using rule 48 (type -> boolean .)
    NOT             reduce using rule 48 (type -> boolean .)
    PLUS            reduce using rule 48 (type -> boolean .)
    MINUS           reduce using rule 48 (type -> boolean .)
    TIMES           reduce using rule 48 (type -> boolean .)
    DIVISION        reduce using rule 48 (type -> boolean .)
    DIV             reduce using rule 48 (type -> boolean .)
    MOD             reduce using rule 48 (type -> boolean .)
    THEN            reduce using rule 48 (type -> boolean .)
    DO              reduce using rule 48 (type -> boolean .)
    COMMA           reduce using rule 48 (type -> boolean .)
    RPAREN          reduce using rule 48 (type -> boolean .)
    SEMICOLON       reduce using rule 48 (type -> boolean .)
    TO              reduce using rule 48 (type -> boolean .)
    DOWNTO          reduce using rule 48 (type -> boolean .)
    ELSE            reduce using rule 48 (type -> boolean .)
    RBRACKET        reduce using rule 48 (type -> boolean .)


state 56

    (49) type -> identifier .

    RANGE           reduce using rule 49 (type -> identifier .)
    EQ              reduce using rule 49 (type -> identifier .)
    NEQ             reduce using rule 49 (type -> identifier .)
    LT              reduce using rule 49 (type -> identifier .)
    GT              reduce using rule 49 (type -> identifier .)
    LTE             reduce using rule 49 (type -> identifier .)
    GTE             reduce using rule 49 (type -> identifier .)
    AND             reduce using rule 49 (type -> identifier .)
    OR              reduce using rule 49 (type -> identifier .)
    NOT             reduce using rule 49 (type -> identifier .)
    PLUS            reduce using rule 49 (type -> identifier .)
    MINUS           reduce using rule 49 (type -> identifier .)
    TIMES           reduce using rule 49 (type -> identifier .)
    DIVISION        reduce using rule 49 (type -> identifier .)
    DIV             reduce using rule 49 (type -> identifier .)
    MOD             reduce using rule 49 (type -> identifier .)
    THEN            reduce using rule 49 (type -> identifier .)
    DO              reduce using rule 49 (type -> identifier .)
    COMMA           reduce using rule 49 (type -> identifier .)
    RPAREN          reduce using rule 49 (type -> identifier .)
    SEMICOLON       reduce using rule 49 (type -> identifier .)
    TO              reduce using rule 49 (type -> identifier .)
    DOWNTO          reduce using rule 49 (type -> identifier .)
    ELSE            reduce using rule 49 (type -> identifier .)
    RBRACKET        reduce using rule 49 (type -> identifier .)


state 57

    (30) expression_paren -> LPAREN . expression RPAREN
    (25) expression -> . type operation type
    (26) expression -> . expression_paren
    (27) expression -> . expression operation expression
    (28) expression -> . func_call
    (29) expression -> . condition
    (44) type -> . integer
    (45) type -> . real
    (46) type -> . string
    (47) type -> . char
    (48) type -> . boolean
    (49) type -> . identifier
    (50) type -> . func_call
    (30) expression_paren -> . LPAREN expression RPAREN
    (92) func_call -> . IDENTIFIER LPAREN arg_list RPAREN
    (103) condition -> . expression comparator expression
    (104) condition -> . type comparator expression
    (105) condition -> . type comparator type
    (106) condition -> . expression comparator type
    (107) condition -> . type
    (51) integer -> . INTEGER
    (52) real -> . REAL
    (53) string -> . STRING
    (54) char -> . CHAR
    (55) boolean -> . BOOLEAN
    (56) identifier -> . IDENTIFIER

    LPAREN          shift and go to state 57
    IDENTIFIER      shift and go to state 58
    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63

    expression                     shift and go to state 129
    type                           shift and go to state 130
    expression_paren               shift and go to state 49
    func_call                      shift and go to state 50
    condition                      shift and go to state 91
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56

state 58

    (92) func_call -> IDENTIFIER . LPAREN arg_list RPAREN
    (56) identifier -> IDENTIFIER .

    LPAREN          shift and go to state 131
    RANGE           reduce using rule 56 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 56 (identifier -> IDENTIFIER .)
    NEQ             reduce using rule 56 (identifier -> IDENTIFIER .)
    LT              reduce using rule 56 (identifier -> IDENTIFIER .)
    GT              reduce using rule 56 (identifier -> IDENTIFIER .)
    LTE             reduce using rule 56 (identifier -> IDENTIFIER .)
    GTE             reduce using rule 56 (identifier -> IDENTIFIER .)
    AND             reduce using rule 56 (identifier -> IDENTIFIER .)
    OR              reduce using rule 56 (identifier -> IDENTIFIER .)
    NOT             reduce using rule 56 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 56 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 56 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 56 (identifier -> IDENTIFIER .)
    DIVISION        reduce using rule 56 (identifier -> IDENTIFIER .)
    DIV             reduce using rule 56 (identifier -> IDENTIFIER .)
    MOD             reduce using rule 56 (identifier -> IDENTIFIER .)
    THEN            reduce using rule 56 (identifier -> IDENTIFIER .)
    DO              reduce using rule 56 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 56 (identifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 56 (identifier -> IDENTIFIER .)
    TO              reduce using rule 56 (identifier -> IDENTIFIER .)
    DOWNTO          reduce using rule 56 (identifier -> IDENTIFIER .)
    ELSE            reduce using rule 56 (identifier -> IDENTIFIER .)


state 59

    (51) integer -> INTEGER .

    RANGE           reduce using rule 51 (integer -> INTEGER .)
    EQ              reduce using rule 51 (integer -> INTEGER .)
    NEQ             reduce using rule 51 (integer -> INTEGER .)
    LT              reduce using rule 51 (integer -> INTEGER .)
    GT              reduce using rule 51 (integer -> INTEGER .)
    LTE             reduce using rule 51 (integer -> INTEGER .)
    GTE             reduce using rule 51 (integer -> INTEGER .)
    AND             reduce using rule 51 (integer -> INTEGER .)
    OR              reduce using rule 51 (integer -> INTEGER .)
    NOT             reduce using rule 51 (integer -> INTEGER .)
    PLUS            reduce using rule 51 (integer -> INTEGER .)
    MINUS           reduce using rule 51 (integer -> INTEGER .)
    TIMES           reduce using rule 51 (integer -> INTEGER .)
    DIVISION        reduce using rule 51 (integer -> INTEGER .)
    DIV             reduce using rule 51 (integer -> INTEGER .)
    MOD             reduce using rule 51 (integer -> INTEGER .)
    THEN            reduce using rule 51 (integer -> INTEGER .)
    DO              reduce using rule 51 (integer -> INTEGER .)
    COMMA           reduce using rule 51 (integer -> INTEGER .)
    RPAREN          reduce using rule 51 (integer -> INTEGER .)
    SEMICOLON       reduce using rule 51 (integer -> INTEGER .)
    TO              reduce using rule 51 (integer -> INTEGER .)
    DOWNTO          reduce using rule 51 (integer -> INTEGER .)
    ELSE            reduce using rule 51 (integer -> INTEGER .)
    RBRACKET        reduce using rule 51 (integer -> INTEGER .)


state 60

    (52) real -> REAL .

    RANGE           reduce using rule 52 (real -> REAL .)
    EQ              reduce using rule 52 (real -> REAL .)
    NEQ             reduce using rule 52 (real -> REAL .)
    LT              reduce using rule 52 (real -> REAL .)
    GT              reduce using rule 52 (real -> REAL .)
    LTE             reduce using rule 52 (real -> REAL .)
    GTE             reduce using rule 52 (real -> REAL .)
    AND             reduce using rule 52 (real -> REAL .)
    OR              reduce using rule 52 (real -> REAL .)
    NOT             reduce using rule 52 (real -> REAL .)
    PLUS            reduce using rule 52 (real -> REAL .)
    MINUS           reduce using rule 52 (real -> REAL .)
    TIMES           reduce using rule 52 (real -> REAL .)
    DIVISION        reduce using rule 52 (real -> REAL .)
    DIV             reduce using rule 52 (real -> REAL .)
    MOD             reduce using rule 52 (real -> REAL .)
    THEN            reduce using rule 52 (real -> REAL .)
    DO              reduce using rule 52 (real -> REAL .)
    COMMA           reduce using rule 52 (real -> REAL .)
    RPAREN          reduce using rule 52 (real -> REAL .)
    SEMICOLON       reduce using rule 52 (real -> REAL .)
    TO              reduce using rule 52 (real -> REAL .)
    DOWNTO          reduce using rule 52 (real -> REAL .)
    ELSE            reduce using rule 52 (real -> REAL .)
    RBRACKET        reduce using rule 52 (real -> REAL .)


state 61

    (53) string -> STRING .

    RANGE           reduce using rule 53 (string -> STRING .)
    EQ              reduce using rule 53 (string -> STRING .)
    NEQ             reduce using rule 53 (string -> STRING .)
    LT              reduce using rule 53 (string -> STRING .)
    GT              reduce using rule 53 (string -> STRING .)
    LTE             reduce using rule 53 (string -> STRING .)
    GTE             reduce using rule 53 (string -> STRING .)
    AND             reduce using rule 53 (string -> STRING .)
    OR              reduce using rule 53 (string -> STRING .)
    NOT             reduce using rule 53 (string -> STRING .)
    PLUS            reduce using rule 53 (string -> STRING .)
    MINUS           reduce using rule 53 (string -> STRING .)
    TIMES           reduce using rule 53 (string -> STRING .)
    DIVISION        reduce using rule 53 (string -> STRING .)
    DIV             reduce using rule 53 (string -> STRING .)
    MOD             reduce using rule 53 (string -> STRING .)
    THEN            reduce using rule 53 (string -> STRING .)
    DO              reduce using rule 53 (string -> STRING .)
    COMMA           reduce using rule 53 (string -> STRING .)
    RPAREN          reduce using rule 53 (string -> STRING .)
    SEMICOLON       reduce using rule 53 (string -> STRING .)
    TO              reduce using rule 53 (string -> STRING .)
    DOWNTO          reduce using rule 53 (string -> STRING .)
    ELSE            reduce using rule 53 (string -> STRING .)
    RBRACKET        reduce using rule 53 (string -> STRING .)


state 62

    (54) char -> CHAR .

    RANGE           reduce using rule 54 (char -> CHAR .)
    EQ              reduce using rule 54 (char -> CHAR .)
    NEQ             reduce using rule 54 (char -> CHAR .)
    LT              reduce using rule 54 (char -> CHAR .)
    GT              reduce using rule 54 (char -> CHAR .)
    LTE             reduce using rule 54 (char -> CHAR .)
    GTE             reduce using rule 54 (char -> CHAR .)
    AND             reduce using rule 54 (char -> CHAR .)
    OR              reduce using rule 54 (char -> CHAR .)
    NOT             reduce using rule 54 (char -> CHAR .)
    PLUS            reduce using rule 54 (char -> CHAR .)
    MINUS           reduce using rule 54 (char -> CHAR .)
    TIMES           reduce using rule 54 (char -> CHAR .)
    DIVISION        reduce using rule 54 (char -> CHAR .)
    DIV             reduce using rule 54 (char -> CHAR .)
    MOD             reduce using rule 54 (char -> CHAR .)
    THEN            reduce using rule 54 (char -> CHAR .)
    DO              reduce using rule 54 (char -> CHAR .)
    COMMA           reduce using rule 54 (char -> CHAR .)
    RPAREN          reduce using rule 54 (char -> CHAR .)
    SEMICOLON       reduce using rule 54 (char -> CHAR .)
    TO              reduce using rule 54 (char -> CHAR .)
    DOWNTO          reduce using rule 54 (char -> CHAR .)
    ELSE            reduce using rule 54 (char -> CHAR .)
    RBRACKET        reduce using rule 54 (char -> CHAR .)


state 63

    (55) boolean -> BOOLEAN .

    RANGE           reduce using rule 55 (boolean -> BOOLEAN .)
    EQ              reduce using rule 55 (boolean -> BOOLEAN .)
    NEQ             reduce using rule 55 (boolean -> BOOLEAN .)
    LT              reduce using rule 55 (boolean -> BOOLEAN .)
    GT              reduce using rule 55 (boolean -> BOOLEAN .)
    LTE             reduce using rule 55 (boolean -> BOOLEAN .)
    GTE             reduce using rule 55 (boolean -> BOOLEAN .)
    AND             reduce using rule 55 (boolean -> BOOLEAN .)
    OR              reduce using rule 55 (boolean -> BOOLEAN .)
    NOT             reduce using rule 55 (boolean -> BOOLEAN .)
    PLUS            reduce using rule 55 (boolean -> BOOLEAN .)
    MINUS           reduce using rule 55 (boolean -> BOOLEAN .)
    TIMES           reduce using rule 55 (boolean -> BOOLEAN .)
    DIVISION        reduce using rule 55 (boolean -> BOOLEAN .)
    DIV             reduce using rule 55 (boolean -> BOOLEAN .)
    MOD             reduce using rule 55 (boolean -> BOOLEAN .)
    THEN            reduce using rule 55 (boolean -> BOOLEAN .)
    DO              reduce using rule 55 (boolean -> BOOLEAN .)
    COMMA           reduce using rule 55 (boolean -> BOOLEAN .)
    RPAREN          reduce using rule 55 (boolean -> BOOLEAN .)
    SEMICOLON       reduce using rule 55 (boolean -> BOOLEAN .)
    TO              reduce using rule 55 (boolean -> BOOLEAN .)
    DOWNTO          reduce using rule 55 (boolean -> BOOLEAN .)
    ELSE            reduce using rule 55 (boolean -> BOOLEAN .)
    RBRACKET        reduce using rule 55 (boolean -> BOOLEAN .)


state 64

    (115) while_loop -> WHILE condition . DO statement
    (116) while_loop -> WHILE condition . DO if_body
    (29) expression -> condition .

    DO              shift and go to state 132
    RANGE           reduce using rule 29 (expression -> condition .)
    EQ              reduce using rule 29 (expression -> condition .)
    NEQ             reduce using rule 29 (expression -> condition .)
    LT              reduce using rule 29 (expression -> condition .)
    GT              reduce using rule 29 (expression -> condition .)
    LTE             reduce using rule 29 (expression -> condition .)
    GTE             reduce using rule 29 (expression -> condition .)
    AND             reduce using rule 29 (expression -> condition .)
    OR              reduce using rule 29 (expression -> condition .)
    NOT             reduce using rule 29 (expression -> condition .)
    PLUS            reduce using rule 29 (expression -> condition .)
    MINUS           reduce using rule 29 (expression -> condition .)
    TIMES           reduce using rule 29 (expression -> condition .)
    DIVISION        reduce using rule 29 (expression -> condition .)
    DIV             reduce using rule 29 (expression -> condition .)
    MOD             reduce using rule 29 (expression -> condition .)


state 65

    (111) for_loop -> FOR assignment . to type DO statement
    (112) for_loop -> FOR assignment . to type DO if_body
    (113) for_loop -> FOR assignment . downto type DO statement
    (114) for_loop -> FOR assignment . downto type DO if_body
    (109) to -> . TO
    (110) downto -> . DOWNTO

    TO              shift and go to state 135
    DOWNTO          shift and go to state 136

    to                             shift and go to state 133
    downto                         shift and go to state 134

state 66

    (22) assignment -> IDENTIFIER . ASSIGNMENT type
    (23) assignment -> IDENTIFIER . ASSIGNMENT expression
    (24) assignment -> IDENTIFIER . ASSIGNMENT length

    ASSIGNMENT      shift and go to state 45


state 67

    (117) readln -> READLN LPAREN . type RPAREN
    (44) type -> . integer
    (45) type -> . real
    (46) type -> . string
    (47) type -> . char
    (48) type -> . boolean
    (49) type -> . identifier
    (50) type -> . func_call
    (51) integer -> . INTEGER
    (52) real -> . REAL
    (53) string -> . STRING
    (54) char -> . CHAR
    (55) boolean -> . BOOLEAN
    (56) identifier -> . IDENTIFIER
    (92) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 86

    type                           shift and go to state 137
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 85

state 68

    (82) function -> func_header SEMICOLON VAR . func_variable_declaration func_body SEMICOLON
    (89) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON func_variable_declaration
    (90) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 17

    func_variable_declaration      shift and go to state 138
    identifier_list                shift and go to state 139

state 69

    (83) function -> func_header SEMICOLON func_body . SEMICOLON

    SEMICOLON       shift and go to state 140


state 70

    (91) func_body -> BEGIN . statements END
    (13) statements -> . statement SEMICOLON statements
    (14) statements -> . statement SEMICOLON
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (118) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (24) assignment -> . IDENTIFIER ASSIGNMENT length
    (98) procedure_call -> . IDENTIFIER
    (99) cond_if -> . IF condition THEN statement
    (100) cond_if -> . IF condition THEN statement ELSE statement
    (101) cond_if -> . IF condition THEN if_body
    (102) cond_if -> . IF condition THEN if_body ELSE if_body
    (115) while_loop -> . WHILE condition DO statement
    (116) while_loop -> . WHILE condition DO if_body
    (111) for_loop -> . FOR assignment to type DO statement
    (112) for_loop -> . FOR assignment to type DO if_body
    (113) for_loop -> . FOR assignment downto type DO statement
    (114) for_loop -> . FOR assignment downto type DO if_body
    (117) readln -> . READLN LPAREN type RPAREN

    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    statements                     shift and go to state 141
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 71

    (96) procedure -> PROCEDURE IDENTIFIER SEMICOLON . procedure_body SEMICOLON
    (97) procedure_body -> . BEGIN statements END

    BEGIN           shift and go to state 143

    procedure_body                 shift and go to state 142

state 72

    (84) func_header -> FUNCTION IDENTIFIER LPAREN . func_args RPAREN COLON type_name
    (85) func_header -> FUNCTION IDENTIFIER LPAREN . RPAREN COLON type_name
    (86) func_args -> . func_arg COMMA func_args
    (87) func_args -> . func_arg
    (88) func_arg -> . IDENTIFIER COLON type_name

    RPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 144

    func_args                      shift and go to state 145
    func_arg                       shift and go to state 147

state 73

    (7) variable_declaration -> identifier_list COLON type_name . SEMICOLON variable_declaration
    (8) variable_declaration -> identifier_list COLON type_name . SEMICOLON

    SEMICOLON       shift and go to state 148


state 74

    (38) type_name -> NINTEGER .

    SEMICOLON       reduce using rule 38 (type_name -> NINTEGER .)
    COMMA           reduce using rule 38 (type_name -> NINTEGER .)
    RPAREN          reduce using rule 38 (type_name -> NINTEGER .)


state 75

    (39) type_name -> NREAL .

    SEMICOLON       reduce using rule 39 (type_name -> NREAL .)
    COMMA           reduce using rule 39 (type_name -> NREAL .)
    RPAREN          reduce using rule 39 (type_name -> NREAL .)


state 76

    (40) type_name -> NSTRING .

    SEMICOLON       reduce using rule 40 (type_name -> NSTRING .)
    COMMA           reduce using rule 40 (type_name -> NSTRING .)
    RPAREN          reduce using rule 40 (type_name -> NSTRING .)


state 77

    (41) type_name -> NCHAR .

    SEMICOLON       reduce using rule 41 (type_name -> NCHAR .)
    COMMA           reduce using rule 41 (type_name -> NCHAR .)
    RPAREN          reduce using rule 41 (type_name -> NCHAR .)


state 78

    (42) type_name -> NBOOLEAN .

    SEMICOLON       reduce using rule 42 (type_name -> NBOOLEAN .)
    COMMA           reduce using rule 42 (type_name -> NBOOLEAN .)
    RPAREN          reduce using rule 42 (type_name -> NBOOLEAN .)


state 79

    (43) type_name -> array_type .

    SEMICOLON       reduce using rule 43 (type_name -> array_type .)
    COMMA           reduce using rule 43 (type_name -> array_type .)
    RPAREN          reduce using rule 43 (type_name -> array_type .)


state 80

    (11) array_type -> ARRAY . LBRACKET type RANGE type RBRACKET OF type_name

    LBRACKET        shift and go to state 149


state 81

    (9) identifier_list -> IDENTIFIER COMMA identifier_list .

    COLON           reduce using rule 9 (identifier_list -> IDENTIFIER COMMA identifier_list .)


state 82

    (13) statements -> statement SEMICOLON statements .

    END             reduce using rule 13 (statements -> statement SEMICOLON statements .)


state 83

    (118) writeln -> WRITELN LPAREN writeln_args . RPAREN

    RPAREN          shift and go to state 150


state 84

    (119) writeln_args -> type . COMMA writeln_args
    (120) writeln_args -> type .

    COMMA           shift and go to state 151
    RPAREN          reduce using rule 120 (writeln_args -> type .)


state 85

    (50) type -> func_call .

    COMMA           reduce using rule 50 (type -> func_call .)
    RPAREN          reduce using rule 50 (type -> func_call .)
    RANGE           reduce using rule 50 (type -> func_call .)
    EQ              reduce using rule 50 (type -> func_call .)
    NEQ             reduce using rule 50 (type -> func_call .)
    LT              reduce using rule 50 (type -> func_call .)
    GT              reduce using rule 50 (type -> func_call .)
    LTE             reduce using rule 50 (type -> func_call .)
    GTE             reduce using rule 50 (type -> func_call .)
    AND             reduce using rule 50 (type -> func_call .)
    OR              reduce using rule 50 (type -> func_call .)
    NOT             reduce using rule 50 (type -> func_call .)
    PLUS            reduce using rule 50 (type -> func_call .)
    MINUS           reduce using rule 50 (type -> func_call .)
    TIMES           reduce using rule 50 (type -> func_call .)
    DIVISION        reduce using rule 50 (type -> func_call .)
    DIV             reduce using rule 50 (type -> func_call .)
    MOD             reduce using rule 50 (type -> func_call .)
    SEMICOLON       reduce using rule 50 (type -> func_call .)
    TO              reduce using rule 50 (type -> func_call .)
    DOWNTO          reduce using rule 50 (type -> func_call .)
    ELSE            reduce using rule 50 (type -> func_call .)
    THEN            reduce using rule 50 (type -> func_call .)
    DO              reduce using rule 50 (type -> func_call .)
    RBRACKET        reduce using rule 50 (type -> func_call .)


state 86

    (56) identifier -> IDENTIFIER .
    (92) func_call -> IDENTIFIER . LPAREN arg_list RPAREN

    COMMA           reduce using rule 56 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 56 (identifier -> IDENTIFIER .)
    RANGE           reduce using rule 56 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 56 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 56 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 56 (identifier -> IDENTIFIER .)
    DIVISION        reduce using rule 56 (identifier -> IDENTIFIER .)
    DIV             reduce using rule 56 (identifier -> IDENTIFIER .)
    MOD             reduce using rule 56 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 56 (identifier -> IDENTIFIER .)
    NEQ             reduce using rule 56 (identifier -> IDENTIFIER .)
    LT              reduce using rule 56 (identifier -> IDENTIFIER .)
    GT              reduce using rule 56 (identifier -> IDENTIFIER .)
    LTE             reduce using rule 56 (identifier -> IDENTIFIER .)
    GTE             reduce using rule 56 (identifier -> IDENTIFIER .)
    AND             reduce using rule 56 (identifier -> IDENTIFIER .)
    OR              reduce using rule 56 (identifier -> IDENTIFIER .)
    NOT             reduce using rule 56 (identifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 56 (identifier -> IDENTIFIER .)
    TO              reduce using rule 56 (identifier -> IDENTIFIER .)
    DOWNTO          reduce using rule 56 (identifier -> IDENTIFIER .)
    ELSE            reduce using rule 56 (identifier -> IDENTIFIER .)
    THEN            reduce using rule 56 (identifier -> IDENTIFIER .)
    DO              reduce using rule 56 (identifier -> IDENTIFIER .)
    RBRACKET        reduce using rule 56 (identifier -> IDENTIFIER .)
    LPAREN          shift and go to state 131


state 87

    (22) assignment -> IDENTIFIER ASSIGNMENT type .
    (25) expression -> type . operation type
    (104) condition -> type . comparator expression
    (105) condition -> type . comparator type
    (107) condition -> type .
    (31) operation -> . plus
    (32) operation -> . minus
    (33) operation -> . times
    (34) operation -> . division
    (35) operation -> . div
    (36) operation -> . mod
    (37) operation -> . RANGE
    (63) comparator -> . eq
    (64) comparator -> . neq
    (65) comparator -> . lt
    (66) comparator -> . gt
    (67) comparator -> . lte
    (68) comparator -> . gte
    (69) comparator -> . and
    (70) comparator -> . or
    (71) comparator -> . not
    (57) plus -> . PLUS
    (58) minus -> . MINUS
    (59) times -> . TIMES
    (60) division -> . DIVISION
    (61) div -> . DIV
    (62) mod -> . MOD
    (72) eq -> . EQ
    (73) neq -> . NEQ
    (74) lt -> . LT
    (75) gt -> . GT
    (76) lte -> . LTE
    (77) gte -> . GTE
    (78) and -> . AND
    (79) or -> . OR
    (80) not -> . NOT

  ! reduce/reduce conflict for SEMICOLON resolved using rule 22 (assignment -> IDENTIFIER ASSIGNMENT type .)
  ! reduce/reduce conflict for TO resolved using rule 22 (assignment -> IDENTIFIER ASSIGNMENT type .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 22 (assignment -> IDENTIFIER ASSIGNMENT type .)
  ! reduce/reduce conflict for ELSE resolved using rule 22 (assignment -> IDENTIFIER ASSIGNMENT type .)
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    SEMICOLON       reduce using rule 22 (assignment -> IDENTIFIER ASSIGNMENT type .)
    TO              reduce using rule 22 (assignment -> IDENTIFIER ASSIGNMENT type .)
    DOWNTO          reduce using rule 22 (assignment -> IDENTIFIER ASSIGNMENT type .)
    ELSE            reduce using rule 22 (assignment -> IDENTIFIER ASSIGNMENT type .)
    RANGE           shift and go to state 111
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVISION        shift and go to state 124
    DIV             shift and go to state 125
    MOD             shift and go to state 126
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LT              shift and go to state 114
    GT              shift and go to state 115
    LTE             shift and go to state 116
    GTE             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119
    NOT             shift and go to state 120

  ! RANGE           [ reduce using rule 107 (condition -> type .) ]
  ! PLUS            [ reduce using rule 107 (condition -> type .) ]
  ! MINUS           [ reduce using rule 107 (condition -> type .) ]
  ! TIMES           [ reduce using rule 107 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 107 (condition -> type .) ]
  ! DIV             [ reduce using rule 107 (condition -> type .) ]
  ! MOD             [ reduce using rule 107 (condition -> type .) ]
  ! EQ              [ reduce using rule 107 (condition -> type .) ]
  ! NEQ             [ reduce using rule 107 (condition -> type .) ]
  ! LT              [ reduce using rule 107 (condition -> type .) ]
  ! GT              [ reduce using rule 107 (condition -> type .) ]
  ! LTE             [ reduce using rule 107 (condition -> type .) ]
  ! GTE             [ reduce using rule 107 (condition -> type .) ]
  ! AND             [ reduce using rule 107 (condition -> type .) ]
  ! OR              [ reduce using rule 107 (condition -> type .) ]
  ! NOT             [ reduce using rule 107 (condition -> type .) ]
  ! SEMICOLON       [ reduce using rule 107 (condition -> type .) ]
  ! TO              [ reduce using rule 107 (condition -> type .) ]
  ! DOWNTO          [ reduce using rule 107 (condition -> type .) ]
  ! ELSE            [ reduce using rule 107 (condition -> type .) ]

    operation                      shift and go to state 128
    comparator                     shift and go to state 127
    plus                           shift and go to state 105
    minus                          shift and go to state 106
    times                          shift and go to state 107
    division                       shift and go to state 108
    div                            shift and go to state 109
    mod                            shift and go to state 110
    eq                             shift and go to state 96
    neq                            shift and go to state 97
    lt                             shift and go to state 98
    gt                             shift and go to state 99
    lte                            shift and go to state 100
    gte                            shift and go to state 101
    and                            shift and go to state 102
    or                             shift and go to state 103
    not                            shift and go to state 104

state 88

    (23) assignment -> IDENTIFIER ASSIGNMENT expression .
    (27) expression -> expression . operation expression
    (103) condition -> expression . comparator expression
    (106) condition -> expression . comparator type
    (31) operation -> . plus
    (32) operation -> . minus
    (33) operation -> . times
    (34) operation -> . division
    (35) operation -> . div
    (36) operation -> . mod
    (37) operation -> . RANGE
    (63) comparator -> . eq
    (64) comparator -> . neq
    (65) comparator -> . lt
    (66) comparator -> . gt
    (67) comparator -> . lte
    (68) comparator -> . gte
    (69) comparator -> . and
    (70) comparator -> . or
    (71) comparator -> . not
    (57) plus -> . PLUS
    (58) minus -> . MINUS
    (59) times -> . TIMES
    (60) division -> . DIVISION
    (61) div -> . DIV
    (62) mod -> . MOD
    (72) eq -> . EQ
    (73) neq -> . NEQ
    (74) lt -> . LT
    (75) gt -> . GT
    (76) lte -> . LTE
    (77) gte -> . GTE
    (78) and -> . AND
    (79) or -> . OR
    (80) not -> . NOT

    SEMICOLON       reduce using rule 23 (assignment -> IDENTIFIER ASSIGNMENT expression .)
    TO              reduce using rule 23 (assignment -> IDENTIFIER ASSIGNMENT expression .)
    DOWNTO          reduce using rule 23 (assignment -> IDENTIFIER ASSIGNMENT expression .)
    ELSE            reduce using rule 23 (assignment -> IDENTIFIER ASSIGNMENT expression .)
    RANGE           shift and go to state 111
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVISION        shift and go to state 124
    DIV             shift and go to state 125
    MOD             shift and go to state 126
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LT              shift and go to state 114
    GT              shift and go to state 115
    LTE             shift and go to state 116
    GTE             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119
    NOT             shift and go to state 120

    operation                      shift and go to state 95
    comparator                     shift and go to state 94
    plus                           shift and go to state 105
    minus                          shift and go to state 106
    times                          shift and go to state 107
    division                       shift and go to state 108
    div                            shift and go to state 109
    mod                            shift and go to state 110
    eq                             shift and go to state 96
    neq                            shift and go to state 97
    lt                             shift and go to state 98
    gt                             shift and go to state 99
    lte                            shift and go to state 100
    gte                            shift and go to state 101
    and                            shift and go to state 102
    or                             shift and go to state 103
    not                            shift and go to state 104

state 89

    (24) assignment -> IDENTIFIER ASSIGNMENT length .

    SEMICOLON       reduce using rule 24 (assignment -> IDENTIFIER ASSIGNMENT length .)
    TO              reduce using rule 24 (assignment -> IDENTIFIER ASSIGNMENT length .)
    DOWNTO          reduce using rule 24 (assignment -> IDENTIFIER ASSIGNMENT length .)
    ELSE            reduce using rule 24 (assignment -> IDENTIFIER ASSIGNMENT length .)


state 90

    (50) type -> func_call .
    (28) expression -> func_call .

  ! reduce/reduce conflict for RANGE resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for DIVISION resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for DIV resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for MOD resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for EQ resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for NEQ resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for LTE resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for GTE resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for AND resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for OR resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for NOT resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for TO resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 28 (expression -> func_call .)
  ! reduce/reduce conflict for ELSE resolved using rule 28 (expression -> func_call .)
    RANGE           reduce using rule 28 (expression -> func_call .)
    PLUS            reduce using rule 28 (expression -> func_call .)
    MINUS           reduce using rule 28 (expression -> func_call .)
    TIMES           reduce using rule 28 (expression -> func_call .)
    DIVISION        reduce using rule 28 (expression -> func_call .)
    DIV             reduce using rule 28 (expression -> func_call .)
    MOD             reduce using rule 28 (expression -> func_call .)
    EQ              reduce using rule 28 (expression -> func_call .)
    NEQ             reduce using rule 28 (expression -> func_call .)
    LT              reduce using rule 28 (expression -> func_call .)
    GT              reduce using rule 28 (expression -> func_call .)
    LTE             reduce using rule 28 (expression -> func_call .)
    GTE             reduce using rule 28 (expression -> func_call .)
    AND             reduce using rule 28 (expression -> func_call .)
    OR              reduce using rule 28 (expression -> func_call .)
    NOT             reduce using rule 28 (expression -> func_call .)
    SEMICOLON       reduce using rule 28 (expression -> func_call .)
    TO              reduce using rule 28 (expression -> func_call .)
    DOWNTO          reduce using rule 28 (expression -> func_call .)
    ELSE            reduce using rule 28 (expression -> func_call .)

  ! RANGE           [ reduce using rule 50 (type -> func_call .) ]
  ! PLUS            [ reduce using rule 50 (type -> func_call .) ]
  ! MINUS           [ reduce using rule 50 (type -> func_call .) ]
  ! TIMES           [ reduce using rule 50 (type -> func_call .) ]
  ! DIVISION        [ reduce using rule 50 (type -> func_call .) ]
  ! DIV             [ reduce using rule 50 (type -> func_call .) ]
  ! MOD             [ reduce using rule 50 (type -> func_call .) ]
  ! EQ              [ reduce using rule 50 (type -> func_call .) ]
  ! NEQ             [ reduce using rule 50 (type -> func_call .) ]
  ! LT              [ reduce using rule 50 (type -> func_call .) ]
  ! GT              [ reduce using rule 50 (type -> func_call .) ]
  ! LTE             [ reduce using rule 50 (type -> func_call .) ]
  ! GTE             [ reduce using rule 50 (type -> func_call .) ]
  ! AND             [ reduce using rule 50 (type -> func_call .) ]
  ! OR              [ reduce using rule 50 (type -> func_call .) ]
  ! NOT             [ reduce using rule 50 (type -> func_call .) ]
  ! SEMICOLON       [ reduce using rule 50 (type -> func_call .) ]
  ! TO              [ reduce using rule 50 (type -> func_call .) ]
  ! DOWNTO          [ reduce using rule 50 (type -> func_call .) ]
  ! ELSE            [ reduce using rule 50 (type -> func_call .) ]


state 91

    (29) expression -> condition .

    RANGE           reduce using rule 29 (expression -> condition .)
    PLUS            reduce using rule 29 (expression -> condition .)
    MINUS           reduce using rule 29 (expression -> condition .)
    TIMES           reduce using rule 29 (expression -> condition .)
    DIVISION        reduce using rule 29 (expression -> condition .)
    DIV             reduce using rule 29 (expression -> condition .)
    MOD             reduce using rule 29 (expression -> condition .)
    EQ              reduce using rule 29 (expression -> condition .)
    NEQ             reduce using rule 29 (expression -> condition .)
    LT              reduce using rule 29 (expression -> condition .)
    GT              reduce using rule 29 (expression -> condition .)
    LTE             reduce using rule 29 (expression -> condition .)
    GTE             reduce using rule 29 (expression -> condition .)
    AND             reduce using rule 29 (expression -> condition .)
    OR              reduce using rule 29 (expression -> condition .)
    NOT             reduce using rule 29 (expression -> condition .)
    SEMICOLON       reduce using rule 29 (expression -> condition .)
    TO              reduce using rule 29 (expression -> condition .)
    DOWNTO          reduce using rule 29 (expression -> condition .)
    ELSE            reduce using rule 29 (expression -> condition .)
    RPAREN          reduce using rule 29 (expression -> condition .)
    THEN            reduce using rule 29 (expression -> condition .)
    DO              reduce using rule 29 (expression -> condition .)


state 92

    (81) length -> LENGTH . LPAREN type RPAREN

    LPAREN          shift and go to state 152


state 93

    (99) cond_if -> IF condition THEN . statement
    (100) cond_if -> IF condition THEN . statement ELSE statement
    (101) cond_if -> IF condition THEN . if_body
    (102) cond_if -> IF condition THEN . if_body ELSE if_body
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (108) if_body -> . BEGIN statements END
    (118) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (24) assignment -> . IDENTIFIER ASSIGNMENT length
    (98) procedure_call -> . IDENTIFIER
    (99) cond_if -> . IF condition THEN statement
    (100) cond_if -> . IF condition THEN statement ELSE statement
    (101) cond_if -> . IF condition THEN if_body
    (102) cond_if -> . IF condition THEN if_body ELSE if_body
    (115) while_loop -> . WHILE condition DO statement
    (116) while_loop -> . WHILE condition DO if_body
    (111) for_loop -> . FOR assignment to type DO statement
    (112) for_loop -> . FOR assignment to type DO if_body
    (113) for_loop -> . FOR assignment downto type DO statement
    (114) for_loop -> . FOR assignment downto type DO if_body
    (117) readln -> . READLN LPAREN type RPAREN

    BEGIN           shift and go to state 155
    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    statement                      shift and go to state 153
    if_body                        shift and go to state 154
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 94

    (103) condition -> expression comparator . expression
    (106) condition -> expression comparator . type
    (25) expression -> . type operation type
    (26) expression -> . expression_paren
    (27) expression -> . expression operation expression
    (28) expression -> . func_call
    (29) expression -> . condition
    (44) type -> . integer
    (45) type -> . real
    (46) type -> . string
    (47) type -> . char
    (48) type -> . boolean
    (49) type -> . identifier
    (50) type -> . func_call
    (30) expression_paren -> . LPAREN expression RPAREN
    (92) func_call -> . IDENTIFIER LPAREN arg_list RPAREN
    (103) condition -> . expression comparator expression
    (104) condition -> . type comparator expression
    (105) condition -> . type comparator type
    (106) condition -> . expression comparator type
    (107) condition -> . type
    (51) integer -> . INTEGER
    (52) real -> . REAL
    (53) string -> . STRING
    (54) char -> . CHAR
    (55) boolean -> . BOOLEAN
    (56) identifier -> . IDENTIFIER

    LPAREN          shift and go to state 57
    IDENTIFIER      shift and go to state 58
    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63

    expression                     shift and go to state 156
    type                           shift and go to state 157
    expression_paren               shift and go to state 49
    func_call                      shift and go to state 50
    condition                      shift and go to state 91
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56

state 95

    (27) expression -> expression operation . expression
    (25) expression -> . type operation type
    (26) expression -> . expression_paren
    (27) expression -> . expression operation expression
    (28) expression -> . func_call
    (29) expression -> . condition
    (44) type -> . integer
    (45) type -> . real
    (46) type -> . string
    (47) type -> . char
    (48) type -> . boolean
    (49) type -> . identifier
    (50) type -> . func_call
    (30) expression_paren -> . LPAREN expression RPAREN
    (92) func_call -> . IDENTIFIER LPAREN arg_list RPAREN
    (103) condition -> . expression comparator expression
    (104) condition -> . type comparator expression
    (105) condition -> . type comparator type
    (106) condition -> . expression comparator type
    (107) condition -> . type
    (51) integer -> . INTEGER
    (52) real -> . REAL
    (53) string -> . STRING
    (54) char -> . CHAR
    (55) boolean -> . BOOLEAN
    (56) identifier -> . IDENTIFIER

    LPAREN          shift and go to state 57
    IDENTIFIER      shift and go to state 58
    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63

    expression                     shift and go to state 158
    type                           shift and go to state 130
    expression_paren               shift and go to state 49
    func_call                      shift and go to state 50
    condition                      shift and go to state 91
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56

state 96

    (63) comparator -> eq .

    LPAREN          reduce using rule 63 (comparator -> eq .)
    IDENTIFIER      reduce using rule 63 (comparator -> eq .)
    INTEGER         reduce using rule 63 (comparator -> eq .)
    REAL            reduce using rule 63 (comparator -> eq .)
    STRING          reduce using rule 63 (comparator -> eq .)
    CHAR            reduce using rule 63 (comparator -> eq .)
    BOOLEAN         reduce using rule 63 (comparator -> eq .)


state 97

    (64) comparator -> neq .

    LPAREN          reduce using rule 64 (comparator -> neq .)
    IDENTIFIER      reduce using rule 64 (comparator -> neq .)
    INTEGER         reduce using rule 64 (comparator -> neq .)
    REAL            reduce using rule 64 (comparator -> neq .)
    STRING          reduce using rule 64 (comparator -> neq .)
    CHAR            reduce using rule 64 (comparator -> neq .)
    BOOLEAN         reduce using rule 64 (comparator -> neq .)


state 98

    (65) comparator -> lt .

    LPAREN          reduce using rule 65 (comparator -> lt .)
    IDENTIFIER      reduce using rule 65 (comparator -> lt .)
    INTEGER         reduce using rule 65 (comparator -> lt .)
    REAL            reduce using rule 65 (comparator -> lt .)
    STRING          reduce using rule 65 (comparator -> lt .)
    CHAR            reduce using rule 65 (comparator -> lt .)
    BOOLEAN         reduce using rule 65 (comparator -> lt .)


state 99

    (66) comparator -> gt .

    LPAREN          reduce using rule 66 (comparator -> gt .)
    IDENTIFIER      reduce using rule 66 (comparator -> gt .)
    INTEGER         reduce using rule 66 (comparator -> gt .)
    REAL            reduce using rule 66 (comparator -> gt .)
    STRING          reduce using rule 66 (comparator -> gt .)
    CHAR            reduce using rule 66 (comparator -> gt .)
    BOOLEAN         reduce using rule 66 (comparator -> gt .)


state 100

    (67) comparator -> lte .

    LPAREN          reduce using rule 67 (comparator -> lte .)
    IDENTIFIER      reduce using rule 67 (comparator -> lte .)
    INTEGER         reduce using rule 67 (comparator -> lte .)
    REAL            reduce using rule 67 (comparator -> lte .)
    STRING          reduce using rule 67 (comparator -> lte .)
    CHAR            reduce using rule 67 (comparator -> lte .)
    BOOLEAN         reduce using rule 67 (comparator -> lte .)


state 101

    (68) comparator -> gte .

    LPAREN          reduce using rule 68 (comparator -> gte .)
    IDENTIFIER      reduce using rule 68 (comparator -> gte .)
    INTEGER         reduce using rule 68 (comparator -> gte .)
    REAL            reduce using rule 68 (comparator -> gte .)
    STRING          reduce using rule 68 (comparator -> gte .)
    CHAR            reduce using rule 68 (comparator -> gte .)
    BOOLEAN         reduce using rule 68 (comparator -> gte .)


state 102

    (69) comparator -> and .

    LPAREN          reduce using rule 69 (comparator -> and .)
    IDENTIFIER      reduce using rule 69 (comparator -> and .)
    INTEGER         reduce using rule 69 (comparator -> and .)
    REAL            reduce using rule 69 (comparator -> and .)
    STRING          reduce using rule 69 (comparator -> and .)
    CHAR            reduce using rule 69 (comparator -> and .)
    BOOLEAN         reduce using rule 69 (comparator -> and .)


state 103

    (70) comparator -> or .

    LPAREN          reduce using rule 70 (comparator -> or .)
    IDENTIFIER      reduce using rule 70 (comparator -> or .)
    INTEGER         reduce using rule 70 (comparator -> or .)
    REAL            reduce using rule 70 (comparator -> or .)
    STRING          reduce using rule 70 (comparator -> or .)
    CHAR            reduce using rule 70 (comparator -> or .)
    BOOLEAN         reduce using rule 70 (comparator -> or .)


state 104

    (71) comparator -> not .

    LPAREN          reduce using rule 71 (comparator -> not .)
    IDENTIFIER      reduce using rule 71 (comparator -> not .)
    INTEGER         reduce using rule 71 (comparator -> not .)
    REAL            reduce using rule 71 (comparator -> not .)
    STRING          reduce using rule 71 (comparator -> not .)
    CHAR            reduce using rule 71 (comparator -> not .)
    BOOLEAN         reduce using rule 71 (comparator -> not .)


state 105

    (31) operation -> plus .

    LPAREN          reduce using rule 31 (operation -> plus .)
    IDENTIFIER      reduce using rule 31 (operation -> plus .)
    INTEGER         reduce using rule 31 (operation -> plus .)
    REAL            reduce using rule 31 (operation -> plus .)
    STRING          reduce using rule 31 (operation -> plus .)
    CHAR            reduce using rule 31 (operation -> plus .)
    BOOLEAN         reduce using rule 31 (operation -> plus .)


state 106

    (32) operation -> minus .

    LPAREN          reduce using rule 32 (operation -> minus .)
    IDENTIFIER      reduce using rule 32 (operation -> minus .)
    INTEGER         reduce using rule 32 (operation -> minus .)
    REAL            reduce using rule 32 (operation -> minus .)
    STRING          reduce using rule 32 (operation -> minus .)
    CHAR            reduce using rule 32 (operation -> minus .)
    BOOLEAN         reduce using rule 32 (operation -> minus .)


state 107

    (33) operation -> times .

    LPAREN          reduce using rule 33 (operation -> times .)
    IDENTIFIER      reduce using rule 33 (operation -> times .)
    INTEGER         reduce using rule 33 (operation -> times .)
    REAL            reduce using rule 33 (operation -> times .)
    STRING          reduce using rule 33 (operation -> times .)
    CHAR            reduce using rule 33 (operation -> times .)
    BOOLEAN         reduce using rule 33 (operation -> times .)


state 108

    (34) operation -> division .

    LPAREN          reduce using rule 34 (operation -> division .)
    IDENTIFIER      reduce using rule 34 (operation -> division .)
    INTEGER         reduce using rule 34 (operation -> division .)
    REAL            reduce using rule 34 (operation -> division .)
    STRING          reduce using rule 34 (operation -> division .)
    CHAR            reduce using rule 34 (operation -> division .)
    BOOLEAN         reduce using rule 34 (operation -> division .)


state 109

    (35) operation -> div .

    LPAREN          reduce using rule 35 (operation -> div .)
    IDENTIFIER      reduce using rule 35 (operation -> div .)
    INTEGER         reduce using rule 35 (operation -> div .)
    REAL            reduce using rule 35 (operation -> div .)
    STRING          reduce using rule 35 (operation -> div .)
    CHAR            reduce using rule 35 (operation -> div .)
    BOOLEAN         reduce using rule 35 (operation -> div .)


state 110

    (36) operation -> mod .

    LPAREN          reduce using rule 36 (operation -> mod .)
    IDENTIFIER      reduce using rule 36 (operation -> mod .)
    INTEGER         reduce using rule 36 (operation -> mod .)
    REAL            reduce using rule 36 (operation -> mod .)
    STRING          reduce using rule 36 (operation -> mod .)
    CHAR            reduce using rule 36 (operation -> mod .)
    BOOLEAN         reduce using rule 36 (operation -> mod .)


state 111

    (37) operation -> RANGE .

    LPAREN          reduce using rule 37 (operation -> RANGE .)
    IDENTIFIER      reduce using rule 37 (operation -> RANGE .)
    INTEGER         reduce using rule 37 (operation -> RANGE .)
    REAL            reduce using rule 37 (operation -> RANGE .)
    STRING          reduce using rule 37 (operation -> RANGE .)
    CHAR            reduce using rule 37 (operation -> RANGE .)
    BOOLEAN         reduce using rule 37 (operation -> RANGE .)


state 112

    (72) eq -> EQ .

    LPAREN          reduce using rule 72 (eq -> EQ .)
    IDENTIFIER      reduce using rule 72 (eq -> EQ .)
    INTEGER         reduce using rule 72 (eq -> EQ .)
    REAL            reduce using rule 72 (eq -> EQ .)
    STRING          reduce using rule 72 (eq -> EQ .)
    CHAR            reduce using rule 72 (eq -> EQ .)
    BOOLEAN         reduce using rule 72 (eq -> EQ .)


state 113

    (73) neq -> NEQ .

    LPAREN          reduce using rule 73 (neq -> NEQ .)
    IDENTIFIER      reduce using rule 73 (neq -> NEQ .)
    INTEGER         reduce using rule 73 (neq -> NEQ .)
    REAL            reduce using rule 73 (neq -> NEQ .)
    STRING          reduce using rule 73 (neq -> NEQ .)
    CHAR            reduce using rule 73 (neq -> NEQ .)
    BOOLEAN         reduce using rule 73 (neq -> NEQ .)


state 114

    (74) lt -> LT .

    LPAREN          reduce using rule 74 (lt -> LT .)
    IDENTIFIER      reduce using rule 74 (lt -> LT .)
    INTEGER         reduce using rule 74 (lt -> LT .)
    REAL            reduce using rule 74 (lt -> LT .)
    STRING          reduce using rule 74 (lt -> LT .)
    CHAR            reduce using rule 74 (lt -> LT .)
    BOOLEAN         reduce using rule 74 (lt -> LT .)


state 115

    (75) gt -> GT .

    LPAREN          reduce using rule 75 (gt -> GT .)
    IDENTIFIER      reduce using rule 75 (gt -> GT .)
    INTEGER         reduce using rule 75 (gt -> GT .)
    REAL            reduce using rule 75 (gt -> GT .)
    STRING          reduce using rule 75 (gt -> GT .)
    CHAR            reduce using rule 75 (gt -> GT .)
    BOOLEAN         reduce using rule 75 (gt -> GT .)


state 116

    (76) lte -> LTE .

    LPAREN          reduce using rule 76 (lte -> LTE .)
    IDENTIFIER      reduce using rule 76 (lte -> LTE .)
    INTEGER         reduce using rule 76 (lte -> LTE .)
    REAL            reduce using rule 76 (lte -> LTE .)
    STRING          reduce using rule 76 (lte -> LTE .)
    CHAR            reduce using rule 76 (lte -> LTE .)
    BOOLEAN         reduce using rule 76 (lte -> LTE .)


state 117

    (77) gte -> GTE .

    LPAREN          reduce using rule 77 (gte -> GTE .)
    IDENTIFIER      reduce using rule 77 (gte -> GTE .)
    INTEGER         reduce using rule 77 (gte -> GTE .)
    REAL            reduce using rule 77 (gte -> GTE .)
    STRING          reduce using rule 77 (gte -> GTE .)
    CHAR            reduce using rule 77 (gte -> GTE .)
    BOOLEAN         reduce using rule 77 (gte -> GTE .)


state 118

    (78) and -> AND .

    LPAREN          reduce using rule 78 (and -> AND .)
    IDENTIFIER      reduce using rule 78 (and -> AND .)
    INTEGER         reduce using rule 78 (and -> AND .)
    REAL            reduce using rule 78 (and -> AND .)
    STRING          reduce using rule 78 (and -> AND .)
    CHAR            reduce using rule 78 (and -> AND .)
    BOOLEAN         reduce using rule 78 (and -> AND .)


state 119

    (79) or -> OR .

    LPAREN          reduce using rule 79 (or -> OR .)
    IDENTIFIER      reduce using rule 79 (or -> OR .)
    INTEGER         reduce using rule 79 (or -> OR .)
    REAL            reduce using rule 79 (or -> OR .)
    STRING          reduce using rule 79 (or -> OR .)
    CHAR            reduce using rule 79 (or -> OR .)
    BOOLEAN         reduce using rule 79 (or -> OR .)


state 120

    (80) not -> NOT .

    LPAREN          reduce using rule 80 (not -> NOT .)
    IDENTIFIER      reduce using rule 80 (not -> NOT .)
    INTEGER         reduce using rule 80 (not -> NOT .)
    REAL            reduce using rule 80 (not -> NOT .)
    STRING          reduce using rule 80 (not -> NOT .)
    CHAR            reduce using rule 80 (not -> NOT .)
    BOOLEAN         reduce using rule 80 (not -> NOT .)


state 121

    (57) plus -> PLUS .

    LPAREN          reduce using rule 57 (plus -> PLUS .)
    IDENTIFIER      reduce using rule 57 (plus -> PLUS .)
    INTEGER         reduce using rule 57 (plus -> PLUS .)
    REAL            reduce using rule 57 (plus -> PLUS .)
    STRING          reduce using rule 57 (plus -> PLUS .)
    CHAR            reduce using rule 57 (plus -> PLUS .)
    BOOLEAN         reduce using rule 57 (plus -> PLUS .)


state 122

    (58) minus -> MINUS .

    LPAREN          reduce using rule 58 (minus -> MINUS .)
    IDENTIFIER      reduce using rule 58 (minus -> MINUS .)
    INTEGER         reduce using rule 58 (minus -> MINUS .)
    REAL            reduce using rule 58 (minus -> MINUS .)
    STRING          reduce using rule 58 (minus -> MINUS .)
    CHAR            reduce using rule 58 (minus -> MINUS .)
    BOOLEAN         reduce using rule 58 (minus -> MINUS .)


state 123

    (59) times -> TIMES .

    LPAREN          reduce using rule 59 (times -> TIMES .)
    IDENTIFIER      reduce using rule 59 (times -> TIMES .)
    INTEGER         reduce using rule 59 (times -> TIMES .)
    REAL            reduce using rule 59 (times -> TIMES .)
    STRING          reduce using rule 59 (times -> TIMES .)
    CHAR            reduce using rule 59 (times -> TIMES .)
    BOOLEAN         reduce using rule 59 (times -> TIMES .)


state 124

    (60) division -> DIVISION .

    LPAREN          reduce using rule 60 (division -> DIVISION .)
    IDENTIFIER      reduce using rule 60 (division -> DIVISION .)
    INTEGER         reduce using rule 60 (division -> DIVISION .)
    REAL            reduce using rule 60 (division -> DIVISION .)
    STRING          reduce using rule 60 (division -> DIVISION .)
    CHAR            reduce using rule 60 (division -> DIVISION .)
    BOOLEAN         reduce using rule 60 (division -> DIVISION .)


state 125

    (61) div -> DIV .

    LPAREN          reduce using rule 61 (div -> DIV .)
    IDENTIFIER      reduce using rule 61 (div -> DIV .)
    INTEGER         reduce using rule 61 (div -> DIV .)
    REAL            reduce using rule 61 (div -> DIV .)
    STRING          reduce using rule 61 (div -> DIV .)
    CHAR            reduce using rule 61 (div -> DIV .)
    BOOLEAN         reduce using rule 61 (div -> DIV .)


state 126

    (62) mod -> MOD .

    LPAREN          reduce using rule 62 (mod -> MOD .)
    IDENTIFIER      reduce using rule 62 (mod -> MOD .)
    INTEGER         reduce using rule 62 (mod -> MOD .)
    REAL            reduce using rule 62 (mod -> MOD .)
    STRING          reduce using rule 62 (mod -> MOD .)
    CHAR            reduce using rule 62 (mod -> MOD .)
    BOOLEAN         reduce using rule 62 (mod -> MOD .)


state 127

    (104) condition -> type comparator . expression
    (105) condition -> type comparator . type
    (25) expression -> . type operation type
    (26) expression -> . expression_paren
    (27) expression -> . expression operation expression
    (28) expression -> . func_call
    (29) expression -> . condition
    (44) type -> . integer
    (45) type -> . real
    (46) type -> . string
    (47) type -> . char
    (48) type -> . boolean
    (49) type -> . identifier
    (50) type -> . func_call
    (30) expression_paren -> . LPAREN expression RPAREN
    (92) func_call -> . IDENTIFIER LPAREN arg_list RPAREN
    (103) condition -> . expression comparator expression
    (104) condition -> . type comparator expression
    (105) condition -> . type comparator type
    (106) condition -> . expression comparator type
    (107) condition -> . type
    (51) integer -> . INTEGER
    (52) real -> . REAL
    (53) string -> . STRING
    (54) char -> . CHAR
    (55) boolean -> . BOOLEAN
    (56) identifier -> . IDENTIFIER

    LPAREN          shift and go to state 57
    IDENTIFIER      shift and go to state 58
    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63

    type                           shift and go to state 159
    expression                     shift and go to state 160
    expression_paren               shift and go to state 49
    func_call                      shift and go to state 50
    condition                      shift and go to state 91
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56

state 128

    (25) expression -> type operation . type
    (44) type -> . integer
    (45) type -> . real
    (46) type -> . string
    (47) type -> . char
    (48) type -> . boolean
    (49) type -> . identifier
    (50) type -> . func_call
    (51) integer -> . INTEGER
    (52) real -> . REAL
    (53) string -> . STRING
    (54) char -> . CHAR
    (55) boolean -> . BOOLEAN
    (56) identifier -> . IDENTIFIER
    (92) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 86

    type                           shift and go to state 161
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 85

state 129

    (30) expression_paren -> LPAREN expression . RPAREN
    (27) expression -> expression . operation expression
    (103) condition -> expression . comparator expression
    (106) condition -> expression . comparator type
    (31) operation -> . plus
    (32) operation -> . minus
    (33) operation -> . times
    (34) operation -> . division
    (35) operation -> . div
    (36) operation -> . mod
    (37) operation -> . RANGE
    (63) comparator -> . eq
    (64) comparator -> . neq
    (65) comparator -> . lt
    (66) comparator -> . gt
    (67) comparator -> . lte
    (68) comparator -> . gte
    (69) comparator -> . and
    (70) comparator -> . or
    (71) comparator -> . not
    (57) plus -> . PLUS
    (58) minus -> . MINUS
    (59) times -> . TIMES
    (60) division -> . DIVISION
    (61) div -> . DIV
    (62) mod -> . MOD
    (72) eq -> . EQ
    (73) neq -> . NEQ
    (74) lt -> . LT
    (75) gt -> . GT
    (76) lte -> . LTE
    (77) gte -> . GTE
    (78) and -> . AND
    (79) or -> . OR
    (80) not -> . NOT

    RPAREN          shift and go to state 162
    RANGE           shift and go to state 111
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVISION        shift and go to state 124
    DIV             shift and go to state 125
    MOD             shift and go to state 126
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LT              shift and go to state 114
    GT              shift and go to state 115
    LTE             shift and go to state 116
    GTE             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119
    NOT             shift and go to state 120

    operation                      shift and go to state 95
    comparator                     shift and go to state 94
    plus                           shift and go to state 105
    minus                          shift and go to state 106
    times                          shift and go to state 107
    division                       shift and go to state 108
    div                            shift and go to state 109
    mod                            shift and go to state 110
    eq                             shift and go to state 96
    neq                            shift and go to state 97
    lt                             shift and go to state 98
    gt                             shift and go to state 99
    lte                            shift and go to state 100
    gte                            shift and go to state 101
    and                            shift and go to state 102
    or                             shift and go to state 103
    not                            shift and go to state 104

state 130

    (25) expression -> type . operation type
    (104) condition -> type . comparator expression
    (105) condition -> type . comparator type
    (107) condition -> type .
    (31) operation -> . plus
    (32) operation -> . minus
    (33) operation -> . times
    (34) operation -> . division
    (35) operation -> . div
    (36) operation -> . mod
    (37) operation -> . RANGE
    (63) comparator -> . eq
    (64) comparator -> . neq
    (65) comparator -> . lt
    (66) comparator -> . gt
    (67) comparator -> . lte
    (68) comparator -> . gte
    (69) comparator -> . and
    (70) comparator -> . or
    (71) comparator -> . not
    (57) plus -> . PLUS
    (58) minus -> . MINUS
    (59) times -> . TIMES
    (60) division -> . DIVISION
    (61) div -> . DIV
    (62) mod -> . MOD
    (72) eq -> . EQ
    (73) neq -> . NEQ
    (74) lt -> . LT
    (75) gt -> . GT
    (76) lte -> . LTE
    (77) gte -> . GTE
    (78) and -> . AND
    (79) or -> . OR
    (80) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    RPAREN          reduce using rule 107 (condition -> type .)
    THEN            reduce using rule 107 (condition -> type .)
    DO              reduce using rule 107 (condition -> type .)
    SEMICOLON       reduce using rule 107 (condition -> type .)
    TO              reduce using rule 107 (condition -> type .)
    DOWNTO          reduce using rule 107 (condition -> type .)
    ELSE            reduce using rule 107 (condition -> type .)
    RANGE           shift and go to state 111
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVISION        shift and go to state 124
    DIV             shift and go to state 125
    MOD             shift and go to state 126
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LT              shift and go to state 114
    GT              shift and go to state 115
    LTE             shift and go to state 116
    GTE             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119
    NOT             shift and go to state 120

  ! RANGE           [ reduce using rule 107 (condition -> type .) ]
  ! PLUS            [ reduce using rule 107 (condition -> type .) ]
  ! MINUS           [ reduce using rule 107 (condition -> type .) ]
  ! TIMES           [ reduce using rule 107 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 107 (condition -> type .) ]
  ! DIV             [ reduce using rule 107 (condition -> type .) ]
  ! MOD             [ reduce using rule 107 (condition -> type .) ]
  ! EQ              [ reduce using rule 107 (condition -> type .) ]
  ! NEQ             [ reduce using rule 107 (condition -> type .) ]
  ! LT              [ reduce using rule 107 (condition -> type .) ]
  ! GT              [ reduce using rule 107 (condition -> type .) ]
  ! LTE             [ reduce using rule 107 (condition -> type .) ]
  ! GTE             [ reduce using rule 107 (condition -> type .) ]
  ! AND             [ reduce using rule 107 (condition -> type .) ]
  ! OR              [ reduce using rule 107 (condition -> type .) ]
  ! NOT             [ reduce using rule 107 (condition -> type .) ]

    operation                      shift and go to state 128
    comparator                     shift and go to state 127
    plus                           shift and go to state 105
    minus                          shift and go to state 106
    times                          shift and go to state 107
    division                       shift and go to state 108
    div                            shift and go to state 109
    mod                            shift and go to state 110
    eq                             shift and go to state 96
    neq                            shift and go to state 97
    lt                             shift and go to state 98
    gt                             shift and go to state 99
    lte                            shift and go to state 100
    gte                            shift and go to state 101
    and                            shift and go to state 102
    or                             shift and go to state 103
    not                            shift and go to state 104

state 131

    (92) func_call -> IDENTIFIER LPAREN . arg_list RPAREN
    (93) arg_list -> . IDENTIFIER COMMA arg_list
    (94) arg_list -> . IDENTIFIER
    (95) arg_list -> .

    IDENTIFIER      shift and go to state 163
    RPAREN          reduce using rule 95 (arg_list -> .)

    arg_list                       shift and go to state 164

state 132

    (115) while_loop -> WHILE condition DO . statement
    (116) while_loop -> WHILE condition DO . if_body
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (108) if_body -> . BEGIN statements END
    (118) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (24) assignment -> . IDENTIFIER ASSIGNMENT length
    (98) procedure_call -> . IDENTIFIER
    (99) cond_if -> . IF condition THEN statement
    (100) cond_if -> . IF condition THEN statement ELSE statement
    (101) cond_if -> . IF condition THEN if_body
    (102) cond_if -> . IF condition THEN if_body ELSE if_body
    (115) while_loop -> . WHILE condition DO statement
    (116) while_loop -> . WHILE condition DO if_body
    (111) for_loop -> . FOR assignment to type DO statement
    (112) for_loop -> . FOR assignment to type DO if_body
    (113) for_loop -> . FOR assignment downto type DO statement
    (114) for_loop -> . FOR assignment downto type DO if_body
    (117) readln -> . READLN LPAREN type RPAREN

    BEGIN           shift and go to state 155
    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    statement                      shift and go to state 165
    if_body                        shift and go to state 166
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 133

    (111) for_loop -> FOR assignment to . type DO statement
    (112) for_loop -> FOR assignment to . type DO if_body
    (44) type -> . integer
    (45) type -> . real
    (46) type -> . string
    (47) type -> . char
    (48) type -> . boolean
    (49) type -> . identifier
    (50) type -> . func_call
    (51) integer -> . INTEGER
    (52) real -> . REAL
    (53) string -> . STRING
    (54) char -> . CHAR
    (55) boolean -> . BOOLEAN
    (56) identifier -> . IDENTIFIER
    (92) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 86

    type                           shift and go to state 167
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 85

state 134

    (113) for_loop -> FOR assignment downto . type DO statement
    (114) for_loop -> FOR assignment downto . type DO if_body
    (44) type -> . integer
    (45) type -> . real
    (46) type -> . string
    (47) type -> . char
    (48) type -> . boolean
    (49) type -> . identifier
    (50) type -> . func_call
    (51) integer -> . INTEGER
    (52) real -> . REAL
    (53) string -> . STRING
    (54) char -> . CHAR
    (55) boolean -> . BOOLEAN
    (56) identifier -> . IDENTIFIER
    (92) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 86

    type                           shift and go to state 168
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 85

state 135

    (109) to -> TO .

    INTEGER         reduce using rule 109 (to -> TO .)
    REAL            reduce using rule 109 (to -> TO .)
    STRING          reduce using rule 109 (to -> TO .)
    CHAR            reduce using rule 109 (to -> TO .)
    BOOLEAN         reduce using rule 109 (to -> TO .)
    IDENTIFIER      reduce using rule 109 (to -> TO .)


state 136

    (110) downto -> DOWNTO .

    INTEGER         reduce using rule 110 (downto -> DOWNTO .)
    REAL            reduce using rule 110 (downto -> DOWNTO .)
    STRING          reduce using rule 110 (downto -> DOWNTO .)
    CHAR            reduce using rule 110 (downto -> DOWNTO .)
    BOOLEAN         reduce using rule 110 (downto -> DOWNTO .)
    IDENTIFIER      reduce using rule 110 (downto -> DOWNTO .)


state 137

    (117) readln -> READLN LPAREN type . RPAREN

    RPAREN          shift and go to state 169


state 138

    (82) function -> func_header SEMICOLON VAR func_variable_declaration . func_body SEMICOLON
    (91) func_body -> . BEGIN statements END

    BEGIN           shift and go to state 70

    func_body                      shift and go to state 170

state 139

    (89) func_variable_declaration -> identifier_list . COLON type_name SEMICOLON func_variable_declaration
    (90) func_variable_declaration -> identifier_list . COLON type_name SEMICOLON

    COLON           shift and go to state 171


state 140

    (83) function -> func_header SEMICOLON func_body SEMICOLON .

    VAR             reduce using rule 83 (function -> func_header SEMICOLON func_body SEMICOLON .)
    BEGIN           reduce using rule 83 (function -> func_header SEMICOLON func_body SEMICOLON .)
    PROCEDURE       reduce using rule 83 (function -> func_header SEMICOLON func_body SEMICOLON .)
    FUNCTION        reduce using rule 83 (function -> func_header SEMICOLON func_body SEMICOLON .)


state 141

    (91) func_body -> BEGIN statements . END

    END             shift and go to state 172


state 142

    (96) procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body . SEMICOLON

    SEMICOLON       shift and go to state 173


state 143

    (97) procedure_body -> BEGIN . statements END
    (13) statements -> . statement SEMICOLON statements
    (14) statements -> . statement SEMICOLON
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (118) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (24) assignment -> . IDENTIFIER ASSIGNMENT length
    (98) procedure_call -> . IDENTIFIER
    (99) cond_if -> . IF condition THEN statement
    (100) cond_if -> . IF condition THEN statement ELSE statement
    (101) cond_if -> . IF condition THEN if_body
    (102) cond_if -> . IF condition THEN if_body ELSE if_body
    (115) while_loop -> . WHILE condition DO statement
    (116) while_loop -> . WHILE condition DO if_body
    (111) for_loop -> . FOR assignment to type DO statement
    (112) for_loop -> . FOR assignment to type DO if_body
    (113) for_loop -> . FOR assignment downto type DO statement
    (114) for_loop -> . FOR assignment downto type DO if_body
    (117) readln -> . READLN LPAREN type RPAREN

    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    statements                     shift and go to state 174
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 144

    (88) func_arg -> IDENTIFIER . COLON type_name

    COLON           shift and go to state 175


state 145

    (84) func_header -> FUNCTION IDENTIFIER LPAREN func_args . RPAREN COLON type_name

    RPAREN          shift and go to state 176


state 146

    (85) func_header -> FUNCTION IDENTIFIER LPAREN RPAREN . COLON type_name

    COLON           shift and go to state 177


state 147

    (86) func_args -> func_arg . COMMA func_args
    (87) func_args -> func_arg .

    COMMA           shift and go to state 178
    RPAREN          reduce using rule 87 (func_args -> func_arg .)


state 148

    (7) variable_declaration -> identifier_list COLON type_name SEMICOLON . variable_declaration
    (8) variable_declaration -> identifier_list COLON type_name SEMICOLON .
    (7) variable_declaration -> . identifier_list COLON type_name SEMICOLON variable_declaration
    (8) variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    BEGIN           reduce using rule 8 (variable_declaration -> identifier_list COLON type_name SEMICOLON .)
    IDENTIFIER      shift and go to state 17

    identifier_list                shift and go to state 16
    variable_declaration           shift and go to state 179

state 149

    (11) array_type -> ARRAY LBRACKET . type RANGE type RBRACKET OF type_name
    (44) type -> . integer
    (45) type -> . real
    (46) type -> . string
    (47) type -> . char
    (48) type -> . boolean
    (49) type -> . identifier
    (50) type -> . func_call
    (51) integer -> . INTEGER
    (52) real -> . REAL
    (53) string -> . STRING
    (54) char -> . CHAR
    (55) boolean -> . BOOLEAN
    (56) identifier -> . IDENTIFIER
    (92) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 86

    type                           shift and go to state 180
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 85

state 150

    (118) writeln -> WRITELN LPAREN writeln_args RPAREN .

    SEMICOLON       reduce using rule 118 (writeln -> WRITELN LPAREN writeln_args RPAREN .)
    ELSE            reduce using rule 118 (writeln -> WRITELN LPAREN writeln_args RPAREN .)


state 151

    (119) writeln_args -> type COMMA . writeln_args
    (119) writeln_args -> . type COMMA writeln_args
    (120) writeln_args -> . type
    (44) type -> . integer
    (45) type -> . real
    (46) type -> . string
    (47) type -> . char
    (48) type -> . boolean
    (49) type -> . identifier
    (50) type -> . func_call
    (51) integer -> . INTEGER
    (52) real -> . REAL
    (53) string -> . STRING
    (54) char -> . CHAR
    (55) boolean -> . BOOLEAN
    (56) identifier -> . IDENTIFIER
    (92) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 86

    type                           shift and go to state 84
    writeln_args                   shift and go to state 181
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 85

state 152

    (81) length -> LENGTH LPAREN . type RPAREN
    (44) type -> . integer
    (45) type -> . real
    (46) type -> . string
    (47) type -> . char
    (48) type -> . boolean
    (49) type -> . identifier
    (50) type -> . func_call
    (51) integer -> . INTEGER
    (52) real -> . REAL
    (53) string -> . STRING
    (54) char -> . CHAR
    (55) boolean -> . BOOLEAN
    (56) identifier -> . IDENTIFIER
    (92) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 86

    type                           shift and go to state 182
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 85

state 153

    (99) cond_if -> IF condition THEN statement .
    (100) cond_if -> IF condition THEN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 99 (cond_if -> IF condition THEN statement .)
    ELSE            shift and go to state 183

  ! ELSE            [ reduce using rule 99 (cond_if -> IF condition THEN statement .) ]


state 154

    (101) cond_if -> IF condition THEN if_body .
    (102) cond_if -> IF condition THEN if_body . ELSE if_body

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 101 (cond_if -> IF condition THEN if_body .)
    ELSE            shift and go to state 184

  ! ELSE            [ reduce using rule 101 (cond_if -> IF condition THEN if_body .) ]


state 155

    (108) if_body -> BEGIN . statements END
    (13) statements -> . statement SEMICOLON statements
    (14) statements -> . statement SEMICOLON
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (118) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (24) assignment -> . IDENTIFIER ASSIGNMENT length
    (98) procedure_call -> . IDENTIFIER
    (99) cond_if -> . IF condition THEN statement
    (100) cond_if -> . IF condition THEN statement ELSE statement
    (101) cond_if -> . IF condition THEN if_body
    (102) cond_if -> . IF condition THEN if_body ELSE if_body
    (115) while_loop -> . WHILE condition DO statement
    (116) while_loop -> . WHILE condition DO if_body
    (111) for_loop -> . FOR assignment to type DO statement
    (112) for_loop -> . FOR assignment to type DO if_body
    (113) for_loop -> . FOR assignment downto type DO statement
    (114) for_loop -> . FOR assignment downto type DO if_body
    (117) readln -> . READLN LPAREN type RPAREN

    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    statements                     shift and go to state 185
    statement                      shift and go to state 21
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 156

    (103) condition -> expression comparator expression .
    (27) expression -> expression . operation expression
    (103) condition -> expression . comparator expression
    (106) condition -> expression . comparator type
    (31) operation -> . plus
    (32) operation -> . minus
    (33) operation -> . times
    (34) operation -> . division
    (35) operation -> . div
    (36) operation -> . mod
    (37) operation -> . RANGE
    (63) comparator -> . eq
    (64) comparator -> . neq
    (65) comparator -> . lt
    (66) comparator -> . gt
    (67) comparator -> . lte
    (68) comparator -> . gte
    (69) comparator -> . and
    (70) comparator -> . or
    (71) comparator -> . not
    (57) plus -> . PLUS
    (58) minus -> . MINUS
    (59) times -> . TIMES
    (60) division -> . DIVISION
    (61) div -> . DIV
    (62) mod -> . MOD
    (72) eq -> . EQ
    (73) neq -> . NEQ
    (74) lt -> . LT
    (75) gt -> . GT
    (76) lte -> . LTE
    (77) gte -> . GTE
    (78) and -> . AND
    (79) or -> . OR
    (80) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 103 (condition -> expression comparator expression .)
    DO              reduce using rule 103 (condition -> expression comparator expression .)
    SEMICOLON       reduce using rule 103 (condition -> expression comparator expression .)
    TO              reduce using rule 103 (condition -> expression comparator expression .)
    DOWNTO          reduce using rule 103 (condition -> expression comparator expression .)
    ELSE            reduce using rule 103 (condition -> expression comparator expression .)
    RPAREN          reduce using rule 103 (condition -> expression comparator expression .)
    RANGE           shift and go to state 111
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVISION        shift and go to state 124
    DIV             shift and go to state 125
    MOD             shift and go to state 126
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LT              shift and go to state 114
    GT              shift and go to state 115
    LTE             shift and go to state 116
    GTE             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119
    NOT             shift and go to state 120

  ! RANGE           [ reduce using rule 103 (condition -> expression comparator expression .) ]
  ! EQ              [ reduce using rule 103 (condition -> expression comparator expression .) ]
  ! NEQ             [ reduce using rule 103 (condition -> expression comparator expression .) ]
  ! LT              [ reduce using rule 103 (condition -> expression comparator expression .) ]
  ! GT              [ reduce using rule 103 (condition -> expression comparator expression .) ]
  ! LTE             [ reduce using rule 103 (condition -> expression comparator expression .) ]
  ! GTE             [ reduce using rule 103 (condition -> expression comparator expression .) ]
  ! AND             [ reduce using rule 103 (condition -> expression comparator expression .) ]
  ! OR              [ reduce using rule 103 (condition -> expression comparator expression .) ]
  ! NOT             [ reduce using rule 103 (condition -> expression comparator expression .) ]
  ! PLUS            [ reduce using rule 103 (condition -> expression comparator expression .) ]
  ! MINUS           [ reduce using rule 103 (condition -> expression comparator expression .) ]
  ! TIMES           [ reduce using rule 103 (condition -> expression comparator expression .) ]
  ! DIVISION        [ reduce using rule 103 (condition -> expression comparator expression .) ]
  ! DIV             [ reduce using rule 103 (condition -> expression comparator expression .) ]
  ! MOD             [ reduce using rule 103 (condition -> expression comparator expression .) ]

    comparator                     shift and go to state 94
    operation                      shift and go to state 95
    plus                           shift and go to state 105
    minus                          shift and go to state 106
    times                          shift and go to state 107
    division                       shift and go to state 108
    div                            shift and go to state 109
    mod                            shift and go to state 110
    eq                             shift and go to state 96
    neq                            shift and go to state 97
    lt                             shift and go to state 98
    gt                             shift and go to state 99
    lte                            shift and go to state 100
    gte                            shift and go to state 101
    and                            shift and go to state 102
    or                             shift and go to state 103
    not                            shift and go to state 104

state 157

    (106) condition -> expression comparator type .
    (25) expression -> type . operation type
    (104) condition -> type . comparator expression
    (105) condition -> type . comparator type
    (107) condition -> type .
    (31) operation -> . plus
    (32) operation -> . minus
    (33) operation -> . times
    (34) operation -> . division
    (35) operation -> . div
    (36) operation -> . mod
    (37) operation -> . RANGE
    (63) comparator -> . eq
    (64) comparator -> . neq
    (65) comparator -> . lt
    (66) comparator -> . gt
    (67) comparator -> . lte
    (68) comparator -> . gte
    (69) comparator -> . and
    (70) comparator -> . or
    (71) comparator -> . not
    (57) plus -> . PLUS
    (58) minus -> . MINUS
    (59) times -> . TIMES
    (60) division -> . DIVISION
    (61) div -> . DIV
    (62) mod -> . MOD
    (72) eq -> . EQ
    (73) neq -> . NEQ
    (74) lt -> . LT
    (75) gt -> . GT
    (76) lte -> . LTE
    (77) gte -> . GTE
    (78) and -> . AND
    (79) or -> . OR
    (80) not -> . NOT

  ! reduce/reduce conflict for RANGE resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for PLUS resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for MINUS resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for TIMES resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DIVISION resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DIV resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for MOD resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for EQ resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for NEQ resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for LT resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for GT resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for LTE resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for GTE resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for AND resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for OR resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for NOT resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for THEN resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DO resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for TO resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for ELSE resolved using rule 106 (condition -> expression comparator type .)
  ! reduce/reduce conflict for RPAREN resolved using rule 106 (condition -> expression comparator type .)
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 106 (condition -> expression comparator type .)
    DO              reduce using rule 106 (condition -> expression comparator type .)
    SEMICOLON       reduce using rule 106 (condition -> expression comparator type .)
    TO              reduce using rule 106 (condition -> expression comparator type .)
    DOWNTO          reduce using rule 106 (condition -> expression comparator type .)
    ELSE            reduce using rule 106 (condition -> expression comparator type .)
    RPAREN          reduce using rule 106 (condition -> expression comparator type .)
    RANGE           shift and go to state 111
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVISION        shift and go to state 124
    DIV             shift and go to state 125
    MOD             shift and go to state 126
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LT              shift and go to state 114
    GT              shift and go to state 115
    LTE             shift and go to state 116
    GTE             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119
    NOT             shift and go to state 120

  ! RANGE           [ reduce using rule 106 (condition -> expression comparator type .) ]
  ! EQ              [ reduce using rule 106 (condition -> expression comparator type .) ]
  ! NEQ             [ reduce using rule 106 (condition -> expression comparator type .) ]
  ! LT              [ reduce using rule 106 (condition -> expression comparator type .) ]
  ! GT              [ reduce using rule 106 (condition -> expression comparator type .) ]
  ! LTE             [ reduce using rule 106 (condition -> expression comparator type .) ]
  ! GTE             [ reduce using rule 106 (condition -> expression comparator type .) ]
  ! AND             [ reduce using rule 106 (condition -> expression comparator type .) ]
  ! OR              [ reduce using rule 106 (condition -> expression comparator type .) ]
  ! NOT             [ reduce using rule 106 (condition -> expression comparator type .) ]
  ! PLUS            [ reduce using rule 106 (condition -> expression comparator type .) ]
  ! MINUS           [ reduce using rule 106 (condition -> expression comparator type .) ]
  ! TIMES           [ reduce using rule 106 (condition -> expression comparator type .) ]
  ! DIVISION        [ reduce using rule 106 (condition -> expression comparator type .) ]
  ! DIV             [ reduce using rule 106 (condition -> expression comparator type .) ]
  ! MOD             [ reduce using rule 106 (condition -> expression comparator type .) ]
  ! RANGE           [ reduce using rule 107 (condition -> type .) ]
  ! PLUS            [ reduce using rule 107 (condition -> type .) ]
  ! MINUS           [ reduce using rule 107 (condition -> type .) ]
  ! TIMES           [ reduce using rule 107 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 107 (condition -> type .) ]
  ! DIV             [ reduce using rule 107 (condition -> type .) ]
  ! MOD             [ reduce using rule 107 (condition -> type .) ]
  ! EQ              [ reduce using rule 107 (condition -> type .) ]
  ! NEQ             [ reduce using rule 107 (condition -> type .) ]
  ! LT              [ reduce using rule 107 (condition -> type .) ]
  ! GT              [ reduce using rule 107 (condition -> type .) ]
  ! LTE             [ reduce using rule 107 (condition -> type .) ]
  ! GTE             [ reduce using rule 107 (condition -> type .) ]
  ! AND             [ reduce using rule 107 (condition -> type .) ]
  ! OR              [ reduce using rule 107 (condition -> type .) ]
  ! NOT             [ reduce using rule 107 (condition -> type .) ]
  ! THEN            [ reduce using rule 107 (condition -> type .) ]
  ! DO              [ reduce using rule 107 (condition -> type .) ]
  ! SEMICOLON       [ reduce using rule 107 (condition -> type .) ]
  ! TO              [ reduce using rule 107 (condition -> type .) ]
  ! DOWNTO          [ reduce using rule 107 (condition -> type .) ]
  ! ELSE            [ reduce using rule 107 (condition -> type .) ]
  ! RPAREN          [ reduce using rule 107 (condition -> type .) ]

    comparator                     shift and go to state 127
    operation                      shift and go to state 128
    plus                           shift and go to state 105
    minus                          shift and go to state 106
    times                          shift and go to state 107
    division                       shift and go to state 108
    div                            shift and go to state 109
    mod                            shift and go to state 110
    eq                             shift and go to state 96
    neq                            shift and go to state 97
    lt                             shift and go to state 98
    gt                             shift and go to state 99
    lte                            shift and go to state 100
    gte                            shift and go to state 101
    and                            shift and go to state 102
    or                             shift and go to state 103
    not                            shift and go to state 104

state 158

    (27) expression -> expression operation expression .
    (27) expression -> expression . operation expression
    (103) condition -> expression . comparator expression
    (106) condition -> expression . comparator type
    (31) operation -> . plus
    (32) operation -> . minus
    (33) operation -> . times
    (34) operation -> . division
    (35) operation -> . div
    (36) operation -> . mod
    (37) operation -> . RANGE
    (63) comparator -> . eq
    (64) comparator -> . neq
    (65) comparator -> . lt
    (66) comparator -> . gt
    (67) comparator -> . lte
    (68) comparator -> . gte
    (69) comparator -> . and
    (70) comparator -> . or
    (71) comparator -> . not
    (57) plus -> . PLUS
    (58) minus -> . MINUS
    (59) times -> . TIMES
    (60) division -> . DIVISION
    (61) div -> . DIV
    (62) mod -> . MOD
    (72) eq -> . EQ
    (73) neq -> . NEQ
    (74) lt -> . LT
    (75) gt -> . GT
    (76) lte -> . LTE
    (77) gte -> . GTE
    (78) and -> . AND
    (79) or -> . OR
    (80) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    SEMICOLON       reduce using rule 27 (expression -> expression operation expression .)
    TO              reduce using rule 27 (expression -> expression operation expression .)
    DOWNTO          reduce using rule 27 (expression -> expression operation expression .)
    ELSE            reduce using rule 27 (expression -> expression operation expression .)
    RPAREN          reduce using rule 27 (expression -> expression operation expression .)
    THEN            reduce using rule 27 (expression -> expression operation expression .)
    DO              reduce using rule 27 (expression -> expression operation expression .)
    RANGE           shift and go to state 111
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVISION        shift and go to state 124
    DIV             shift and go to state 125
    MOD             shift and go to state 126
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LT              shift and go to state 114
    GT              shift and go to state 115
    LTE             shift and go to state 116
    GTE             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119
    NOT             shift and go to state 120

  ! RANGE           [ reduce using rule 27 (expression -> expression operation expression .) ]
  ! EQ              [ reduce using rule 27 (expression -> expression operation expression .) ]
  ! NEQ             [ reduce using rule 27 (expression -> expression operation expression .) ]
  ! LT              [ reduce using rule 27 (expression -> expression operation expression .) ]
  ! GT              [ reduce using rule 27 (expression -> expression operation expression .) ]
  ! LTE             [ reduce using rule 27 (expression -> expression operation expression .) ]
  ! GTE             [ reduce using rule 27 (expression -> expression operation expression .) ]
  ! AND             [ reduce using rule 27 (expression -> expression operation expression .) ]
  ! OR              [ reduce using rule 27 (expression -> expression operation expression .) ]
  ! NOT             [ reduce using rule 27 (expression -> expression operation expression .) ]
  ! PLUS            [ reduce using rule 27 (expression -> expression operation expression .) ]
  ! MINUS           [ reduce using rule 27 (expression -> expression operation expression .) ]
  ! TIMES           [ reduce using rule 27 (expression -> expression operation expression .) ]
  ! DIVISION        [ reduce using rule 27 (expression -> expression operation expression .) ]
  ! DIV             [ reduce using rule 27 (expression -> expression operation expression .) ]
  ! MOD             [ reduce using rule 27 (expression -> expression operation expression .) ]

    operation                      shift and go to state 95
    comparator                     shift and go to state 94
    plus                           shift and go to state 105
    minus                          shift and go to state 106
    times                          shift and go to state 107
    division                       shift and go to state 108
    div                            shift and go to state 109
    mod                            shift and go to state 110
    eq                             shift and go to state 96
    neq                            shift and go to state 97
    lt                             shift and go to state 98
    gt                             shift and go to state 99
    lte                            shift and go to state 100
    gte                            shift and go to state 101
    and                            shift and go to state 102
    or                             shift and go to state 103
    not                            shift and go to state 104

state 159

    (105) condition -> type comparator type .
    (25) expression -> type . operation type
    (104) condition -> type . comparator expression
    (105) condition -> type . comparator type
    (107) condition -> type .
    (31) operation -> . plus
    (32) operation -> . minus
    (33) operation -> . times
    (34) operation -> . division
    (35) operation -> . div
    (36) operation -> . mod
    (37) operation -> . RANGE
    (63) comparator -> . eq
    (64) comparator -> . neq
    (65) comparator -> . lt
    (66) comparator -> . gt
    (67) comparator -> . lte
    (68) comparator -> . gte
    (69) comparator -> . and
    (70) comparator -> . or
    (71) comparator -> . not
    (57) plus -> . PLUS
    (58) minus -> . MINUS
    (59) times -> . TIMES
    (60) division -> . DIVISION
    (61) div -> . DIV
    (62) mod -> . MOD
    (72) eq -> . EQ
    (73) neq -> . NEQ
    (74) lt -> . LT
    (75) gt -> . GT
    (76) lte -> . LTE
    (77) gte -> . GTE
    (78) and -> . AND
    (79) or -> . OR
    (80) not -> . NOT

  ! reduce/reduce conflict for RANGE resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for PLUS resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for MINUS resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for TIMES resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for DIVISION resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for DIV resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for MOD resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for EQ resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for NEQ resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for LT resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for GT resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for LTE resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for GTE resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for AND resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for OR resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for NOT resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for THEN resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for DO resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for TO resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for ELSE resolved using rule 105 (condition -> type comparator type .)
  ! reduce/reduce conflict for RPAREN resolved using rule 105 (condition -> type comparator type .)
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 105 (condition -> type comparator type .)
    DO              reduce using rule 105 (condition -> type comparator type .)
    SEMICOLON       reduce using rule 105 (condition -> type comparator type .)
    TO              reduce using rule 105 (condition -> type comparator type .)
    DOWNTO          reduce using rule 105 (condition -> type comparator type .)
    ELSE            reduce using rule 105 (condition -> type comparator type .)
    RPAREN          reduce using rule 105 (condition -> type comparator type .)
    RANGE           shift and go to state 111
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVISION        shift and go to state 124
    DIV             shift and go to state 125
    MOD             shift and go to state 126
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LT              shift and go to state 114
    GT              shift and go to state 115
    LTE             shift and go to state 116
    GTE             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119
    NOT             shift and go to state 120

  ! RANGE           [ reduce using rule 105 (condition -> type comparator type .) ]
  ! EQ              [ reduce using rule 105 (condition -> type comparator type .) ]
  ! NEQ             [ reduce using rule 105 (condition -> type comparator type .) ]
  ! LT              [ reduce using rule 105 (condition -> type comparator type .) ]
  ! GT              [ reduce using rule 105 (condition -> type comparator type .) ]
  ! LTE             [ reduce using rule 105 (condition -> type comparator type .) ]
  ! GTE             [ reduce using rule 105 (condition -> type comparator type .) ]
  ! AND             [ reduce using rule 105 (condition -> type comparator type .) ]
  ! OR              [ reduce using rule 105 (condition -> type comparator type .) ]
  ! NOT             [ reduce using rule 105 (condition -> type comparator type .) ]
  ! PLUS            [ reduce using rule 105 (condition -> type comparator type .) ]
  ! MINUS           [ reduce using rule 105 (condition -> type comparator type .) ]
  ! TIMES           [ reduce using rule 105 (condition -> type comparator type .) ]
  ! DIVISION        [ reduce using rule 105 (condition -> type comparator type .) ]
  ! DIV             [ reduce using rule 105 (condition -> type comparator type .) ]
  ! MOD             [ reduce using rule 105 (condition -> type comparator type .) ]
  ! RANGE           [ reduce using rule 107 (condition -> type .) ]
  ! PLUS            [ reduce using rule 107 (condition -> type .) ]
  ! MINUS           [ reduce using rule 107 (condition -> type .) ]
  ! TIMES           [ reduce using rule 107 (condition -> type .) ]
  ! DIVISION        [ reduce using rule 107 (condition -> type .) ]
  ! DIV             [ reduce using rule 107 (condition -> type .) ]
  ! MOD             [ reduce using rule 107 (condition -> type .) ]
  ! EQ              [ reduce using rule 107 (condition -> type .) ]
  ! NEQ             [ reduce using rule 107 (condition -> type .) ]
  ! LT              [ reduce using rule 107 (condition -> type .) ]
  ! GT              [ reduce using rule 107 (condition -> type .) ]
  ! LTE             [ reduce using rule 107 (condition -> type .) ]
  ! GTE             [ reduce using rule 107 (condition -> type .) ]
  ! AND             [ reduce using rule 107 (condition -> type .) ]
  ! OR              [ reduce using rule 107 (condition -> type .) ]
  ! NOT             [ reduce using rule 107 (condition -> type .) ]
  ! THEN            [ reduce using rule 107 (condition -> type .) ]
  ! DO              [ reduce using rule 107 (condition -> type .) ]
  ! SEMICOLON       [ reduce using rule 107 (condition -> type .) ]
  ! TO              [ reduce using rule 107 (condition -> type .) ]
  ! DOWNTO          [ reduce using rule 107 (condition -> type .) ]
  ! ELSE            [ reduce using rule 107 (condition -> type .) ]
  ! RPAREN          [ reduce using rule 107 (condition -> type .) ]

    comparator                     shift and go to state 127
    operation                      shift and go to state 128
    plus                           shift and go to state 105
    minus                          shift and go to state 106
    times                          shift and go to state 107
    division                       shift and go to state 108
    div                            shift and go to state 109
    mod                            shift and go to state 110
    eq                             shift and go to state 96
    neq                            shift and go to state 97
    lt                             shift and go to state 98
    gt                             shift and go to state 99
    lte                            shift and go to state 100
    gte                            shift and go to state 101
    and                            shift and go to state 102
    or                             shift and go to state 103
    not                            shift and go to state 104

state 160

    (104) condition -> type comparator expression .
    (27) expression -> expression . operation expression
    (103) condition -> expression . comparator expression
    (106) condition -> expression . comparator type
    (31) operation -> . plus
    (32) operation -> . minus
    (33) operation -> . times
    (34) operation -> . division
    (35) operation -> . div
    (36) operation -> . mod
    (37) operation -> . RANGE
    (63) comparator -> . eq
    (64) comparator -> . neq
    (65) comparator -> . lt
    (66) comparator -> . gt
    (67) comparator -> . lte
    (68) comparator -> . gte
    (69) comparator -> . and
    (70) comparator -> . or
    (71) comparator -> . not
    (57) plus -> . PLUS
    (58) minus -> . MINUS
    (59) times -> . TIMES
    (60) division -> . DIVISION
    (61) div -> . DIV
    (62) mod -> . MOD
    (72) eq -> . EQ
    (73) neq -> . NEQ
    (74) lt -> . LT
    (75) gt -> . GT
    (76) lte -> . LTE
    (77) gte -> . GTE
    (78) and -> . AND
    (79) or -> . OR
    (80) not -> . NOT

  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    THEN            reduce using rule 104 (condition -> type comparator expression .)
    DO              reduce using rule 104 (condition -> type comparator expression .)
    SEMICOLON       reduce using rule 104 (condition -> type comparator expression .)
    TO              reduce using rule 104 (condition -> type comparator expression .)
    DOWNTO          reduce using rule 104 (condition -> type comparator expression .)
    ELSE            reduce using rule 104 (condition -> type comparator expression .)
    RPAREN          reduce using rule 104 (condition -> type comparator expression .)
    RANGE           shift and go to state 111
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVISION        shift and go to state 124
    DIV             shift and go to state 125
    MOD             shift and go to state 126
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LT              shift and go to state 114
    GT              shift and go to state 115
    LTE             shift and go to state 116
    GTE             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119
    NOT             shift and go to state 120

  ! RANGE           [ reduce using rule 104 (condition -> type comparator expression .) ]
  ! EQ              [ reduce using rule 104 (condition -> type comparator expression .) ]
  ! NEQ             [ reduce using rule 104 (condition -> type comparator expression .) ]
  ! LT              [ reduce using rule 104 (condition -> type comparator expression .) ]
  ! GT              [ reduce using rule 104 (condition -> type comparator expression .) ]
  ! LTE             [ reduce using rule 104 (condition -> type comparator expression .) ]
  ! GTE             [ reduce using rule 104 (condition -> type comparator expression .) ]
  ! AND             [ reduce using rule 104 (condition -> type comparator expression .) ]
  ! OR              [ reduce using rule 104 (condition -> type comparator expression .) ]
  ! NOT             [ reduce using rule 104 (condition -> type comparator expression .) ]
  ! PLUS            [ reduce using rule 104 (condition -> type comparator expression .) ]
  ! MINUS           [ reduce using rule 104 (condition -> type comparator expression .) ]
  ! TIMES           [ reduce using rule 104 (condition -> type comparator expression .) ]
  ! DIVISION        [ reduce using rule 104 (condition -> type comparator expression .) ]
  ! DIV             [ reduce using rule 104 (condition -> type comparator expression .) ]
  ! MOD             [ reduce using rule 104 (condition -> type comparator expression .) ]

    comparator                     shift and go to state 94
    operation                      shift and go to state 95
    plus                           shift and go to state 105
    minus                          shift and go to state 106
    times                          shift and go to state 107
    division                       shift and go to state 108
    div                            shift and go to state 109
    mod                            shift and go to state 110
    eq                             shift and go to state 96
    neq                            shift and go to state 97
    lt                             shift and go to state 98
    gt                             shift and go to state 99
    lte                            shift and go to state 100
    gte                            shift and go to state 101
    and                            shift and go to state 102
    or                             shift and go to state 103
    not                            shift and go to state 104

state 161

    (25) expression -> type operation type .

    RANGE           reduce using rule 25 (expression -> type operation type .)
    EQ              reduce using rule 25 (expression -> type operation type .)
    NEQ             reduce using rule 25 (expression -> type operation type .)
    LT              reduce using rule 25 (expression -> type operation type .)
    GT              reduce using rule 25 (expression -> type operation type .)
    LTE             reduce using rule 25 (expression -> type operation type .)
    GTE             reduce using rule 25 (expression -> type operation type .)
    AND             reduce using rule 25 (expression -> type operation type .)
    OR              reduce using rule 25 (expression -> type operation type .)
    NOT             reduce using rule 25 (expression -> type operation type .)
    PLUS            reduce using rule 25 (expression -> type operation type .)
    MINUS           reduce using rule 25 (expression -> type operation type .)
    TIMES           reduce using rule 25 (expression -> type operation type .)
    DIVISION        reduce using rule 25 (expression -> type operation type .)
    DIV             reduce using rule 25 (expression -> type operation type .)
    MOD             reduce using rule 25 (expression -> type operation type .)
    SEMICOLON       reduce using rule 25 (expression -> type operation type .)
    TO              reduce using rule 25 (expression -> type operation type .)
    DOWNTO          reduce using rule 25 (expression -> type operation type .)
    ELSE            reduce using rule 25 (expression -> type operation type .)
    RPAREN          reduce using rule 25 (expression -> type operation type .)
    THEN            reduce using rule 25 (expression -> type operation type .)
    DO              reduce using rule 25 (expression -> type operation type .)


state 162

    (30) expression_paren -> LPAREN expression RPAREN .

    RANGE           reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    EQ              reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    LT              reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    GT              reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    LTE             reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    GTE             reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    AND             reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    OR              reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    NOT             reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    DIVISION        reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    DIV             reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    MOD             reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    TO              reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    THEN            reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)
    DO              reduce using rule 30 (expression_paren -> LPAREN expression RPAREN .)


state 163

    (93) arg_list -> IDENTIFIER . COMMA arg_list
    (94) arg_list -> IDENTIFIER .

    COMMA           shift and go to state 186
    RPAREN          reduce using rule 94 (arg_list -> IDENTIFIER .)


state 164

    (92) func_call -> IDENTIFIER LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 187


state 165

    (115) while_loop -> WHILE condition DO statement .

    SEMICOLON       reduce using rule 115 (while_loop -> WHILE condition DO statement .)
    ELSE            reduce using rule 115 (while_loop -> WHILE condition DO statement .)


state 166

    (116) while_loop -> WHILE condition DO if_body .

    SEMICOLON       reduce using rule 116 (while_loop -> WHILE condition DO if_body .)
    ELSE            reduce using rule 116 (while_loop -> WHILE condition DO if_body .)


state 167

    (111) for_loop -> FOR assignment to type . DO statement
    (112) for_loop -> FOR assignment to type . DO if_body

    DO              shift and go to state 188


state 168

    (113) for_loop -> FOR assignment downto type . DO statement
    (114) for_loop -> FOR assignment downto type . DO if_body

    DO              shift and go to state 189


state 169

    (117) readln -> READLN LPAREN type RPAREN .

    SEMICOLON       reduce using rule 117 (readln -> READLN LPAREN type RPAREN .)
    ELSE            reduce using rule 117 (readln -> READLN LPAREN type RPAREN .)


state 170

    (82) function -> func_header SEMICOLON VAR func_variable_declaration func_body . SEMICOLON

    SEMICOLON       shift and go to state 190


state 171

    (89) func_variable_declaration -> identifier_list COLON . type_name SEMICOLON func_variable_declaration
    (90) func_variable_declaration -> identifier_list COLON . type_name SEMICOLON
    (38) type_name -> . NINTEGER
    (39) type_name -> . NREAL
    (40) type_name -> . NSTRING
    (41) type_name -> . NCHAR
    (42) type_name -> . NBOOLEAN
    (43) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 74
    NREAL           shift and go to state 75
    NSTRING         shift and go to state 76
    NCHAR           shift and go to state 77
    NBOOLEAN        shift and go to state 78
    ARRAY           shift and go to state 80

    type_name                      shift and go to state 191
    array_type                     shift and go to state 79

state 172

    (91) func_body -> BEGIN statements END .

    SEMICOLON       reduce using rule 91 (func_body -> BEGIN statements END .)


state 173

    (96) procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .

    VAR             reduce using rule 96 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)
    BEGIN           reduce using rule 96 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)
    PROCEDURE       reduce using rule 96 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)
    FUNCTION        reduce using rule 96 (procedure -> PROCEDURE IDENTIFIER SEMICOLON procedure_body SEMICOLON .)


state 174

    (97) procedure_body -> BEGIN statements . END

    END             shift and go to state 192


state 175

    (88) func_arg -> IDENTIFIER COLON . type_name
    (38) type_name -> . NINTEGER
    (39) type_name -> . NREAL
    (40) type_name -> . NSTRING
    (41) type_name -> . NCHAR
    (42) type_name -> . NBOOLEAN
    (43) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 74
    NREAL           shift and go to state 75
    NSTRING         shift and go to state 76
    NCHAR           shift and go to state 77
    NBOOLEAN        shift and go to state 78
    ARRAY           shift and go to state 80

    type_name                      shift and go to state 193
    array_type                     shift and go to state 79

state 176

    (84) func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN . COLON type_name

    COLON           shift and go to state 194


state 177

    (85) func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON . type_name
    (38) type_name -> . NINTEGER
    (39) type_name -> . NREAL
    (40) type_name -> . NSTRING
    (41) type_name -> . NCHAR
    (42) type_name -> . NBOOLEAN
    (43) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 74
    NREAL           shift and go to state 75
    NSTRING         shift and go to state 76
    NCHAR           shift and go to state 77
    NBOOLEAN        shift and go to state 78
    ARRAY           shift and go to state 80

    type_name                      shift and go to state 195
    array_type                     shift and go to state 79

state 178

    (86) func_args -> func_arg COMMA . func_args
    (86) func_args -> . func_arg COMMA func_args
    (87) func_args -> . func_arg
    (88) func_arg -> . IDENTIFIER COLON type_name

    IDENTIFIER      shift and go to state 144

    func_arg                       shift and go to state 147
    func_args                      shift and go to state 196

state 179

    (7) variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration .

    BEGIN           reduce using rule 7 (variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration .)


state 180

    (11) array_type -> ARRAY LBRACKET type . RANGE type RBRACKET OF type_name

    RANGE           shift and go to state 197


state 181

    (119) writeln_args -> type COMMA writeln_args .

    RPAREN          reduce using rule 119 (writeln_args -> type COMMA writeln_args .)


state 182

    (81) length -> LENGTH LPAREN type . RPAREN

    RPAREN          shift and go to state 198


state 183

    (100) cond_if -> IF condition THEN statement ELSE . statement
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (118) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (24) assignment -> . IDENTIFIER ASSIGNMENT length
    (98) procedure_call -> . IDENTIFIER
    (99) cond_if -> . IF condition THEN statement
    (100) cond_if -> . IF condition THEN statement ELSE statement
    (101) cond_if -> . IF condition THEN if_body
    (102) cond_if -> . IF condition THEN if_body ELSE if_body
    (115) while_loop -> . WHILE condition DO statement
    (116) while_loop -> . WHILE condition DO if_body
    (111) for_loop -> . FOR assignment to type DO statement
    (112) for_loop -> . FOR assignment to type DO if_body
    (113) for_loop -> . FOR assignment downto type DO statement
    (114) for_loop -> . FOR assignment downto type DO if_body
    (117) readln -> . READLN LPAREN type RPAREN

    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    statement                      shift and go to state 199
    writeln                        shift and go to state 22
    assignment                     shift and go to state 23
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 184

    (102) cond_if -> IF condition THEN if_body ELSE . if_body
    (108) if_body -> . BEGIN statements END

    BEGIN           shift and go to state 155

    if_body                        shift and go to state 200

state 185

    (108) if_body -> BEGIN statements . END

    END             shift and go to state 201


state 186

    (93) arg_list -> IDENTIFIER COMMA . arg_list
    (93) arg_list -> . IDENTIFIER COMMA arg_list
    (94) arg_list -> . IDENTIFIER
    (95) arg_list -> .

    IDENTIFIER      shift and go to state 163
    RPAREN          reduce using rule 95 (arg_list -> .)

    arg_list                       shift and go to state 202

state 187

    (92) func_call -> IDENTIFIER LPAREN arg_list RPAREN .

    RANGE           reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    EQ              reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    LT              reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    GT              reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    LTE             reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    GTE             reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    AND             reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    OR              reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    NOT             reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DIVISION        reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DIV             reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    MOD             reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    THEN            reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DO              reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    SEMICOLON       reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    TO              reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DOWNTO          reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    ELSE            reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    RBRACKET        reduce using rule 92 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)


state 188

    (111) for_loop -> FOR assignment to type DO . statement
    (112) for_loop -> FOR assignment to type DO . if_body
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (108) if_body -> . BEGIN statements END
    (118) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (24) assignment -> . IDENTIFIER ASSIGNMENT length
    (98) procedure_call -> . IDENTIFIER
    (99) cond_if -> . IF condition THEN statement
    (100) cond_if -> . IF condition THEN statement ELSE statement
    (101) cond_if -> . IF condition THEN if_body
    (102) cond_if -> . IF condition THEN if_body ELSE if_body
    (115) while_loop -> . WHILE condition DO statement
    (116) while_loop -> . WHILE condition DO if_body
    (111) for_loop -> . FOR assignment to type DO statement
    (112) for_loop -> . FOR assignment to type DO if_body
    (113) for_loop -> . FOR assignment downto type DO statement
    (114) for_loop -> . FOR assignment downto type DO if_body
    (117) readln -> . READLN LPAREN type RPAREN

    BEGIN           shift and go to state 155
    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    assignment                     shift and go to state 23
    statement                      shift and go to state 203
    if_body                        shift and go to state 204
    writeln                        shift and go to state 22
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 189

    (113) for_loop -> FOR assignment downto type DO . statement
    (114) for_loop -> FOR assignment downto type DO . if_body
    (15) statement -> . writeln
    (16) statement -> . assignment
    (17) statement -> . procedure_call
    (18) statement -> . cond_if
    (19) statement -> . while_loop
    (20) statement -> . for_loop
    (21) statement -> . readln
    (108) if_body -> . BEGIN statements END
    (118) writeln -> . WRITELN LPAREN writeln_args RPAREN
    (22) assignment -> . IDENTIFIER ASSIGNMENT type
    (23) assignment -> . IDENTIFIER ASSIGNMENT expression
    (24) assignment -> . IDENTIFIER ASSIGNMENT length
    (98) procedure_call -> . IDENTIFIER
    (99) cond_if -> . IF condition THEN statement
    (100) cond_if -> . IF condition THEN statement ELSE statement
    (101) cond_if -> . IF condition THEN if_body
    (102) cond_if -> . IF condition THEN if_body ELSE if_body
    (115) while_loop -> . WHILE condition DO statement
    (116) while_loop -> . WHILE condition DO if_body
    (111) for_loop -> . FOR assignment to type DO statement
    (112) for_loop -> . FOR assignment to type DO if_body
    (113) for_loop -> . FOR assignment downto type DO statement
    (114) for_loop -> . FOR assignment downto type DO if_body
    (117) readln -> . READLN LPAREN type RPAREN

    BEGIN           shift and go to state 155
    WRITELN         shift and go to state 29
    IDENTIFIER      shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    READLN          shift and go to state 34

    assignment                     shift and go to state 23
    statement                      shift and go to state 205
    if_body                        shift and go to state 206
    writeln                        shift and go to state 22
    procedure_call                 shift and go to state 24
    cond_if                        shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    readln                         shift and go to state 28

state 190

    (82) function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .

    VAR             reduce using rule 82 (function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .)
    BEGIN           reduce using rule 82 (function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .)
    PROCEDURE       reduce using rule 82 (function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .)
    FUNCTION        reduce using rule 82 (function -> func_header SEMICOLON VAR func_variable_declaration func_body SEMICOLON .)


state 191

    (89) func_variable_declaration -> identifier_list COLON type_name . SEMICOLON func_variable_declaration
    (90) func_variable_declaration -> identifier_list COLON type_name . SEMICOLON

    SEMICOLON       shift and go to state 207


state 192

    (97) procedure_body -> BEGIN statements END .

    SEMICOLON       reduce using rule 97 (procedure_body -> BEGIN statements END .)


state 193

    (88) func_arg -> IDENTIFIER COLON type_name .

    COMMA           reduce using rule 88 (func_arg -> IDENTIFIER COLON type_name .)
    RPAREN          reduce using rule 88 (func_arg -> IDENTIFIER COLON type_name .)


state 194

    (84) func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON . type_name
    (38) type_name -> . NINTEGER
    (39) type_name -> . NREAL
    (40) type_name -> . NSTRING
    (41) type_name -> . NCHAR
    (42) type_name -> . NBOOLEAN
    (43) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 74
    NREAL           shift and go to state 75
    NSTRING         shift and go to state 76
    NCHAR           shift and go to state 77
    NBOOLEAN        shift and go to state 78
    ARRAY           shift and go to state 80

    type_name                      shift and go to state 208
    array_type                     shift and go to state 79

state 195

    (85) func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name .

    SEMICOLON       reduce using rule 85 (func_header -> FUNCTION IDENTIFIER LPAREN RPAREN COLON type_name .)


state 196

    (86) func_args -> func_arg COMMA func_args .

    RPAREN          reduce using rule 86 (func_args -> func_arg COMMA func_args .)


state 197

    (11) array_type -> ARRAY LBRACKET type RANGE . type RBRACKET OF type_name
    (44) type -> . integer
    (45) type -> . real
    (46) type -> . string
    (47) type -> . char
    (48) type -> . boolean
    (49) type -> . identifier
    (50) type -> . func_call
    (51) integer -> . INTEGER
    (52) real -> . REAL
    (53) string -> . STRING
    (54) char -> . CHAR
    (55) boolean -> . BOOLEAN
    (56) identifier -> . IDENTIFIER
    (92) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    INTEGER         shift and go to state 59
    REAL            shift and go to state 60
    STRING          shift and go to state 61
    CHAR            shift and go to state 62
    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 86

    type                           shift and go to state 209
    integer                        shift and go to state 51
    real                           shift and go to state 52
    string                         shift and go to state 53
    char                           shift and go to state 54
    boolean                        shift and go to state 55
    identifier                     shift and go to state 56
    func_call                      shift and go to state 85

state 198

    (81) length -> LENGTH LPAREN type RPAREN .

    SEMICOLON       reduce using rule 81 (length -> LENGTH LPAREN type RPAREN .)
    TO              reduce using rule 81 (length -> LENGTH LPAREN type RPAREN .)
    DOWNTO          reduce using rule 81 (length -> LENGTH LPAREN type RPAREN .)
    ELSE            reduce using rule 81 (length -> LENGTH LPAREN type RPAREN .)


state 199

    (100) cond_if -> IF condition THEN statement ELSE statement .

    SEMICOLON       reduce using rule 100 (cond_if -> IF condition THEN statement ELSE statement .)
    ELSE            reduce using rule 100 (cond_if -> IF condition THEN statement ELSE statement .)


state 200

    (102) cond_if -> IF condition THEN if_body ELSE if_body .

    SEMICOLON       reduce using rule 102 (cond_if -> IF condition THEN if_body ELSE if_body .)
    ELSE            reduce using rule 102 (cond_if -> IF condition THEN if_body ELSE if_body .)


state 201

    (108) if_body -> BEGIN statements END .

    ELSE            reduce using rule 108 (if_body -> BEGIN statements END .)
    SEMICOLON       reduce using rule 108 (if_body -> BEGIN statements END .)


state 202

    (93) arg_list -> IDENTIFIER COMMA arg_list .

    RPAREN          reduce using rule 93 (arg_list -> IDENTIFIER COMMA arg_list .)


state 203

    (111) for_loop -> FOR assignment to type DO statement .

    SEMICOLON       reduce using rule 111 (for_loop -> FOR assignment to type DO statement .)
    ELSE            reduce using rule 111 (for_loop -> FOR assignment to type DO statement .)


state 204

    (112) for_loop -> FOR assignment to type DO if_body .

    SEMICOLON       reduce using rule 112 (for_loop -> FOR assignment to type DO if_body .)
    ELSE            reduce using rule 112 (for_loop -> FOR assignment to type DO if_body .)


state 205

    (113) for_loop -> FOR assignment downto type DO statement .

    SEMICOLON       reduce using rule 113 (for_loop -> FOR assignment downto type DO statement .)
    ELSE            reduce using rule 113 (for_loop -> FOR assignment downto type DO statement .)


state 206

    (114) for_loop -> FOR assignment downto type DO if_body .

    SEMICOLON       reduce using rule 114 (for_loop -> FOR assignment downto type DO if_body .)
    ELSE            reduce using rule 114 (for_loop -> FOR assignment downto type DO if_body .)


state 207

    (89) func_variable_declaration -> identifier_list COLON type_name SEMICOLON . func_variable_declaration
    (90) func_variable_declaration -> identifier_list COLON type_name SEMICOLON .
    (89) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON func_variable_declaration
    (90) func_variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (9) identifier_list -> . IDENTIFIER COMMA identifier_list
    (10) identifier_list -> . IDENTIFIER

    BEGIN           reduce using rule 90 (func_variable_declaration -> identifier_list COLON type_name SEMICOLON .)
    IDENTIFIER      shift and go to state 17

    identifier_list                shift and go to state 139
    func_variable_declaration      shift and go to state 210

state 208

    (84) func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name .

    SEMICOLON       reduce using rule 84 (func_header -> FUNCTION IDENTIFIER LPAREN func_args RPAREN COLON type_name .)


state 209

    (11) array_type -> ARRAY LBRACKET type RANGE type . RBRACKET OF type_name

    RBRACKET        shift and go to state 211


state 210

    (89) func_variable_declaration -> identifier_list COLON type_name SEMICOLON func_variable_declaration .

    BEGIN           reduce using rule 89 (func_variable_declaration -> identifier_list COLON type_name SEMICOLON func_variable_declaration .)


state 211

    (11) array_type -> ARRAY LBRACKET type RANGE type RBRACKET . OF type_name

    OF              shift and go to state 212


state 212

    (11) array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF . type_name
    (38) type_name -> . NINTEGER
    (39) type_name -> . NREAL
    (40) type_name -> . NSTRING
    (41) type_name -> . NCHAR
    (42) type_name -> . NBOOLEAN
    (43) type_name -> . array_type
    (11) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 74
    NREAL           shift and go to state 75
    NSTRING         shift and go to state 76
    NCHAR           shift and go to state 77
    NBOOLEAN        shift and go to state 78
    ARRAY           shift and go to state 80

    type_name                      shift and go to state 213
    array_type                     shift and go to state 79

state 213

    (11) array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .

    SEMICOLON       reduce using rule 11 (array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .)
    COMMA           reduce using rule 11 (array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .)
    RPAREN          reduce using rule 11 (array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RANGE in state 48 resolved as shift
WARNING: shift/reduce conflict for EQ in state 48 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 48 resolved as shift
WARNING: shift/reduce conflict for LT in state 48 resolved as shift
WARNING: shift/reduce conflict for GT in state 48 resolved as shift
WARNING: shift/reduce conflict for LTE in state 48 resolved as shift
WARNING: shift/reduce conflict for GTE in state 48 resolved as shift
WARNING: shift/reduce conflict for AND in state 48 resolved as shift
WARNING: shift/reduce conflict for OR in state 48 resolved as shift
WARNING: shift/reduce conflict for NOT in state 48 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 48 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 48 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 48 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 48 resolved as shift
WARNING: shift/reduce conflict for DIV in state 48 resolved as shift
WARNING: shift/reduce conflict for MOD in state 48 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 87 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 87 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 87 resolved as shift
WARNING: shift/reduce conflict for DIV in state 87 resolved as shift
WARNING: shift/reduce conflict for MOD in state 87 resolved as shift
WARNING: shift/reduce conflict for EQ in state 87 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 87 resolved as shift
WARNING: shift/reduce conflict for LT in state 87 resolved as shift
WARNING: shift/reduce conflict for GT in state 87 resolved as shift
WARNING: shift/reduce conflict for LTE in state 87 resolved as shift
WARNING: shift/reduce conflict for GTE in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for OR in state 87 resolved as shift
WARNING: shift/reduce conflict for NOT in state 87 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 130 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 130 resolved as shift
WARNING: shift/reduce conflict for DIV in state 130 resolved as shift
WARNING: shift/reduce conflict for MOD in state 130 resolved as shift
WARNING: shift/reduce conflict for EQ in state 130 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 130 resolved as shift
WARNING: shift/reduce conflict for LT in state 130 resolved as shift
WARNING: shift/reduce conflict for GT in state 130 resolved as shift
WARNING: shift/reduce conflict for LTE in state 130 resolved as shift
WARNING: shift/reduce conflict for GTE in state 130 resolved as shift
WARNING: shift/reduce conflict for AND in state 130 resolved as shift
WARNING: shift/reduce conflict for OR in state 130 resolved as shift
WARNING: shift/reduce conflict for NOT in state 130 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 153 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 154 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 156 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 156 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 156 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 156 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 156 resolved as shift
WARNING: shift/reduce conflict for DIV in state 156 resolved as shift
WARNING: shift/reduce conflict for MOD in state 156 resolved as shift
WARNING: shift/reduce conflict for EQ in state 156 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 156 resolved as shift
WARNING: shift/reduce conflict for LT in state 156 resolved as shift
WARNING: shift/reduce conflict for GT in state 156 resolved as shift
WARNING: shift/reduce conflict for LTE in state 156 resolved as shift
WARNING: shift/reduce conflict for GTE in state 156 resolved as shift
WARNING: shift/reduce conflict for AND in state 156 resolved as shift
WARNING: shift/reduce conflict for OR in state 156 resolved as shift
WARNING: shift/reduce conflict for NOT in state 156 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 157 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 157 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 157 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 157 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 157 resolved as shift
WARNING: shift/reduce conflict for DIV in state 157 resolved as shift
WARNING: shift/reduce conflict for MOD in state 157 resolved as shift
WARNING: shift/reduce conflict for EQ in state 157 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 157 resolved as shift
WARNING: shift/reduce conflict for LT in state 157 resolved as shift
WARNING: shift/reduce conflict for GT in state 157 resolved as shift
WARNING: shift/reduce conflict for LTE in state 157 resolved as shift
WARNING: shift/reduce conflict for GTE in state 157 resolved as shift
WARNING: shift/reduce conflict for AND in state 157 resolved as shift
WARNING: shift/reduce conflict for OR in state 157 resolved as shift
WARNING: shift/reduce conflict for NOT in state 157 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 158 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 158 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 158 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 158 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 158 resolved as shift
WARNING: shift/reduce conflict for DIV in state 158 resolved as shift
WARNING: shift/reduce conflict for MOD in state 158 resolved as shift
WARNING: shift/reduce conflict for EQ in state 158 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 158 resolved as shift
WARNING: shift/reduce conflict for LT in state 158 resolved as shift
WARNING: shift/reduce conflict for GT in state 158 resolved as shift
WARNING: shift/reduce conflict for LTE in state 158 resolved as shift
WARNING: shift/reduce conflict for GTE in state 158 resolved as shift
WARNING: shift/reduce conflict for AND in state 158 resolved as shift
WARNING: shift/reduce conflict for OR in state 158 resolved as shift
WARNING: shift/reduce conflict for NOT in state 158 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 159 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 159 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 159 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 159 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 159 resolved as shift
WARNING: shift/reduce conflict for DIV in state 159 resolved as shift
WARNING: shift/reduce conflict for MOD in state 159 resolved as shift
WARNING: shift/reduce conflict for EQ in state 159 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 159 resolved as shift
WARNING: shift/reduce conflict for LT in state 159 resolved as shift
WARNING: shift/reduce conflict for GT in state 159 resolved as shift
WARNING: shift/reduce conflict for LTE in state 159 resolved as shift
WARNING: shift/reduce conflict for GTE in state 159 resolved as shift
WARNING: shift/reduce conflict for AND in state 159 resolved as shift
WARNING: shift/reduce conflict for OR in state 159 resolved as shift
WARNING: shift/reduce conflict for NOT in state 159 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 160 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 160 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 160 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 160 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 160 resolved as shift
WARNING: shift/reduce conflict for DIV in state 160 resolved as shift
WARNING: shift/reduce conflict for MOD in state 160 resolved as shift
WARNING: shift/reduce conflict for EQ in state 160 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 160 resolved as shift
WARNING: shift/reduce conflict for LT in state 160 resolved as shift
WARNING: shift/reduce conflict for GT in state 160 resolved as shift
WARNING: shift/reduce conflict for LTE in state 160 resolved as shift
WARNING: shift/reduce conflict for GTE in state 160 resolved as shift
WARNING: shift/reduce conflict for AND in state 160 resolved as shift
WARNING: shift/reduce conflict for OR in state 160 resolved as shift
WARNING: shift/reduce conflict for NOT in state 160 resolved as shift
WARNING: reduce/reduce conflict in state 50 resolved using rule (expression -> func_call)
WARNING: rejected rule (type -> func_call) in state 50
WARNING: reduce/reduce conflict in state 87 resolved using rule (assignment -> IDENTIFIER ASSIGNMENT type)
WARNING: rejected rule (condition -> type) in state 87
WARNING: reduce/reduce conflict in state 90 resolved using rule (expression -> func_call)
WARNING: rejected rule (type -> func_call) in state 90
WARNING: reduce/reduce conflict in state 157 resolved using rule (condition -> expression comparator type)
WARNING: rejected rule (condition -> type) in state 157
WARNING: reduce/reduce conflict in state 159 resolved using rule (condition -> type comparator type)
WARNING: rejected rule (condition -> type) in state 159
