Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASSIGNMENT
    COMMENT
    DIV
    DIVISION
    DO
    DOWNTO
    ELSE
    EQ
    FOR
    FUNCTION
    GT
    GTE
    IF
    LT
    LTE
    MINUS
    MOD
    NEQ
    NOT
    OR
    PLUS
    PROCEDURE
    READLN
    REPEAT
    THEN
    TIMES
    TO
    UNTIL
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> header block DOT
Rule 2     header -> PROGRAM IDENTIFIER SEMICOLON
Rule 3     block -> VAR variable_declaration body
Rule 4     block -> body
Rule 5     variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration
Rule 6     variable_declaration -> identifier_list COLON type_name SEMICOLON
Rule 7     identifier_list -> IDENTIFIER COMMA identifier_list
Rule 8     identifier_list -> IDENTIFIER
Rule 9     type_name -> NINTEGER
Rule 10    type_name -> NREAL
Rule 11    type_name -> NSTRING
Rule 12    type_name -> NCHAR
Rule 13    type_name -> NBOOLEAN
Rule 14    type_name -> array_type
Rule 15    type -> INTEGER
Rule 16    type -> REAL
Rule 17    type -> STRING
Rule 18    type -> CHAR
Rule 19    type -> BOOLEAN
Rule 20    array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name
Rule 21    body -> BEGIN statements END
Rule 22    statements -> statement SEMICOLON statements
Rule 23    statements -> statement SEMICOLON
Rule 24    statement -> writeln
Rule 25    writeln -> WRITELN LPAREN type RPAREN
Rule 26    writeln_args -> type COMMA writeln_args
Rule 27    writeln_args -> type

Terminals, with rules where they appear

AND                  : 
ARRAY                : 20
ASSIGNMENT           : 
BEGIN                : 21
BOOLEAN              : 19
CHAR                 : 18
COLON                : 5 6
COMMA                : 7 26
COMMENT              : 
DIV                  : 
DIVISION             : 
DO                   : 
DOT                  : 1
DOWNTO               : 
ELSE                 : 
END                  : 21
EQ                   : 
FOR                  : 
FUNCTION             : 
GT                   : 
GTE                  : 
IDENTIFIER           : 2 7 8
IF                   : 
INTEGER              : 15
LBRACKET             : 20
LPAREN               : 25
LT                   : 
LTE                  : 
MINUS                : 
MOD                  : 
NBOOLEAN             : 13
NCHAR                : 12
NEQ                  : 
NINTEGER             : 9
NOT                  : 
NREAL                : 10
NSTRING              : 11
OF                   : 20
OR                   : 
PLUS                 : 
PROCEDURE            : 
PROGRAM              : 2
RANGE                : 20
RBRACKET             : 20
READLN               : 
REAL                 : 16
REPEAT               : 
RPAREN               : 25
SEMICOLON            : 2 5 6 22 23
STRING               : 17
THEN                 : 
TIMES                : 
TO                   : 
UNTIL                : 
VAR                  : 3
WHILE                : 
WRITELN              : 25
error                : 

Nonterminals, with rules where they appear

array_type           : 14
block                : 1
body                 : 3 4
header               : 1
identifier_list      : 5 6 7
program              : 0
statement            : 22 23
statements           : 21 22
type                 : 20 20 25 26 27
type_name            : 5 6 20
variable_declaration : 3 5
writeln              : 24
writeln_args         : 26

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . header block DOT
    (2) header -> . PROGRAM IDENTIFIER SEMICOLON

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    header                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> header . block DOT
    (3) block -> . VAR variable_declaration body
    (4) block -> . body
    (21) body -> . BEGIN statements END

    VAR             shift and go to state 5
    BEGIN           shift and go to state 7

    block                          shift and go to state 4
    body                           shift and go to state 6

state 3

    (2) header -> PROGRAM . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 8


state 4

    (1) program -> header block . DOT

    DOT             shift and go to state 9


state 5

    (3) block -> VAR . variable_declaration body
    (5) variable_declaration -> . identifier_list COLON type_name SEMICOLON variable_declaration
    (6) variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (7) identifier_list -> . IDENTIFIER COMMA identifier_list
    (8) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 12

    variable_declaration           shift and go to state 10
    identifier_list                shift and go to state 11

state 6

    (4) block -> body .

    DOT             reduce using rule 4 (block -> body .)


state 7

    (21) body -> BEGIN . statements END
    (22) statements -> . statement SEMICOLON statements
    (23) statements -> . statement SEMICOLON
    (24) statement -> . writeln
    (25) writeln -> . WRITELN LPAREN type RPAREN

    WRITELN         shift and go to state 16

    statements                     shift and go to state 13
    statement                      shift and go to state 14
    writeln                        shift and go to state 15

state 8

    (2) header -> PROGRAM IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 17


state 9

    (1) program -> header block DOT .

    $end            reduce using rule 1 (program -> header block DOT .)


state 10

    (3) block -> VAR variable_declaration . body
    (21) body -> . BEGIN statements END

    BEGIN           shift and go to state 7

    body                           shift and go to state 18

state 11

    (5) variable_declaration -> identifier_list . COLON type_name SEMICOLON variable_declaration
    (6) variable_declaration -> identifier_list . COLON type_name SEMICOLON

    COLON           shift and go to state 19


state 12

    (7) identifier_list -> IDENTIFIER . COMMA identifier_list
    (8) identifier_list -> IDENTIFIER .

    COMMA           shift and go to state 20
    COLON           reduce using rule 8 (identifier_list -> IDENTIFIER .)


state 13

    (21) body -> BEGIN statements . END

    END             shift and go to state 21


state 14

    (22) statements -> statement . SEMICOLON statements
    (23) statements -> statement . SEMICOLON

    SEMICOLON       shift and go to state 22


state 15

    (24) statement -> writeln .

    SEMICOLON       reduce using rule 24 (statement -> writeln .)


state 16

    (25) writeln -> WRITELN . LPAREN type RPAREN

    LPAREN          shift and go to state 23


state 17

    (2) header -> PROGRAM IDENTIFIER SEMICOLON .

    VAR             reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)
    BEGIN           reduce using rule 2 (header -> PROGRAM IDENTIFIER SEMICOLON .)


state 18

    (3) block -> VAR variable_declaration body .

    DOT             reduce using rule 3 (block -> VAR variable_declaration body .)


state 19

    (5) variable_declaration -> identifier_list COLON . type_name SEMICOLON variable_declaration
    (6) variable_declaration -> identifier_list COLON . type_name SEMICOLON
    (9) type_name -> . NINTEGER
    (10) type_name -> . NREAL
    (11) type_name -> . NSTRING
    (12) type_name -> . NCHAR
    (13) type_name -> . NBOOLEAN
    (14) type_name -> . array_type
    (20) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 25
    NREAL           shift and go to state 26
    NSTRING         shift and go to state 27
    NCHAR           shift and go to state 28
    NBOOLEAN        shift and go to state 29
    ARRAY           shift and go to state 31

    type_name                      shift and go to state 24
    array_type                     shift and go to state 30

state 20

    (7) identifier_list -> IDENTIFIER COMMA . identifier_list
    (7) identifier_list -> . IDENTIFIER COMMA identifier_list
    (8) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 12

    identifier_list                shift and go to state 32

state 21

    (21) body -> BEGIN statements END .

    DOT             reduce using rule 21 (body -> BEGIN statements END .)


state 22

    (22) statements -> statement SEMICOLON . statements
    (23) statements -> statement SEMICOLON .
    (22) statements -> . statement SEMICOLON statements
    (23) statements -> . statement SEMICOLON
    (24) statement -> . writeln
    (25) writeln -> . WRITELN LPAREN type RPAREN

    END             reduce using rule 23 (statements -> statement SEMICOLON .)
    WRITELN         shift and go to state 16

    statement                      shift and go to state 14
    statements                     shift and go to state 33
    writeln                        shift and go to state 15

state 23

    (25) writeln -> WRITELN LPAREN . type RPAREN
    (15) type -> . INTEGER
    (16) type -> . REAL
    (17) type -> . STRING
    (18) type -> . CHAR
    (19) type -> . BOOLEAN

    INTEGER         shift and go to state 35
    REAL            shift and go to state 36
    STRING          shift and go to state 37
    CHAR            shift and go to state 38
    BOOLEAN         shift and go to state 39

    type                           shift and go to state 34

state 24

    (5) variable_declaration -> identifier_list COLON type_name . SEMICOLON variable_declaration
    (6) variable_declaration -> identifier_list COLON type_name . SEMICOLON

    SEMICOLON       shift and go to state 40


state 25

    (9) type_name -> NINTEGER .

    SEMICOLON       reduce using rule 9 (type_name -> NINTEGER .)


state 26

    (10) type_name -> NREAL .

    SEMICOLON       reduce using rule 10 (type_name -> NREAL .)


state 27

    (11) type_name -> NSTRING .

    SEMICOLON       reduce using rule 11 (type_name -> NSTRING .)


state 28

    (12) type_name -> NCHAR .

    SEMICOLON       reduce using rule 12 (type_name -> NCHAR .)


state 29

    (13) type_name -> NBOOLEAN .

    SEMICOLON       reduce using rule 13 (type_name -> NBOOLEAN .)


state 30

    (14) type_name -> array_type .

    SEMICOLON       reduce using rule 14 (type_name -> array_type .)


state 31

    (20) array_type -> ARRAY . LBRACKET type RANGE type RBRACKET OF type_name

    LBRACKET        shift and go to state 41


state 32

    (7) identifier_list -> IDENTIFIER COMMA identifier_list .

    COLON           reduce using rule 7 (identifier_list -> IDENTIFIER COMMA identifier_list .)


state 33

    (22) statements -> statement SEMICOLON statements .

    END             reduce using rule 22 (statements -> statement SEMICOLON statements .)


state 34

    (25) writeln -> WRITELN LPAREN type . RPAREN

    RPAREN          shift and go to state 42


state 35

    (15) type -> INTEGER .

    RPAREN          reduce using rule 15 (type -> INTEGER .)
    RANGE           reduce using rule 15 (type -> INTEGER .)
    RBRACKET        reduce using rule 15 (type -> INTEGER .)


state 36

    (16) type -> REAL .

    RPAREN          reduce using rule 16 (type -> REAL .)
    RANGE           reduce using rule 16 (type -> REAL .)
    RBRACKET        reduce using rule 16 (type -> REAL .)


state 37

    (17) type -> STRING .

    RPAREN          reduce using rule 17 (type -> STRING .)
    RANGE           reduce using rule 17 (type -> STRING .)
    RBRACKET        reduce using rule 17 (type -> STRING .)


state 38

    (18) type -> CHAR .

    RPAREN          reduce using rule 18 (type -> CHAR .)
    RANGE           reduce using rule 18 (type -> CHAR .)
    RBRACKET        reduce using rule 18 (type -> CHAR .)


state 39

    (19) type -> BOOLEAN .

    RPAREN          reduce using rule 19 (type -> BOOLEAN .)
    RANGE           reduce using rule 19 (type -> BOOLEAN .)
    RBRACKET        reduce using rule 19 (type -> BOOLEAN .)


state 40

    (5) variable_declaration -> identifier_list COLON type_name SEMICOLON . variable_declaration
    (6) variable_declaration -> identifier_list COLON type_name SEMICOLON .
    (5) variable_declaration -> . identifier_list COLON type_name SEMICOLON variable_declaration
    (6) variable_declaration -> . identifier_list COLON type_name SEMICOLON
    (7) identifier_list -> . IDENTIFIER COMMA identifier_list
    (8) identifier_list -> . IDENTIFIER

    BEGIN           reduce using rule 6 (variable_declaration -> identifier_list COLON type_name SEMICOLON .)
    IDENTIFIER      shift and go to state 12

    identifier_list                shift and go to state 11
    variable_declaration           shift and go to state 43

state 41

    (20) array_type -> ARRAY LBRACKET . type RANGE type RBRACKET OF type_name
    (15) type -> . INTEGER
    (16) type -> . REAL
    (17) type -> . STRING
    (18) type -> . CHAR
    (19) type -> . BOOLEAN

    INTEGER         shift and go to state 35
    REAL            shift and go to state 36
    STRING          shift and go to state 37
    CHAR            shift and go to state 38
    BOOLEAN         shift and go to state 39

    type                           shift and go to state 44

state 42

    (25) writeln -> WRITELN LPAREN type RPAREN .

    SEMICOLON       reduce using rule 25 (writeln -> WRITELN LPAREN type RPAREN .)


state 43

    (5) variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration .

    BEGIN           reduce using rule 5 (variable_declaration -> identifier_list COLON type_name SEMICOLON variable_declaration .)


state 44

    (20) array_type -> ARRAY LBRACKET type . RANGE type RBRACKET OF type_name

    RANGE           shift and go to state 45


state 45

    (20) array_type -> ARRAY LBRACKET type RANGE . type RBRACKET OF type_name
    (15) type -> . INTEGER
    (16) type -> . REAL
    (17) type -> . STRING
    (18) type -> . CHAR
    (19) type -> . BOOLEAN

    INTEGER         shift and go to state 35
    REAL            shift and go to state 36
    STRING          shift and go to state 37
    CHAR            shift and go to state 38
    BOOLEAN         shift and go to state 39

    type                           shift and go to state 46

state 46

    (20) array_type -> ARRAY LBRACKET type RANGE type . RBRACKET OF type_name

    RBRACKET        shift and go to state 47


state 47

    (20) array_type -> ARRAY LBRACKET type RANGE type RBRACKET . OF type_name

    OF              shift and go to state 48


state 48

    (20) array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF . type_name
    (9) type_name -> . NINTEGER
    (10) type_name -> . NREAL
    (11) type_name -> . NSTRING
    (12) type_name -> . NCHAR
    (13) type_name -> . NBOOLEAN
    (14) type_name -> . array_type
    (20) array_type -> . ARRAY LBRACKET type RANGE type RBRACKET OF type_name

    NINTEGER        shift and go to state 25
    NREAL           shift and go to state 26
    NSTRING         shift and go to state 27
    NCHAR           shift and go to state 28
    NBOOLEAN        shift and go to state 29
    ARRAY           shift and go to state 31

    type_name                      shift and go to state 49
    array_type                     shift and go to state 30

state 49

    (20) array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .

    SEMICOLON       reduce using rule 20 (array_type -> ARRAY LBRACKET type RANGE type RBRACKET OF type_name .)

